/*! For license information please see app.c7c43696.js.LICENSE.txt */
(function(){var __webpack_modules__={672:function(e,t,n){"use strict";var r,i=n(294),a=n(745);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(r||(r={}));var o="beforeunload";function l(e){e.preventDefault(),e.returnValue=""}function c(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function u(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}const h=(0,i.createContext)(null),f=(0,i.createContext)(null),p=(0,i.createContext)({outlet:null,matches:[]});function d(e,t){if(!e)throw new Error(t)}function m(e,t,n){void 0===n&&(n="/");let r=x(("string"==typeof t?u(t):t).pathname||"/",n);if(null==r)return null;let i=g(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(i);let a=null;for(let e=0;null==a&&e<i.length;++e)a=k(i[e],r);return a}function g(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,i)=>{let a={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:i,route:e};a.relativePath.startsWith("/")&&(a.relativePath.startsWith(r)||d(!1),a.relativePath=a.relativePath.slice(r.length));let s=w([r,a.relativePath]),o=n.concat(a);e.children&&e.children.length>0&&(!0===e.index&&d(!1),g(e.children,t,o,s)),(null!=e.path||e.index)&&t.push({path:s,score:b(s,e.index),routesMeta:o})})),t}const y=/^:\w+$/,v=e=>"*"===e;function b(e,t){let n=e.split("/"),r=n.length;return n.some(v)&&(r+=-2),t&&(r+=2),n.filter((e=>!v(e))).reduce(((e,t)=>e+(y.test(t)?3:""===t?1:10)),r)}function k(e,t){let{routesMeta:n}=e,r={},i="/",a=[];for(let e=0;e<n.length;++e){let s=n[e],o=e===n.length-1,l="/"===i?t:t.slice(i.length)||"/",c=E({path:s.relativePath,caseSensitive:s.caseSensitive,end:o},l);if(!c)return null;Object.assign(r,c.params);let u=s.route;a.push({params:r,pathname:w([i,c.pathname]),pathnameBase:S(w([i,c.pathnameBase])),route:u}),"/"!==c.pathnameBase&&(i=w([i,c.pathnameBase]))}return a}function E(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],i="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),i+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):i+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(i,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),i=t.match(n);if(!i)return null;let a=i[0],s=a.replace(/(.)\/+$/,"$1"),o=i.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=o[n]||"";s=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(o[n]||""),e}),{}),pathname:a,pathnameBase:s,pattern:e}}function x(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const w=e=>e.join("/").replace(/\/\/+/g,"/"),S=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),C=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",P=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function _(){return null!=(0,i.useContext)(f)}function T(){return _()||d(!1),(0,i.useContext)(f).location}function A(){_()||d(!1);let{basename:e,navigator:t}=(0,i.useContext)(h),{matches:n}=(0,i.useContext)(p),{pathname:r}=T(),a=JSON.stringify(n.map((e=>e.pathnameBase))),s=(0,i.useRef)(!1);return(0,i.useEffect)((()=>{s.current=!0})),(0,i.useCallback)((function(n,i){if(void 0===i&&(i={}),!s.current)return;if("number"==typeof n)return void t.go(n);let o=function(e,t,n){let r,i="string"==typeof e?u(e):e,a=""===e||""===i.pathname?"/":i.pathname;if(null==a)r=n;else{let e=t.length-1;if(a.startsWith("..")){let t=a.split("/");for(;".."===t[0];)t.shift(),e-=1;i.pathname=t.join("/")}r=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:i=""}="string"==typeof e?u(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:C(r),hash:P(i)}}(i,r);return a&&"/"!==a&&a.endsWith("/")&&!s.pathname.endsWith("/")&&(s.pathname+="/"),s}(n,JSON.parse(a),r);"/"!==e&&(o.pathname=w([e,o.pathname])),(i.replace?t.replace:t.push)(o,i.state)}),[e,t,a,r])}function F(e){d(!1)}function M(e){let{basename:t="/",children:n=null,location:a,navigationType:s=r.Pop,navigator:o,static:l=!1}=e;_()&&d(!1);let c=S(t),p=(0,i.useMemo)((()=>({basename:c,navigator:o,static:l})),[c,o,l]);"string"==typeof a&&(a=u(a));let{pathname:m="/",search:g="",hash:y="",state:v=null,key:b="default"}=a,k=(0,i.useMemo)((()=>{let e=x(m,c);return null==e?null:{pathname:e,search:g,hash:y,state:v,key:b}}),[c,m,g,y,v,b]);return null==k?null:(0,i.createElement)(h.Provider,{value:p},(0,i.createElement)(f.Provider,{children:n,value:{location:k,navigationType:s}}))}function D(e){let{children:t,location:n}=e;return function(e,t){_()||d(!1);let{matches:n}=(0,i.useContext)(p),r=n[n.length-1],a=r?r.params:{},s=(r&&r.pathname,r?r.pathnameBase:"/");r&&r.route;let o,l=T();if(t){var c;let e="string"==typeof t?u(t):t;"/"===s||(null==(c=e.pathname)?void 0:c.startsWith(s))||d(!1),o=e}else o=l;let h=o.pathname||"/",f=m(e,{pathname:"/"===s?h:h.slice(s.length)||"/"});return function(e,t){return void 0===t&&(t=[]),null==e?null:e.reduceRight(((n,r,a)=>(0,i.createElement)(p.Provider,{children:void 0!==r.route.element?r.route.element:n,value:{outlet:n,matches:t.concat(e.slice(0,a+1))}})),null)}(f&&f.map((e=>Object.assign({},e,{params:Object.assign({},a,e.params),pathname:w([s,e.pathname]),pathnameBase:"/"===e.pathnameBase?s:w([s,e.pathnameBase])}))),n)}(I(t),n)}function I(e){let t=[];return i.Children.forEach(e,(e=>{if(!(0,i.isValidElement)(e))return;if(e.type===i.Fragment)return void t.push.apply(t,I(e.props.children));e.type!==F&&d(!1);let n={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(n.children=I(e.props.children)),t.push(n)})),t}var R=n(158),N=n.n(R);function L(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function O(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function z(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?O(Object(n),!0).forEach((function(t){L(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):O(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var V={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]},name:"check-circle",theme:"filled"};function B(e){if(Array.isArray(e))return e}function $(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function j(e,t){if(e){if("string"==typeof e)return $(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$(e,t):void 0}}function H(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function G(e,t){return B(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a=[],s=!0,o=!1;try{for(n=n.call(e);!(s=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);s=!0);}catch(e){o=!0,i=e}finally{try{s||null==n.return||n.return()}finally{if(o)throw i}}return a}}(e,t)||j(e,t)||H()}function q(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var U=n(184),W=n.n(U),K=(0,i.createContext)({});function Y(e){return Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Y(e)}function Q(e,t){(function(e){return"string"==typeof e&&-1!==e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var n=function(e){return"string"==typeof e&&-1!==e.indexOf("%")}(e);return e=360===t?e:Math.min(t,Math.max(0,parseFloat(e))),n&&(e=parseInt(String(e*t),10)/100),Math.abs(e-t)<1e-6?1:e=360===t?(e<0?e%t+t:e%t)/parseFloat(String(t)):e%t/parseFloat(String(t))}function X(e){return Math.min(1,Math.max(0,e))}function Z(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function J(e){return e<=1?"".concat(100*Number(e),"%"):e}function ee(e){return 1===e.length?"0"+e:String(e)}function te(e,t,n){e=Q(e,255),t=Q(t,255),n=Q(n,255);var r=Math.max(e,t,n),i=Math.min(e,t,n),a=0,s=0,o=(r+i)/2;if(r===i)s=0,a=0;else{var l=r-i;switch(s=o>.5?l/(2-r-i):l/(r+i),r){case e:a=(t-n)/l+(t<n?6:0);break;case t:a=(n-e)/l+2;break;case n:a=(e-t)/l+4}a/=6}return{h:a,s:s,l:o}}function ne(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*n*(t-e):n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function re(e,t,n){e=Q(e,255),t=Q(t,255),n=Q(n,255);var r=Math.max(e,t,n),i=Math.min(e,t,n),a=0,s=r,o=r-i,l=0===r?0:o/r;if(r===i)a=0;else{switch(r){case e:a=(t-n)/o+(t<n?6:0);break;case t:a=(n-e)/o+2;break;case n:a=(e-t)/o+4}a/=6}return{h:a,s:l,v:s}}function ie(e,t,n,r){var i=[ee(Math.round(e).toString(16)),ee(Math.round(t).toString(16)),ee(Math.round(n).toString(16))];return r&&i[0].startsWith(i[0].charAt(1))&&i[1].startsWith(i[1].charAt(1))&&i[2].startsWith(i[2].charAt(1))?i[0].charAt(0)+i[1].charAt(0)+i[2].charAt(0):i.join("")}function ae(e){return se(e)/255}function se(e){return parseInt(e,16)}var oe={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function le(e){var t,n,r,i={r:0,g:0,b:0},a=1,s=null,o=null,l=null,c=!1,u=!1;return"string"==typeof e&&(e=function(e){if(0===(e=e.trim().toLowerCase()).length)return!1;var t=!1;if(oe[e])e=oe[e],t=!0;else if("transparent"===e)return{r:0,g:0,b:0,a:0,format:"name"};var n=fe.rgb.exec(e);return n?{r:n[1],g:n[2],b:n[3]}:(n=fe.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=fe.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=fe.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=fe.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=fe.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=fe.hex8.exec(e))?{r:se(n[1]),g:se(n[2]),b:se(n[3]),a:ae(n[4]),format:t?"name":"hex8"}:(n=fe.hex6.exec(e))?{r:se(n[1]),g:se(n[2]),b:se(n[3]),format:t?"name":"hex"}:(n=fe.hex4.exec(e))?{r:se(n[1]+n[1]),g:se(n[2]+n[2]),b:se(n[3]+n[3]),a:ae(n[4]+n[4]),format:t?"name":"hex8"}:!!(n=fe.hex3.exec(e))&&{r:se(n[1]+n[1]),g:se(n[2]+n[2]),b:se(n[3]+n[3]),format:t?"name":"hex"}}(e)),"object"==typeof e&&(pe(e.r)&&pe(e.g)&&pe(e.b)?(t=e.r,n=e.g,r=e.b,i={r:255*Q(t,255),g:255*Q(n,255),b:255*Q(r,255)},c=!0,u="%"===String(e.r).substr(-1)?"prgb":"rgb"):pe(e.h)&&pe(e.s)&&pe(e.v)?(s=J(e.s),o=J(e.v),i=function(e,t,n){e=6*Q(e,360),t=Q(t,100),n=Q(n,100);var r=Math.floor(e),i=e-r,a=n*(1-t),s=n*(1-i*t),o=n*(1-(1-i)*t),l=r%6;return{r:255*[n,s,a,a,o,n][l],g:255*[o,n,n,s,a,a][l],b:255*[a,a,o,n,n,s][l]}}(e.h,s,o),c=!0,u="hsv"):pe(e.h)&&pe(e.s)&&pe(e.l)&&(s=J(e.s),l=J(e.l),i=function(e,t,n){var r,i,a;if(e=Q(e,360),t=Q(t,100),n=Q(n,100),0===t)i=n,a=n,r=n;else{var s=n<.5?n*(1+t):n+t-n*t,o=2*n-s;r=ne(o,s,e+1/3),i=ne(o,s,e),a=ne(o,s,e-1/3)}return{r:255*r,g:255*i,b:255*a}}(e.h,s,l),c=!0,u="hsl"),Object.prototype.hasOwnProperty.call(e,"a")&&(a=e.a)),a=Z(a),{ok:c,format:e.format||u,r:Math.min(255,Math.max(i.r,0)),g:Math.min(255,Math.max(i.g,0)),b:Math.min(255,Math.max(i.b,0)),a:a}}var ce="(?:".concat("[-\\+]?\\d*\\.\\d+%?",")|(?:").concat("[-\\+]?\\d+%?",")"),ue="[\\s|\\(]+(".concat(ce,")[,|\\s]+(").concat(ce,")[,|\\s]+(").concat(ce,")\\s*\\)?"),he="[\\s|\\(]+(".concat(ce,")[,|\\s]+(").concat(ce,")[,|\\s]+(").concat(ce,")[,|\\s]+(").concat(ce,")\\s*\\)?"),fe={CSS_UNIT:new RegExp(ce),rgb:new RegExp("rgb"+ue),rgba:new RegExp("rgba"+he),hsl:new RegExp("hsl"+ue),hsla:new RegExp("hsla"+he),hsv:new RegExp("hsv"+ue),hsva:new RegExp("hsva"+he),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function pe(e){return Boolean(fe.CSS_UNIT.exec(String(e)))}var de=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function me(e){var t=re(e.r,e.g,e.b);return{h:360*t.h,s:t.s,v:t.v}}function ge(e){var t=e.r,n=e.g,r=e.b;return"#".concat(ie(t,n,r,!1))}function ye(e,t,n){var r=n/100;return{r:(t.r-e.r)*r+e.r,g:(t.g-e.g)*r+e.g,b:(t.b-e.b)*r+e.b}}function ve(e,t,n){var r;return(r=Math.round(e.h)>=60&&Math.round(e.h)<=240?n?Math.round(e.h)-2*t:Math.round(e.h)+2*t:n?Math.round(e.h)+2*t:Math.round(e.h)-2*t)<0?r+=360:r>=360&&(r-=360),r}function be(e,t,n){return 0===e.h&&0===e.s?e.s:((r=n?e.s-.16*t:4===t?e.s+.16:e.s+.05*t)>1&&(r=1),n&&5===t&&r>.1&&(r=.1),r<.06&&(r=.06),Number(r.toFixed(2)));var r}function ke(e,t,n){var r;return(r=n?e.v+.05*t:e.v-.15*t)>1&&(r=1),Number(r.toFixed(2))}function Ee(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[],r=le(e),i=5;i>0;i-=1){var a=me(r),s=ge(le({h:ve(a,i,!0),s:be(a,i,!0),v:ke(a,i,!0)}));n.push(s)}n.push(ge(r));for(var o=1;o<=4;o+=1){var l=me(r),c=ge(le({h:ve(l,o),s:be(l,o),v:ke(l,o)}));n.push(c)}return"dark"===t.theme?de.map((function(e){var r=e.index,i=e.opacity;return ge(ye(le(t.backgroundColor||"#141414"),le(n[r]),100*i))})):n}var xe={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},we={},Se={};Object.keys(xe).forEach((function(e){we[e]=Ee(xe[e]),we[e].primary=we[e][5],Se[e]=Ee(xe[e],{theme:"dark",backgroundColor:"#141414"}),Se[e].primary=Se[e][5]})),we.red,we.volcano,we.gold,we.orange,we.yellow,we.lime,we.green,we.cyan,we.blue,we.geekblue,we.purple,we.magenta,we.grey;var Ce={};function Pe(e,t){}var _e=function(e,t){!function(e,t,n){t||Ce[n]||(e(!1,n),Ce[n]=!0)}(Pe,e,t)};function Te(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}var Ae="data-rc-order",Fe="rc-util-key",Me=new Map;function De(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.mark;return t?t.startsWith("data-")?t:"data-".concat(t):Fe}function Ie(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function Re(e){return"queue"===e?"prependQueue":e?"prepend":"append"}function Ne(e){return Array.from((Me.get(e)||e).children).filter((function(e){return"STYLE"===e.tagName}))}function Le(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!Te())return null;var n=t.csp,r=t.prepend,i=document.createElement("style");i.setAttribute(Ae,Re(r)),(null==n?void 0:n.nonce)&&(i.nonce=null==n?void 0:n.nonce),i.innerHTML=e;var a=Ie(t),s=a.firstChild;if(r){if("queue"===r){var o=Ne(a).filter((function(e){return["prepend","prependQueue"].includes(e.getAttribute(Ae))}));if(o.length)return a.insertBefore(i,o[o.length-1].nextSibling),i}a.insertBefore(i,s)}else a.appendChild(i);return i}function Oe(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Ie(t);return Ne(n).find((function(n){return n.getAttribute(De(t))===e}))}function ze(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=Ie(n);if(!Me.has(r)){var i=Le("",n),a=i.parentNode;Me.set(r,a),a.removeChild(i)}var s,o,l,c=Oe(t,n);if(c)return(null===(s=n.csp)||void 0===s?void 0:s.nonce)&&c.nonce!==(null===(o=n.csp)||void 0===o?void 0:o.nonce)&&(c.nonce=null===(l=n.csp)||void 0===l?void 0:l.nonce),c.innerHTML!==e&&(c.innerHTML=e),c;var u=Le(e,n);return u.setAttribute(De(n),t),u}function Ve(e){return"object"===Y(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===Y(e.icon)||"function"==typeof e.icon)}function Be(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){var r=e[n];return"class"===n?(t.className=r,delete t.class):t[n]=r,t}),{})}function $e(e,t,n){return n?i.createElement(e.tag,z(z({key:t},Be(e.attrs)),n),(e.children||[]).map((function(n,r){return $e(n,"".concat(t,"-").concat(e.tag,"-").concat(r))}))):i.createElement(e.tag,z({key:t},Be(e.attrs)),(e.children||[]).map((function(n,r){return $e(n,"".concat(t,"-").concat(e.tag,"-").concat(r))})))}function je(e){return Ee(e)[0]}function He(e){return e?Array.isArray(e)?e:[e]:[]}var Ge="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n",qe=["icon","className","onClick","style","primaryColor","secondaryColor"],Ue={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1},We=function(e){var t=e.icon,n=e.className,r=e.onClick,a=e.style,s=e.primaryColor,o=e.secondaryColor,l=q(e,qe),c=Ue;if(s&&(c={primaryColor:s,secondaryColor:o||je(s)}),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ge,t=(0,i.useContext)(K).csp;(0,i.useEffect)((function(){ze(e,"@ant-design-icons",{prepend:!0,csp:t})}),[])}(),function(e,t){_e(e,"[@ant-design/icons] ".concat(t))}(Ve(t),"icon should be icon definiton, but got ".concat(t)),!Ve(t))return null;var u=t;return u&&"function"==typeof u.icon&&(u=z(z({},u),{},{icon:u.icon(c.primaryColor,c.secondaryColor)})),$e(u.icon,"svg-".concat(u.name),z({className:n,onClick:r,style:a,"data-icon":u.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},l))};We.displayName="IconReact",We.getTwoToneColors=function(){return z({},Ue)},We.setTwoToneColors=function(e){var t=e.primaryColor,n=e.secondaryColor;Ue.primaryColor=t,Ue.secondaryColor=n||je(t),Ue.calculated=!!n};var Ke=We;function Ye(e){var t=G(He(e),2),n=t[0],r=t[1];return Ke.setTwoToneColors({primaryColor:n,secondaryColor:r})}var Qe=["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"];Ye("#1890ff");var Xe=i.forwardRef((function(e,t){var n,r=e.className,a=e.icon,s=e.spin,o=e.rotate,l=e.tabIndex,c=e.onClick,u=e.twoToneColor,h=q(e,Qe),f=i.useContext(K).prefixCls,p=void 0===f?"anticon":f,d=W()(p,(L(n={},"".concat(p,"-").concat(a.name),!!a.name),L(n,"".concat(p,"-spin"),!!s||"loading"===a.name),n),r),m=l;void 0===m&&c&&(m=-1);var g=o?{msTransform:"rotate(".concat(o,"deg)"),transform:"rotate(".concat(o,"deg)")}:void 0,y=G(He(u),2),v=y[0],b=y[1];return i.createElement("span",z(z({role:"img","aria-label":a.name},h),{},{ref:t,tabIndex:m,onClick:c,className:d}),i.createElement(Ke,{icon:a,primaryColor:v,secondaryColor:b,style:g}))}));Xe.displayName="AntdIcon",Xe.getTwoToneColor=function(){var e=Ke.getTwoToneColors();return e.calculated?[e.primaryColor,e.secondaryColor]:e.primaryColor},Xe.setTwoToneColor=Ye;var Ze=Xe,Je=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:V}))};Je.displayName="CheckCircleFilled";var et=i.forwardRef(Je),tt={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"}}]},name:"close-circle",theme:"filled"},nt=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:tt}))};nt.displayName="CloseCircleFilled";var rt=i.forwardRef(nt),it={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"exclamation-circle",theme:"filled"},at=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:it}))};at.displayName="ExclamationCircleFilled";var st=i.forwardRef(at),ot={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"info-circle",theme:"filled"},lt=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:ot}))};lt.displayName="InfoCircleFilled";var ct=i.forwardRef(lt),ut={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"}}]},name:"loading",theme:"outlined"},ht=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:ut}))};ht.displayName="LoadingOutlined";var ft=i.forwardRef(ht);function pt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function dt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function mt(e,t,n){return t&&dt(e.prototype,t),n&&dt(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function gt(e,t){return gt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},gt(e,t)}function yt(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&gt(e,t)}function vt(e){return vt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},vt(e)}function bt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function kt(e,t){if(t&&("object"===Y(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return bt(e)}function Et(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=vt(e);if(t){var i=vt(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return kt(this,n)}}function xt(){xt=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",s=r.toStringTag||"@@toStringTag";function o(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{o({},"")}catch(e){o=function(e,t,n){return e[t]=n}}function l(e,t,n,r){var i=t&&t.prototype instanceof h?t:h,a=Object.create(i.prototype),s=new w(r||[]);return a._invoke=function(e,t,n){var r="suspendedStart";return function(i,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw a;return{value:void 0,done:!0}}for(n.method=i,n.arg=a;;){var s=n.delegate;if(s){var o=k(s,n);if(o){if(o===u)continue;return o}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var l=c(e,t,n);if("normal"===l.type){if(r=n.done?"completed":"suspendedYield",l.arg===u)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r="completed",n.method="throw",n.arg=l.arg)}}}(e,n,s),a}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var u={};function h(){}function f(){}function p(){}var d={};o(d,i,(function(){return this}));var m=Object.getPrototypeOf,g=m&&m(m(S([])));g&&g!==t&&n.call(g,i)&&(d=g);var y=p.prototype=h.prototype=Object.create(d);function v(e){["next","throw","return"].forEach((function(t){o(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function r(i,a,s,o){var l=c(e[i],e,a);if("throw"!==l.type){var u=l.arg,h=u.value;return h&&"object"==Y(h)&&n.call(h,"__await")?t.resolve(h.__await).then((function(e){r("next",e,s,o)}),(function(e){r("throw",e,s,o)})):t.resolve(h).then((function(e){u.value=e,s(u)}),(function(e){return r("throw",e,s,o)}))}o(l.arg)}var i;this._invoke=function(e,n){function a(){return new t((function(t,i){r(e,n,t,i)}))}return i=i?i.then(a,a):a()}}function k(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,k(e,t),"throw"===t.method))return u;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return u}var r=c(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,u;var i=r.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,u):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,u)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function w(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function S(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:C}}function C(){return{value:void 0,done:!0}}return f.prototype=p,o(y,"constructor",p),o(p,"constructor",f),f.displayName=o(p,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,p):(e.__proto__=p,o(e,s,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},v(b.prototype),o(b.prototype,a,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,i,a){void 0===a&&(a=Promise);var s=new b(l(t,n,r,i),a);return e.isGeneratorFunction(n)?s:s.next().then((function(e){return e.done?e.value:s.next()}))},v(y),o(y,s,"Generator"),o(y,i,(function(){return this})),o(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=S,w.prototype={constructor:w,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return s.type="throw",s.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var o=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(o&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(o){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var s=a?a.completion:{};return s.type=e,s.arg=t,a?(this.method="next",this.next=a.finallyLoc,u):this.complete(s)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),u},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),u}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;x(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:S(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),u}},e}function wt(e,t,n,r,i,a,s){try{var o=e[a](s),l=o.value}catch(e){return void n(e)}o.done?t(l):Promise.resolve(l).then(r,i)}function St(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var a=e.apply(t,n);function s(e){wt(a,r,i,s,o,"next",e)}function o(e){wt(a,r,i,s,o,"throw",e)}s(void 0)}))}}var Ct,Pt=n(935),_t=z({},n.t(Pt,2)),Tt=_t.version,At=_t.render,Ft=_t.unmountComponentAtNode;try{Number((Tt||"").split(".")[0])>=18&&(Ct=_t.createRoot)}catch(e){}function Mt(e){var t=_t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;t&&"object"===Y(t)&&(t.usingClientEntryPoint=e)}var Dt="__rc_react_root__";function It(e){return Rt.apply(this,arguments)}function Rt(){return(Rt=St(xt().mark((function e(t){return xt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.resolve().then((function(){var e;null===(e=t[Dt])||void 0===e||e.unmount(),delete t[Dt]})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Nt(e){Ft(e)}function Lt(){return(Lt=St(xt().mark((function e(t){return xt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===Ct){e.next=2;break}return e.abrupt("return",It(t));case 2:Nt(t);case 3:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var Ot=n(864);function zt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit".concat(e)]="webkit".concat(t),n["Moz".concat(e)]="moz".concat(t),n["ms".concat(e)]="MS".concat(t),n["O".concat(e)]="o".concat(t.toLowerCase()),n}var Vt,Bt,$t,jt=(Vt=Te(),Bt="undefined"!=typeof window?window:{},$t={animationend:zt("Animation","AnimationEnd"),transitionend:zt("Transition","TransitionEnd")},Vt&&("AnimationEvent"in Bt||delete $t.animationend.animation,"TransitionEvent"in Bt||delete $t.transitionend.transition),$t),Ht={};if(Te()){var Gt=document.createElement("div");Ht=Gt.style}var qt={};function Ut(e){if(qt[e])return qt[e];var t=jt[e];if(t)for(var n=Object.keys(t),r=n.length,i=0;i<r;i+=1){var a=n[i];if(Object.prototype.hasOwnProperty.call(t,a)&&a in Ht)return qt[e]=t[a],qt[e]}return""}var Wt=Ut("animationend"),Kt=Ut("transitionend"),Yt=!(!Wt||!Kt),Qt=Wt||"animationend",Xt=Kt||"transitionend";function Zt(e,t){return e?"object"===Y(e)?e[t.replace(/-\w/g,(function(e){return e[1].toUpperCase()}))]:"".concat(e,"-").concat(t):null}var Jt="none",en="appear",tn="enter",nn="leave",rn="none",an="prepare",sn="start",on="active",ln="end";function cn(e){var t=i.useRef(!1),n=G(i.useState(e),2),r=n[0],a=n[1];return i.useEffect((function(){return t.current=!1,function(){t.current=!0}}),[]),[r,function(e,n){n&&t.current||a(e)}]}var un=function(e){return+setTimeout(e,16)},hn=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(un=function(e){return window.requestAnimationFrame(e)},hn=function(e){return window.cancelAnimationFrame(e)});var fn=0,pn=new Map;function dn(e){pn.delete(e)}function mn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=fn+=1;function r(t){if(0===t)dn(n),e();else{var i=un((function(){r(t-1)}));pn.set(n,i)}}return r(t),n}mn.cancel=function(e){var t=pn.get(e);return dn(t),hn(t)};var gn=Te()?i.useLayoutEffect:i.useEffect,yn=[an,sn,on,ln];function vn(e){return e===on||e===ln}function bn(e,t,n,r){var a=r.motionEnter,s=void 0===a||a,o=r.motionAppear,l=void 0===o||o,c=r.motionLeave,u=void 0===c||c,h=r.motionDeadline,f=r.motionLeaveImmediately,p=r.onAppearPrepare,d=r.onEnterPrepare,m=r.onLeavePrepare,g=r.onAppearStart,y=r.onEnterStart,v=r.onLeaveStart,b=r.onAppearActive,k=r.onEnterActive,E=r.onLeaveActive,x=r.onAppearEnd,w=r.onEnterEnd,S=r.onLeaveEnd,C=r.onVisibleChanged,P=G(cn(),2),_=P[0],T=P[1],A=G(cn(Jt),2),F=A[0],M=A[1],D=G(cn(null),2),I=D[0],R=D[1],N=(0,i.useRef)(!1),O=(0,i.useRef)(null);function V(){return n()}var B=(0,i.useRef)(!1);function $(e){var t=V();if(!e||e.deadline||e.target===t){var n,r=B.current;F===en&&r?n=null==x?void 0:x(t,e):F===tn&&r?n=null==w?void 0:w(t,e):F===nn&&r&&(n=null==S?void 0:S(t,e)),F!==Jt&&r&&!1!==n&&(M(Jt,!0),R(null,!0))}}var j=function(e){var t=(0,i.useRef)(),n=(0,i.useRef)(e);n.current=e;var r=i.useCallback((function(e){n.current(e)}),[]);function a(e){e&&(e.removeEventListener(Xt,r),e.removeEventListener(Qt,r))}return i.useEffect((function(){return function(){a(t.current)}}),[]),[function(e){t.current&&t.current!==e&&a(t.current),e&&e!==t.current&&(e.addEventListener(Xt,r),e.addEventListener(Qt,r),t.current=e)},a]}($),H=G(j,1)[0],q=i.useMemo((function(){var e,t,n;switch(F){case en:return L(e={},an,p),L(e,sn,g),L(e,on,b),e;case tn:return L(t={},an,d),L(t,sn,y),L(t,on,k),t;case nn:return L(n={},an,m),L(n,sn,v),L(n,on,E),n;default:return{}}}),[F]),U=G(function(e,t){var n=G(cn(rn),2),r=n[0],a=n[1],s=function(){var e=i.useRef(null);function t(){mn.cancel(e.current)}return i.useEffect((function(){return function(){t()}}),[]),[function n(r){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;t();var a=mn((function(){i<=1?r({isCanceled:function(){return a!==e.current}}):n(r,i-1)}));e.current=a},t]}(),o=G(s,2),l=o[0],c=o[1];return gn((function(){if(r!==rn&&r!==ln){var e=yn.indexOf(r),n=yn[e+1],i=t(r);!1===i?a(n,!0):l((function(e){function t(){e.isCanceled()||a(n,!0)}!0===i?t():Promise.resolve(i).then(t)}))}}),[e,r]),i.useEffect((function(){return function(){c()}}),[]),[function(){a(an,!0)},r]}(F,(function(e){if(e===an){var t=q.prepare;return!!t&&t(V())}var n;return K in q&&R((null===(n=q[K])||void 0===n?void 0:n.call(q,V(),null))||null),K===on&&(H(V()),h>0&&(clearTimeout(O.current),O.current=setTimeout((function(){$({deadline:!0})}),h))),!0})),2),W=U[0],K=U[1],Y=vn(K);B.current=Y,gn((function(){T(t);var n,r=N.current;N.current=!0,e&&(!r&&t&&l&&(n=en),r&&t&&s&&(n=tn),(r&&!t&&u||!r&&f&&!t&&u)&&(n=nn),n&&(M(n),W()))}),[t]),(0,i.useEffect)((function(){(F===en&&!l||F===tn&&!s||F===nn&&!u)&&M(Jt)}),[l,s,u]),(0,i.useEffect)((function(){return function(){N.current=!1,clearTimeout(O.current)}}),[]);var Q=i.useRef(!1);(0,i.useEffect)((function(){_&&(Q.current=!0),void 0!==_&&F===Jt&&((Q.current||_)&&(null==C||C(_)),Q.current=!0)}),[_,F]);var X=I;return q.prepare&&K===sn&&(X=z({transition:"none"},X)),[F,K,X,null!=_?_:t]}var kn=function(e){yt(n,e);var t=Et(n);function n(){return pt(this,n),t.apply(this,arguments)}return mt(n,[{key:"render",value:function(){return this.props.children}}]),n}(i.Component),En=kn,xn=function(e){var t=e;function n(e){return!(!e.motionName||!t)}"object"===Y(e)&&(t=e.transitionSupport);var r=i.forwardRef((function(e,t){var r=e.visible,a=void 0===r||r,s=e.removeOnLeave,o=void 0===s||s,l=e.forceRender,c=e.children,u=e.motionName,h=e.leavedClassName,f=e.eventProps,p=n(e),d=(0,i.useRef)(),m=(0,i.useRef)(),g=G(bn(p,a,(function(){try{return d.current instanceof HTMLElement?d.current:(e=m.current)instanceof HTMLElement?e:Pt.findDOMNode(e)}catch(e){return null}var e}),e),4),y=g[0],v=g[1],b=g[2],k=g[3],E=i.useRef(k);k&&(E.current=!0);var x,w=i.useCallback((function(e){d.current=e,function(e,t){"function"==typeof e?e(t):"object"===Y(e)&&e&&"current"in e&&(e.current=t)}(t,e)}),[t]),S=z(z({},f),{},{visible:a});if(c)if(y!==Jt&&n(e)){var C,P;v===an?P="prepare":vn(v)?P="active":v===sn&&(P="start"),x=c(z(z({},S),{},{className:W()(Zt(u,y),(C={},L(C,Zt(u,"".concat(y,"-").concat(P)),P),L(C,u,"string"==typeof u),C)),style:b}),w)}else x=k?c(z({},S),w):!o&&E.current?c(z(z({},S),{},{className:h}),w):l?c(z(z({},S),{},{style:{display:"none"}}),w):null;else x=null;return i.isValidElement(x)&&function(e){var t,n,r=(0,Ot.isMemo)(e)?e.type.type:e.type;return!("function"==typeof r&&!(null===(t=r.prototype)||void 0===t?void 0:t.render)||"function"==typeof e&&!(null===(n=e.prototype)||void 0===n?void 0:n.render))}(x)&&(x.ref||(x=i.cloneElement(x,{ref:w}))),i.createElement(En,{ref:m},x)}));return r.displayName="CSSMotion",r}(Yt),wn="add",Sn="keep",Cn="remove",Pn="removed";function _n(e){var t;return z(z({},t=e&&"object"===Y(e)&&"key"in e?e:{key:e}),{},{key:String(t.key)})}function Tn(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return e.map(_n)}function An(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=[],r=0,i=t.length,a=Tn(e),s=Tn(t);a.forEach((function(e){for(var t=!1,a=r;a<i;a+=1){var o=s[a];if(o.key===e.key){r<a&&(n=n.concat(s.slice(r,a).map((function(e){return z(z({},e),{},{status:wn})}))),r=a),n.push(z(z({},o),{},{status:Sn})),r+=1,t=!0;break}}t||n.push(z(z({},e),{},{status:Cn}))})),r<i&&(n=n.concat(s.slice(r).map((function(e){return z(z({},e),{},{status:wn})}))));var o={};n.forEach((function(e){var t=e.key;o[t]=(o[t]||0)+1}));var l=Object.keys(o).filter((function(e){return o[e]>1}));return l.forEach((function(e){n=n.filter((function(t){var n=t.key,r=t.status;return n!==e||r!==Cn})),n.forEach((function(t){t.key===e&&(t.status=Sn)}))})),n}var Fn=["component","children","onVisibleChanged","onAllRemoved"],Mn=["status"],Dn=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"],In=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:xn,n=function(e){yt(r,e);var n=Et(r);function r(){var e;pt(this,r);for(var t=arguments.length,i=new Array(t),a=0;a<t;a++)i[a]=arguments[a];return(e=n.call.apply(n,[this].concat(i))).state={keyEntities:[]},e.removeKey=function(t){var n=e.state.keyEntities.map((function(e){return e.key!==t?e:z(z({},e),{},{status:Pn})}));return e.setState({keyEntities:n}),n.filter((function(e){return e.status!==Pn})).length},e}return mt(r,[{key:"render",value:function(){var e=this,n=this.state.keyEntities,r=this.props,a=r.component,o=r.children,l=r.onVisibleChanged,c=r.onAllRemoved,u=q(r,Fn),h=a||i.Fragment,f={};return Dn.forEach((function(e){f[e]=u[e],delete u[e]})),delete u.keys,i.createElement(h,u,n.map((function(n){var r=n.status,a=q(n,Mn),u=r===wn||r===Sn;return i.createElement(t,s({},f,{key:a.key,visible:u,eventProps:a,onVisibleChanged:function(t){null==l||l(t,{key:a.key}),t||0===e.removeKey(a.key)&&c&&c()}}),o)})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.keys,r=t.keyEntities,i=Tn(n);return{keyEntities:An(r,i).filter((function(e){var t=r.find((function(t){var n=t.key;return e.key===n}));return!t||t.status!==Pn||e.status!==Cn}))}}}]),r}(i.Component);return n.defaultProps={component:"div"},n}(Yt),Rn=function(e){yt(n,e);var t=Et(n);function n(){var e;pt(this,n);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return(e=t.call.apply(t,[this].concat(i))).closeTimer=null,e.close=function(t){t&&t.stopPropagation(),e.clearCloseTimer();var n=e.props,r=n.onClose,i=n.noticeKey;r&&r(i)},e.startCloseTimer=function(){e.props.duration&&(e.closeTimer=window.setTimeout((function(){e.close()}),1e3*e.props.duration))},e.clearCloseTimer=function(){e.closeTimer&&(clearTimeout(e.closeTimer),e.closeTimer=null)},e}return mt(n,[{key:"componentDidMount",value:function(){this.startCloseTimer()}},{key:"componentDidUpdate",value:function(e){(this.props.duration!==e.duration||this.props.updateMark!==e.updateMark||this.props.visible!==e.visible&&this.props.visible)&&this.restartCloseTimer()}},{key:"componentWillUnmount",value:function(){this.clearCloseTimer()}},{key:"restartCloseTimer",value:function(){this.clearCloseTimer(),this.startCloseTimer()}},{key:"render",value:function(){var e=this,t=this.props,n=t.prefixCls,r=t.className,a=t.closable,o=t.closeIcon,l=t.style,c=t.onClick,u=t.children,h=t.holder,f="".concat(n,"-notice"),p=Object.keys(this.props).reduce((function(t,n){return"data-"!==n.substr(0,5)&&"aria-"!==n.substr(0,5)&&"role"!==n||(t[n]=e.props[n]),t}),{}),d=i.createElement("div",s({className:W()(f,r,L({},"".concat(f,"-closable"),a)),style:l,onMouseEnter:this.clearCloseTimer,onMouseLeave:this.startCloseTimer,onClick:c},p),i.createElement("div",{className:"".concat(f,"-content")},u),a?i.createElement("a",{tabIndex:0,onClick:this.close,className:"".concat(f,"-close")},o||i.createElement("span",{className:"".concat(f,"-close-x")})):null);return h?Pt.createPortal(d,h):d}}]),n}(i.Component);function Nn(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function Ln(e){return function(e){if(Array.isArray(e))return $(e)}(e)||Nn(e)||j(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function On(e){var t=i.useRef({}),n=G(i.useState([]),2),r=n[0],a=n[1];return[function(n){var r=!0;e.add(n,(function(e,n){var o=n.key;if(e&&(!t.current[o]||r)){var l=i.createElement(Rn,s({},n,{holder:e}));t.current[o]=l,a((function(e){var t=e.findIndex((function(e){return e.key===n.key}));if(-1===t)return[].concat(Ln(e),[l]);var r=Ln(e);return r[t]=l,r}))}r=!1}))},i.createElement(i.Fragment,null,r)]}Rn.defaultProps={onClose:function(){},duration:1.5};var zn=["getContainer"],Vn=0,Bn=Date.now();function $n(){var e=Vn;return Vn+=1,"rcNotification_".concat(Bn,"_").concat(e)}var jn=function(e){yt(n,e);var t=Et(n);function n(){var e;pt(this,n);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return(e=t.call.apply(t,[this].concat(i))).state={notices:[]},e.hookRefs=new Map,e.add=function(t,n){var r=t.key||$n(),i=z(z({},t),{},{key:r}),a=e.props.maxCount;e.setState((function(e){var t=e.notices,s=t.map((function(e){return e.notice.key})).indexOf(r),o=t.concat();return-1!==s?o.splice(s,1,{notice:i,holderCallback:n}):(a&&t.length>=a&&(i.key=o[0].notice.key,i.updateMark=$n(),i.userPassKey=r,o.shift()),o.push({notice:i,holderCallback:n})),{notices:o}}))},e.remove=function(t){e.setState((function(e){return{notices:e.notices.filter((function(e){var n=e.notice,r=n.key;return(n.userPassKey||r)!==t}))}}))},e.noticePropsMap={},e}return mt(n,[{key:"getTransitionName",value:function(){var e=this.props,t=e.prefixCls,n=e.animation,r=this.props.transitionName;return!r&&n&&(r="".concat(t,"-").concat(n)),r}},{key:"render",value:function(){var e=this,t=this.state.notices,n=this.props,r=n.prefixCls,a=n.className,o=n.closeIcon,l=n.style,c=[];return t.forEach((function(n,i){var a=n.notice,s=n.holderCallback,l=i===t.length-1?a.updateMark:void 0,u=a.key,h=a.userPassKey,f=z(z(z({prefixCls:r,closeIcon:o},a),a.props),{},{key:u,noticeKey:h||u,updateMark:l,onClose:function(t){var n;e.remove(t),null===(n=a.onClose)||void 0===n||n.call(a)},onClick:a.onClick,children:a.content});c.push(u),e.noticePropsMap[u]={props:f,holderCallback:s}})),i.createElement("div",{className:W()(r,a),style:l},i.createElement(In,{keys:c,motionName:this.getTransitionName(),onVisibleChanged:function(t,n){var r=n.key;t||delete e.noticePropsMap[r]}},(function(t){var n=t.key,a=t.className,o=t.style,l=t.visible,c=e.noticePropsMap[n],u=c.props,h=c.holderCallback;return h?i.createElement("div",{key:n,className:W()(a,"".concat(r,"-hook-holder")),style:z({},o),ref:function(t){void 0!==n&&(t?(e.hookRefs.set(n,t),h(t,u)):e.hookRefs.delete(n))}}):i.createElement(Rn,s({},u,{className:W()(a,null==u?void 0:u.className),style:z(z({},o),null==u?void 0:u.style),visible:l}))})))}}]),n}(i.Component);jn.newInstance=void 0,jn.defaultProps={prefixCls:"rc-notification",animation:"fade",style:{top:65,left:"50%"}},jn.newInstance=function(e,t){var n=e||{},r=n.getContainer,a=q(n,zn),o=document.createElement("div");r?r().appendChild(o):document.body.appendChild(o);var l,c,u=!1;l=i.createElement(jn,s({},a,{ref:function(e){u||(u=!0,t({notice:function(t){e.add(t)},removeNotice:function(t){e.remove(t)},component:e,destroy:function(){!function(e){Lt.apply(this,arguments)}(o),o.parentNode&&o.parentNode.removeChild(o)},useNotification:function(){return On(e)}}))}})),c=o,Ct?function(e,t){Mt(!0);var n=t[Dt]||Ct(t);Mt(!1),n.render(e),t[Dt]=n}(l,c):function(e,t){At(e,t)}(l,c)};var Hn=jn;function Gn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[];return i.Children.forEach(e,(function(e){(null!=e||t.keepEmpty)&&(Array.isArray(e)?n=n.concat(Gn(e)):(0,Ot.isFragment)(e)&&e.props?n=n.concat(Gn(e.props.children,t)):n.push(e))})),n}var qn="RC_FORM_INTERNAL_HOOKS",Un=function(){_e(!1,"Can not find FormContext. Please make sure you wrap Field under Form.")},Wn=i.createContext({getFieldValue:Un,getFieldsValue:Un,getFieldError:Un,getFieldWarning:Un,getFieldsError:Un,isFieldsTouched:Un,isFieldTouched:Un,isFieldValidating:Un,isFieldsValidating:Un,resetFields:Un,setFields:Un,setFieldValue:Un,setFieldsValue:Un,validateFields:Un,submit:Un,getInternalHooks:function(){return Un(),{dispatch:Un,initEntityValue:Un,registerField:Un,useSubscribe:Un,setInitialValues:Un,destroyForm:Un,setCallbacks:Un,registerWatch:Un,getFields:Un,setValidateMessages:Un,setPreserve:Un,getInitialValue:Un}}});function Kn(e){return null==e?[]:Array.isArray(e)?e:[e]}function Yn(){return Yn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Yn.apply(this,arguments)}function Qn(e){return Qn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Qn(e)}function Xn(e,t){return Xn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Xn(e,t)}function Zn(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function Jn(e,t,n){return Jn=Zn()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&Xn(i,n.prototype),i},Jn.apply(null,arguments)}function er(e){var t="function"==typeof Map?new Map:void 0;return er=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return Jn(e,arguments,Qn(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),Xn(r,e)},er(e)}var tr=/%[sdj%]/g;function nr(e){if(!e||!e.length)return null;var t={};return e.forEach((function(e){var n=e.field;t[n]=t[n]||[],t[n].push(e)})),t}function rr(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var i=0,a=n.length;if("function"==typeof e)return e.apply(null,n);if("string"==typeof e){var s=e.replace(tr,(function(e){if("%%"===e)return"%";if(i>=a)return e;switch(e){case"%s":return String(n[i++]);case"%d":return Number(n[i++]);case"%j":try{return JSON.stringify(n[i++])}catch(e){return"[Circular]"}break;default:return e}}));return s}return e}function ir(e,t){return null==e||!("array"!==t||!Array.isArray(e)||e.length)||!(!function(e){return"string"===e||"url"===e||"hex"===e||"email"===e||"date"===e||"pattern"===e}(t)||"string"!=typeof e||e)}function ar(e,t,n){var r=0,i=e.length;!function a(s){if(s&&s.length)n(s);else{var o=r;r+=1,o<i?t(e[o],a):n([])}}([])}"undefined"!=typeof process&&process.env;var sr=function(e){var t,n;function r(t,n){var r;return(r=e.call(this,"Async Validation Error")||this).errors=t,r.fields=n,r}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,Xn(t,n),r}(er(Error));function or(e,t){return function(n){var r,i;return r=e.fullFields?function(e,t){for(var n=e,r=0;r<t.length;r++){if(null==n)return n;n=n[t[r]]}return n}(t,e.fullFields):t[n.field||e.fullField],(i=n)&&void 0!==i.message?(n.field=n.field||e.fullField,n.fieldValue=r,n):{message:"function"==typeof n?n():n,fieldValue:r,field:n.field||e.fullField}}}function lr(e,t){if(t)for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];"object"==typeof r&&"object"==typeof e[n]?e[n]=Yn({},e[n],r):e[n]=r}return e}var cr,ur=function(e,t,n,r,i,a){!e.required||n.hasOwnProperty(e.field)&&!ir(t,a||e.type)||r.push(rr(i.messages.required,e.fullField))},hr=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,fr=/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i,pr={integer:function(e){return pr.number(e)&&parseInt(e,10)===e},float:function(e){return pr.number(e)&&!pr.integer(e)},array:function(e){return Array.isArray(e)},regexp:function(e){if(e instanceof RegExp)return!0;try{return!!new RegExp(e)}catch(e){return!1}},date:function(e){return"function"==typeof e.getTime&&"function"==typeof e.getMonth&&"function"==typeof e.getYear&&!isNaN(e.getTime())},number:function(e){return!isNaN(e)&&"number"==typeof e},object:function(e){return"object"==typeof e&&!pr.array(e)},method:function(e){return"function"==typeof e},email:function(e){return"string"==typeof e&&e.length<=320&&!!e.match(hr)},url:function(e){return"string"==typeof e&&e.length<=2048&&!!e.match(function(){if(cr)return cr;var e="[a-fA-F\\d:]",t=function(t){return t&&t.includeBoundaries?"(?:(?<=\\s|^)(?="+e+")|(?<="+e+")(?=\\s|$))":""},n="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",r="[a-fA-F\\d]{1,4}",i=("\n(?:\n(?:"+r+":){7}(?:"+r+"|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:"+r+":){6}(?:"+n+"|:"+r+"|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:"+r+":){5}(?::"+n+"|(?::"+r+"){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:"+r+":){4}(?:(?::"+r+"){0,1}:"+n+"|(?::"+r+"){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:"+r+":){3}(?:(?::"+r+"){0,2}:"+n+"|(?::"+r+"){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:"+r+":){2}(?:(?::"+r+"){0,3}:"+n+"|(?::"+r+"){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:"+r+":){1}(?:(?::"+r+"){0,4}:"+n+"|(?::"+r+"){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::"+r+"){0,5}:"+n+"|(?::"+r+"){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),a=new RegExp("(?:^"+n+"$)|(?:^"+i+"$)"),s=new RegExp("^"+n+"$"),o=new RegExp("^"+i+"$"),l=function(e){return e&&e.exact?a:new RegExp("(?:"+t(e)+n+t(e)+")|(?:"+t(e)+i+t(e)+")","g")};l.v4=function(e){return e&&e.exact?s:new RegExp(""+t(e)+n+t(e),"g")},l.v6=function(e){return e&&e.exact?o:new RegExp(""+t(e)+i+t(e),"g")};var c=l.v4().source,u=l.v6().source;return cr=new RegExp("(?:^(?:(?:(?:[a-z]+:)?//)|www\\.)(?:\\S+(?::\\S*)?@)?(?:localhost|"+c+"|"+u+'|(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#][^\\s"]*)?$)',"i")}())},hex:function(e){return"string"==typeof e&&!!e.match(fr)}},dr=ur,mr=function(e,t,n,r,i){(/^\s+$/.test(t)||""===t)&&r.push(rr(i.messages.whitespace,e.fullField))},gr=function(e,t,n,r,i){if(e.required&&void 0===t)ur(e,t,n,r,i);else{var a=e.type;["integer","float","array","regexp","object","method","email","number","date","url","hex"].indexOf(a)>-1?pr[a](t)||r.push(rr(i.messages.types[a],e.fullField,e.type)):a&&typeof t!==e.type&&r.push(rr(i.messages.types[a],e.fullField,e.type))}},yr=function(e,t,n,r,i){var a="number"==typeof e.len,s="number"==typeof e.min,o="number"==typeof e.max,l=t,c=null,u="number"==typeof t,h="string"==typeof t,f=Array.isArray(t);if(u?c="number":h?c="string":f&&(c="array"),!c)return!1;f&&(l=t.length),h&&(l=t.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"_").length),a?l!==e.len&&r.push(rr(i.messages[c].len,e.fullField,e.len)):s&&!o&&l<e.min?r.push(rr(i.messages[c].min,e.fullField,e.min)):o&&!s&&l>e.max?r.push(rr(i.messages[c].max,e.fullField,e.max)):s&&o&&(l<e.min||l>e.max)&&r.push(rr(i.messages[c].range,e.fullField,e.min,e.max))},vr=function(e,t,n,r,i){e.enum=Array.isArray(e.enum)?e.enum:[],-1===e.enum.indexOf(t)&&r.push(rr(i.messages.enum,e.fullField,e.enum.join(", ")))},br=function(e,t,n,r,i){e.pattern&&(e.pattern instanceof RegExp?(e.pattern.lastIndex=0,e.pattern.test(t)||r.push(rr(i.messages.pattern.mismatch,e.fullField,t,e.pattern))):"string"==typeof e.pattern&&(new RegExp(e.pattern).test(t)||r.push(rr(i.messages.pattern.mismatch,e.fullField,t,e.pattern))))},kr=function(e,t,n,r,i){var a=e.type,s=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t,a)&&!e.required)return n();dr(e,t,r,s,i,a),ir(t,a)||gr(e,t,r,s,i)}n(s)},Er={string:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t,"string")&&!e.required)return n();dr(e,t,r,a,i,"string"),ir(t,"string")||(gr(e,t,r,a,i),yr(e,t,r,a,i),br(e,t,r,a,i),!0===e.whitespace&&mr(e,t,r,a,i))}n(a)},method:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t)&&!e.required)return n();dr(e,t,r,a,i),void 0!==t&&gr(e,t,r,a,i)}n(a)},number:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(""===t&&(t=void 0),ir(t)&&!e.required)return n();dr(e,t,r,a,i),void 0!==t&&(gr(e,t,r,a,i),yr(e,t,r,a,i))}n(a)},boolean:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t)&&!e.required)return n();dr(e,t,r,a,i),void 0!==t&&gr(e,t,r,a,i)}n(a)},regexp:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t)&&!e.required)return n();dr(e,t,r,a,i),ir(t)||gr(e,t,r,a,i)}n(a)},integer:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t)&&!e.required)return n();dr(e,t,r,a,i),void 0!==t&&(gr(e,t,r,a,i),yr(e,t,r,a,i))}n(a)},float:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t)&&!e.required)return n();dr(e,t,r,a,i),void 0!==t&&(gr(e,t,r,a,i),yr(e,t,r,a,i))}n(a)},array:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(null==t&&!e.required)return n();dr(e,t,r,a,i,"array"),null!=t&&(gr(e,t,r,a,i),yr(e,t,r,a,i))}n(a)},object:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t)&&!e.required)return n();dr(e,t,r,a,i),void 0!==t&&gr(e,t,r,a,i)}n(a)},enum:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t)&&!e.required)return n();dr(e,t,r,a,i),void 0!==t&&vr(e,t,r,a,i)}n(a)},pattern:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t,"string")&&!e.required)return n();dr(e,t,r,a,i),ir(t,"string")||br(e,t,r,a,i)}n(a)},date:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t,"date")&&!e.required)return n();var s;dr(e,t,r,a,i),ir(t,"date")||(s=t instanceof Date?t:new Date(t),gr(e,s,r,a,i),s&&yr(e,s.getTime(),r,a,i))}n(a)},url:kr,hex:kr,email:kr,required:function(e,t,n,r,i){var a=[],s=Array.isArray(t)?"array":typeof t;dr(e,t,r,a,i,s),n(a)},any:function(e,t,n,r,i){var a=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(ir(t)&&!e.required)return n();dr(e,t,r,a,i)}n(a)}};function xr(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var e=JSON.parse(JSON.stringify(this));return e.clone=this.clone,e}}}var wr=xr(),Sr=function(){function e(e){this.rules=null,this._messages=wr,this.define(e)}var t=e.prototype;return t.define=function(e){var t=this;if(!e)throw new Error("Cannot configure a schema with no rules");if("object"!=typeof e||Array.isArray(e))throw new Error("Rules must be an object");this.rules={},Object.keys(e).forEach((function(n){var r=e[n];t.rules[n]=Array.isArray(r)?r:[r]}))},t.messages=function(e){return e&&(this._messages=lr(xr(),e)),this._messages},t.validate=function(t,n,r){var i=this;void 0===n&&(n={}),void 0===r&&(r=function(){});var a=t,s=n,o=r;if("function"==typeof s&&(o=s,s={}),!this.rules||0===Object.keys(this.rules).length)return o&&o(null,a),Promise.resolve(a);if(s.messages){var l=this.messages();l===wr&&(l=xr()),lr(l,s.messages),s.messages=l}else s.messages=this.messages();var c={};(s.keys||Object.keys(this.rules)).forEach((function(e){var n=i.rules[e],r=a[e];n.forEach((function(n){var s=n;"function"==typeof s.transform&&(a===t&&(a=Yn({},a)),r=a[e]=s.transform(r)),(s="function"==typeof s?{validator:s}:Yn({},s)).validator=i.getValidationMethod(s),s.validator&&(s.field=e,s.fullField=s.fullField||e,s.type=i.getType(s),c[e]=c[e]||[],c[e].push({rule:s,value:r,source:a,field:e}))}))}));var u={};return function(e,t,n,r,i){if(t.first){var a=new Promise((function(t,a){var s=function(e){var t=[];return Object.keys(e).forEach((function(n){t.push.apply(t,e[n]||[])})),t}(e);ar(s,n,(function(e){return r(e),e.length?a(new sr(e,nr(e))):t(i)}))}));return a.catch((function(e){return e})),a}var s=!0===t.firstFields?Object.keys(e):t.firstFields||[],o=Object.keys(e),l=o.length,c=0,u=[],h=new Promise((function(t,a){var h=function(e){if(u.push.apply(u,e),++c===l)return r(u),u.length?a(new sr(u,nr(u))):t(i)};o.length||(r(u),t(i)),o.forEach((function(t){var r=e[t];-1!==s.indexOf(t)?ar(r,n,h):function(e,t,n){var r=[],i=0,a=e.length;function s(e){r.push.apply(r,e||[]),++i===a&&n(r)}e.forEach((function(e){t(e,s)}))}(r,n,h)}))}));return h.catch((function(e){return e})),h}(c,s,(function(t,n){var r,i=t.rule,o=!("object"!==i.type&&"array"!==i.type||"object"!=typeof i.fields&&"object"!=typeof i.defaultField);function l(e,t){return Yn({},t,{fullField:i.fullField+"."+e,fullFields:i.fullFields?[].concat(i.fullFields,[e]):[e]})}function c(r){void 0===r&&(r=[]);var c=Array.isArray(r)?r:[r];!s.suppressWarning&&c.length&&e.warning("async-validator:",c),c.length&&void 0!==i.message&&(c=[].concat(i.message));var h=c.map(or(i,a));if(s.first&&h.length)return u[i.field]=1,n(h);if(o){if(i.required&&!t.value)return void 0!==i.message?h=[].concat(i.message).map(or(i,a)):s.error&&(h=[s.error(i,rr(s.messages.required,i.field))]),n(h);var f={};i.defaultField&&Object.keys(t.value).map((function(e){f[e]=i.defaultField})),f=Yn({},f,t.rule.fields);var p={};Object.keys(f).forEach((function(e){var t=f[e],n=Array.isArray(t)?t:[t];p[e]=n.map(l.bind(null,e))}));var d=new e(p);d.messages(s.messages),t.rule.options&&(t.rule.options.messages=s.messages,t.rule.options.error=s.error),d.validate(t.value,t.rule.options||s,(function(e){var t=[];h&&h.length&&t.push.apply(t,h),e&&e.length&&t.push.apply(t,e),n(t.length?t:null)}))}else n(h)}if(o=o&&(i.required||!i.required&&t.value),i.field=t.field,i.asyncValidator)r=i.asyncValidator(i,t.value,c,t.source,s);else if(i.validator){try{r=i.validator(i,t.value,c,t.source,s)}catch(e){null==console.error||console.error(e),s.suppressValidatorError||setTimeout((function(){throw e}),0),c(e.message)}!0===r?c():!1===r?c("function"==typeof i.message?i.message(i.fullField||i.field):i.message||(i.fullField||i.field)+" fails"):r instanceof Array?c(r):r instanceof Error&&c(r.message)}r&&r.then&&r.then((function(){return c()}),(function(e){return c(e)}))}),(function(e){!function(e){for(var t,n,r=[],i={},s=0;s<e.length;s++)t=e[s],n=void 0,Array.isArray(t)?r=(n=r).concat.apply(n,t):r.push(t);r.length?(i=nr(r),o(r,i)):o(null,a)}(e)}),a)},t.getType=function(e){if(void 0===e.type&&e.pattern instanceof RegExp&&(e.type="pattern"),"function"!=typeof e.validator&&e.type&&!Er.hasOwnProperty(e.type))throw new Error(rr("Unknown rule type %s",e.type));return e.type||"string"},t.getValidationMethod=function(e){if("function"==typeof e.validator)return e.validator;var t=Object.keys(e),n=t.indexOf("message");return-1!==n&&t.splice(n,1),1===t.length&&"required"===t[0]?Er.required:Er[this.getType(e)]||void 0},e}();Sr.register=function(e,t){if("function"!=typeof t)throw new Error("Cannot register a validator by type, validator is not a function");Er[e]=t},Sr.warning=function(){},Sr.messages=wr,Sr.validators=Er;var Cr="'${name}' is not a valid ${type}",Pr={default:"Validation error on field '${name}'",required:"'${name}' is required",enum:"'${name}' must be one of [${enum}]",whitespace:"'${name}' cannot be empty",date:{format:"'${name}' is invalid for format date",parse:"'${name}' could not be parsed as date",invalid:"'${name}' is invalid date"},types:{string:Cr,method:Cr,array:Cr,object:Cr,number:Cr,date:Cr,boolean:Cr,integer:Cr,float:Cr,regexp:Cr,email:Cr,url:Cr,hex:Cr},string:{len:"'${name}' must be exactly ${len} characters",min:"'${name}' must be at least ${min} characters",max:"'${name}' cannot be longer than ${max} characters",range:"'${name}' must be between ${min} and ${max} characters"},number:{len:"'${name}' must equal ${len}",min:"'${name}' cannot be less than ${min}",max:"'${name}' cannot be greater than ${max}",range:"'${name}' must be between ${min} and ${max}"},array:{len:"'${name}' must be exactly ${len} in length",min:"'${name}' cannot be less than ${min} in length",max:"'${name}' cannot be greater than ${max} in length",range:"'${name}' must be between ${min} and ${max} in length"},pattern:{mismatch:"'${name}' does not match pattern ${pattern}"}};function _r(e,t){for(var n=e,r=0;r<t.length;r+=1){if(null==n)return;n=n[t[r]]}return n}function Tr(e,t,n,r){if(!t.length)return n;var i,a,s=B(i=t)||Nn(i)||j(i)||H(),o=s[0],l=s.slice(1);return a=e||"number"!=typeof o?Array.isArray(e)?Ln(e):z({},e):[],r&&void 0===n&&1===l.length?delete a[o][l[0]]:a[o]=Tr(a[o],l,n,r),a}function Ar(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return t.length&&r&&void 0===n&&!_r(e,t.slice(0,-1))?e:Tr(e,t,n,r)}var Fr=function e(t){return Array.isArray(t)?function(t){return t.map((function(t){return e(t)}))}(t):"object"===Y(t)&&null!==t?function(t){if(Object.getPrototypeOf(t)===Object.prototype){var n={};for(var r in t)n[r]=e(t[r]);return n}return t}(t):t};function Mr(e){return Kn(e)}function Dr(e,t){return _r(e,t)}function Ir(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=Ar(e,t,n,r);return i}function Rr(e,t){var n={};return t.forEach((function(t){var r=Dr(e,t);n=Ir(n,t,r)})),n}function Nr(e,t){return e&&e.some((function(e){return Vr(e,t)}))}function Lr(e){return"object"===Y(e)&&null!==e&&Object.getPrototypeOf(e)===Object.prototype}function Or(e,t){var n=Array.isArray(e)?Ln(e):z({},e);return t?(Object.keys(t).forEach((function(e){var r=n[e],i=t[e],a=Lr(r)&&Lr(i);n[e]=a?Or(r,i||{}):Fr(i)})),n):n}function zr(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.reduce((function(e,t){return Or(e,t)}),e)}function Vr(e,t){return!(!e||!t||e.length!==t.length)&&e.every((function(e,n){return t[n]===e}))}function Br(e){var t=arguments.length<=1?void 0:arguments[1];return t&&t.target&&"object"===Y(t.target)&&e in t.target?t.target[e]:t}function $r(e,t,n){var r=e.length;if(t<0||t>=r||n<0||n>=r)return e;var i=e[t],a=t-n;return a>0?[].concat(Ln(e.slice(0,n)),[i],Ln(e.slice(n,t)),Ln(e.slice(t+1,r))):a<0?[].concat(Ln(e.slice(0,t)),Ln(e.slice(t+1,n+1)),[i],Ln(e.slice(n+1,r))):e}var jr=Sr;function Hr(e,t){return e.replace(/\$\{\w+\}/g,(function(e){var n=e.slice(2,-1);return t[n]}))}var Gr="CODE_LOGIC_ERROR";function qr(e,t,n,r,i){return Ur.apply(this,arguments)}function Ur(){return Ur=St(xt().mark((function e(t,n,r,a,s){var o,l,c,u,h,f,p,d,m;return xt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return delete(o=z({},r)).ruleIndex,o.validator&&(l=o.validator,o.validator=function(){try{return l.apply(void 0,arguments)}catch(e){return console.error(e),Promise.reject(Gr)}}),c=null,o&&"array"===o.type&&o.defaultField&&(c=o.defaultField,delete o.defaultField),u=new jr(L({},t,[o])),h=zr({},Pr,a.validateMessages),u.messages(h),f=[],e.prev=9,e.next=12,Promise.resolve(u.validate(L({},t,n),z({},a)));case 12:e.next=17;break;case 14:e.prev=14,e.t0=e.catch(9),e.t0.errors&&(f=e.t0.errors.map((function(e,t){var n=e.message,r=n===Gr?h.default:n;return i.isValidElement(r)?i.cloneElement(r,{key:"error_".concat(t)}):r})));case 17:if(f.length||!c){e.next=22;break}return e.next=20,Promise.all(n.map((function(e,n){return qr("".concat(t,".").concat(n),e,c,a,s)})));case 20:return p=e.sent,e.abrupt("return",p.reduce((function(e,t){return[].concat(Ln(e),Ln(t))}),[]));case 22:return d=z(z({},r),{},{name:t,enum:(r.enum||[]).join(", ")},s),m=f.map((function(e){return"string"==typeof e?Hr(e,d):e})),e.abrupt("return",m);case 25:case"end":return e.stop()}}),e,null,[[9,14]])}))),Ur.apply(this,arguments)}function Wr(){return(Wr=St(xt().mark((function e(t){return xt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.all(t).then((function(e){var t;return(t=[]).concat.apply(t,Ln(e))})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Kr(){return(Kr=St(xt().mark((function e(t){var n;return xt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=0,e.abrupt("return",new Promise((function(e){t.forEach((function(r){r.then((function(r){r.errors.length&&e([r]),(n+=1)===t.length&&e([])}))}))})));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var Yr=["name"],Qr=[];function Xr(e,t,n,r,i,a){return"function"==typeof e?e(t,n,"source"in a?{source:a.source}:{}):r!==i}var Zr=function(e){yt(n,e);var t=Et(n);function n(e){var r;return pt(this,n),(r=t.call(this,e)).state={resetCount:0},r.cancelRegisterFunc=null,r.mounted=!1,r.touched=!1,r.dirty=!1,r.validatePromise=null,r.prevValidating=void 0,r.errors=Qr,r.warnings=Qr,r.cancelRegister=function(){var e=r.props,t=e.preserve,n=e.isListField,i=e.name;r.cancelRegisterFunc&&r.cancelRegisterFunc(n,t,Mr(i)),r.cancelRegisterFunc=null},r.getNamePath=function(){var e=r.props,t=e.name,n=e.fieldContext.prefixName;return void 0!==t?[].concat(Ln(void 0===n?[]:n),Ln(t)):[]},r.getRules=function(){var e=r.props,t=e.rules,n=void 0===t?[]:t,i=e.fieldContext;return n.map((function(e){return"function"==typeof e?e(i):e}))},r.refresh=function(){r.mounted&&r.setState((function(e){return{resetCount:e.resetCount+1}}))},r.triggerMetaEvent=function(e){var t=r.props.onMetaChange;null==t||t(z(z({},r.getMeta()),{},{destroy:e}))},r.onStoreChange=function(e,t,n){var i=r.props,a=i.shouldUpdate,s=i.dependencies,o=void 0===s?[]:s,l=i.onReset,c=n.store,u=r.getNamePath(),h=r.getValue(e),f=r.getValue(c),p=t&&Nr(t,u);switch("valueUpdate"===n.type&&"external"===n.source&&h!==f&&(r.touched=!0,r.dirty=!0,r.validatePromise=null,r.errors=Qr,r.warnings=Qr,r.triggerMetaEvent()),n.type){case"reset":if(!t||p)return r.touched=!1,r.dirty=!1,r.validatePromise=null,r.errors=Qr,r.warnings=Qr,r.triggerMetaEvent(),null==l||l(),void r.refresh();break;case"remove":if(a)return void r.reRender();break;case"setField":if(p){var d=n.data;return"touched"in d&&(r.touched=d.touched),"validating"in d&&!("originRCField"in d)&&(r.validatePromise=d.validating?Promise.resolve([]):null),"errors"in d&&(r.errors=d.errors||Qr),"warnings"in d&&(r.warnings=d.warnings||Qr),r.dirty=!0,r.triggerMetaEvent(),void r.reRender()}if(a&&!u.length&&Xr(a,e,c,h,f,n))return void r.reRender();break;case"dependenciesUpdate":if(o.map(Mr).some((function(e){return Nr(n.relatedFields,e)})))return void r.reRender();break;default:if(p||(!o.length||u.length||a)&&Xr(a,e,c,h,f,n))return void r.reRender()}!0===a&&r.reRender()},r.validateRules=function(e){var t=r.getNamePath(),n=r.getValue(),i=Promise.resolve().then((function(){if(!r.mounted)return[];var a=r.props,s=a.validateFirst,o=void 0!==s&&s,l=a.messageVariables,c=(e||{}).triggerName,u=r.getRules();c&&(u=u.filter((function(e){var t=e.validateTrigger;return!t||Kn(t).includes(c)})));var h=function(e,t,n,r,i,a){var s,o=e.join("."),l=n.map((function(e,t){var n=e.validator,r=z(z({},e),{},{ruleIndex:t});return n&&(r.validator=function(e,t,r){var i=!1,a=n(e,t,(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];Promise.resolve().then((function(){_e(!i,"Your validator function has already return a promise. `callback` will be ignored."),i||r.apply(void 0,t)}))}));i=a&&"function"==typeof a.then&&"function"==typeof a.catch,_e(i,"`callback` is deprecated. Please return a promise instead."),i&&a.then((function(){r()})).catch((function(e){r(e||" ")}))}),r})).sort((function(e,t){var n=e.warningOnly,r=e.ruleIndex,i=t.warningOnly,a=t.ruleIndex;return!!n==!!i?r-a:n?1:-1}));if(!0===i)s=new Promise(function(){var e=St(xt().mark((function e(n,i){var s,c,u;return xt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:s=0;case 1:if(!(s<l.length)){e.next=12;break}return c=l[s],e.next=5,qr(o,t,c,r,a);case 5:if(!(u=e.sent).length){e.next=9;break}return i([{errors:u,rule:c}]),e.abrupt("return");case 9:s+=1,e.next=1;break;case 12:n([]);case 13:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());else{var c=l.map((function(e){return qr(o,t,e,r,a).then((function(t){return{errors:t,rule:e}}))}));s=(i?function(e){return Kr.apply(this,arguments)}(c):function(e){return Wr.apply(this,arguments)}(c)).then((function(e){return Promise.reject(e)}))}return s.catch((function(e){return e})),s}(t,n,u,e,o,l);return h.catch((function(e){return e})).then((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Qr;if(r.validatePromise===i){var t;r.validatePromise=null;var n=[],a=[];null===(t=e.forEach)||void 0===t||t.call(e,(function(e){var t=e.rule.warningOnly,r=e.errors,i=void 0===r?Qr:r;t?a.push.apply(a,Ln(i)):n.push.apply(n,Ln(i))})),r.errors=n,r.warnings=a,r.triggerMetaEvent(),r.reRender()}})),h}));return r.validatePromise=i,r.dirty=!0,r.errors=Qr,r.warnings=Qr,r.triggerMetaEvent(),r.reRender(),i},r.isFieldValidating=function(){return!!r.validatePromise},r.isFieldTouched=function(){return r.touched},r.isFieldDirty=function(){return!(!r.dirty&&void 0===r.props.initialValue)||void 0!==(0,r.props.fieldContext.getInternalHooks(qn).getInitialValue)(r.getNamePath())},r.getErrors=function(){return r.errors},r.getWarnings=function(){return r.warnings},r.isListField=function(){return r.props.isListField},r.isList=function(){return r.props.isList},r.isPreserve=function(){return r.props.preserve},r.getMeta=function(){return r.prevValidating=r.isFieldValidating(),{touched:r.isFieldTouched(),validating:r.prevValidating,errors:r.errors,warnings:r.warnings,name:r.getNamePath()}},r.getOnlyChild=function(e){if("function"==typeof e){var t=r.getMeta();return z(z({},r.getOnlyChild(e(r.getControlled(),t,r.props.fieldContext))),{},{isFunction:!0})}var n=Gn(e);return 1===n.length&&i.isValidElement(n[0])?{child:n[0],isFunction:!1}:{child:n,isFunction:!1}},r.getValue=function(e){var t=r.props.fieldContext.getFieldsValue,n=r.getNamePath();return Dr(e||t(!0),n)},r.getControlled=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=r.props,n=t.trigger,i=t.validateTrigger,a=t.getValueFromEvent,s=t.normalize,o=t.valuePropName,l=t.getValueProps,c=t.fieldContext,u=void 0!==i?i:c.validateTrigger,h=r.getNamePath(),f=c.getInternalHooks,p=c.getFieldsValue,d=f(qn),m=d.dispatch,g=r.getValue(),y=l||function(e){return L({},o,e)},v=e[n],b=z(z({},e),y(g));b[n]=function(){var e;r.touched=!0,r.dirty=!0,r.triggerMetaEvent();for(var t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];e=a?a.apply(void 0,n):Br.apply(void 0,[o].concat(n)),s&&(e=s(e,g,p(!0))),m({type:"updateValue",namePath:h,value:e}),v&&v.apply(void 0,n)};var k=Kn(u||[]);return k.forEach((function(e){var t=b[e];b[e]=function(){t&&t.apply(void 0,arguments);var n=r.props.rules;n&&n.length&&m({type:"validateField",namePath:h,triggerName:e})}})),b},e.fieldContext&&(0,(0,e.fieldContext.getInternalHooks)(qn).initEntityValue)(bt(r)),r}return mt(n,[{key:"componentDidMount",value:function(){var e=this.props,t=e.shouldUpdate,n=e.fieldContext;if(this.mounted=!0,n){var r=(0,n.getInternalHooks)(qn).registerField;this.cancelRegisterFunc=r(this)}!0===t&&this.reRender()}},{key:"componentWillUnmount",value:function(){this.cancelRegister(),this.triggerMetaEvent(!0),this.mounted=!1}},{key:"reRender",value:function(){this.mounted&&this.forceUpdate()}},{key:"render",value:function(){var e,t=this.state.resetCount,n=this.props.children,r=this.getOnlyChild(n),a=r.child;return r.isFunction?e=a:i.isValidElement(a)?e=i.cloneElement(a,this.getControlled(a.props)):(_e(!a,"`children` of Field is not validate ReactElement."),e=a),i.createElement(i.Fragment,{key:t},e)}}]),n}(i.Component);Zr.contextType=Wn,Zr.defaultProps={trigger:"onChange",valuePropName:"value"};var Jr=function(e){var t=e.name,n=q(e,Yr),r=i.useContext(Wn),a=void 0!==t?Mr(t):void 0,o="keep";return n.isListField||(o="_".concat((a||[]).join("_"))),i.createElement(Zr,s({key:o,name:a},n,{fieldContext:r}))},ei=i.createContext(null),ti="__@field_split__";function ni(e){return e.map((function(e){return"".concat(Y(e),":").concat(e)})).join(ti)}var ri=function(){function e(){pt(this,e),this.kvs=new Map}return mt(e,[{key:"set",value:function(e,t){this.kvs.set(ni(e),t)}},{key:"get",value:function(e){return this.kvs.get(ni(e))}},{key:"update",value:function(e,t){var n=t(this.get(e));n?this.set(e,n):this.delete(e)}},{key:"delete",value:function(e){this.kvs.delete(ni(e))}},{key:"map",value:function(e){return Ln(this.kvs.entries()).map((function(t){var n=G(t,2),r=n[0],i=n[1],a=r.split(ti);return e({key:a.map((function(e){var t=G(e.match(/^([^:]*):(.*)$/),3),n=t[1],r=t[2];return"number"===n?Number(r):r})),value:i})}))}},{key:"toJSON",value:function(){var e={};return this.map((function(t){var n=t.key,r=t.value;return e[n.join(".")]=r,null})),e}}]),e}(),ii=ri,ai=["name","errors"],si=mt((function e(t){var n=this;pt(this,e),this.formHooked=!1,this.forceRootUpdate=void 0,this.subscribable=!0,this.store={},this.fieldEntities=[],this.initialValues={},this.callbacks={},this.validateMessages=null,this.preserve=null,this.lastValidatePromise=null,this.getForm=function(){return{getFieldValue:n.getFieldValue,getFieldsValue:n.getFieldsValue,getFieldError:n.getFieldError,getFieldWarning:n.getFieldWarning,getFieldsError:n.getFieldsError,isFieldsTouched:n.isFieldsTouched,isFieldTouched:n.isFieldTouched,isFieldValidating:n.isFieldValidating,isFieldsValidating:n.isFieldsValidating,resetFields:n.resetFields,setFields:n.setFields,setFieldValue:n.setFieldValue,setFieldsValue:n.setFieldsValue,validateFields:n.validateFields,submit:n.submit,_init:!0,getInternalHooks:n.getInternalHooks}},this.getInternalHooks=function(e){return e===qn?(n.formHooked=!0,{dispatch:n.dispatch,initEntityValue:n.initEntityValue,registerField:n.registerField,useSubscribe:n.useSubscribe,setInitialValues:n.setInitialValues,destroyForm:n.destroyForm,setCallbacks:n.setCallbacks,setValidateMessages:n.setValidateMessages,getFields:n.getFields,setPreserve:n.setPreserve,getInitialValue:n.getInitialValue,registerWatch:n.registerWatch}):(_e(!1,"`getInternalHooks` is internal usage. Should not call directly."),null)},this.useSubscribe=function(e){n.subscribable=e},this.prevWithoutPreserves=null,this.setInitialValues=function(e,t){if(n.initialValues=e||{},t){var r,i=zr({},e,n.store);null===(r=n.prevWithoutPreserves)||void 0===r||r.map((function(t){var n=t.key;i=Ir(i,n,Dr(e,n))})),n.prevWithoutPreserves=null,n.updateStore(i)}},this.destroyForm=function(){var e=new ii;n.getFieldEntities(!0).forEach((function(t){n.isMergedPreserve(t.isPreserve())||e.set(t.getNamePath(),!0)})),n.prevWithoutPreserves=e},this.getInitialValue=function(e){var t=Dr(n.initialValues,e);return e.length?Fr(t):t},this.setCallbacks=function(e){n.callbacks=e},this.setValidateMessages=function(e){n.validateMessages=e},this.setPreserve=function(e){n.preserve=e},this.watchList=[],this.registerWatch=function(e){return n.watchList.push(e),function(){n.watchList=n.watchList.filter((function(t){return t!==e}))}},this.notifyWatch=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(n.watchList.length){var t=n.getFieldsValue();n.watchList.forEach((function(n){n(t,e)}))}},this.timeoutId=null,this.warningUnhooked=function(){},this.updateStore=function(e){n.store=e},this.getFieldEntities=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e?n.fieldEntities.filter((function(e){return e.getNamePath().length})):n.fieldEntities},this.getFieldsMap=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=new ii;return n.getFieldEntities(e).forEach((function(e){var n=e.getNamePath();t.set(n,e)})),t},this.getFieldEntitiesForNamePathList=function(e){if(!e)return n.getFieldEntities(!0);var t=n.getFieldsMap(!0);return e.map((function(e){var n=Mr(e);return t.get(n)||{INVALIDATE_NAME_PATH:Mr(e)}}))},this.getFieldsValue=function(e,t){if(n.warningUnhooked(),!0===e&&!t)return n.store;var r=n.getFieldEntitiesForNamePathList(Array.isArray(e)?e:null),i=[];return r.forEach((function(n){var r,a="INVALIDATE_NAME_PATH"in n?n.INVALIDATE_NAME_PATH:n.getNamePath();if(e||!(null===(r=n.isListField)||void 0===r?void 0:r.call(n)))if(t){var s="getMeta"in n?n.getMeta():null;t(s)&&i.push(a)}else i.push(a)})),Rr(n.store,i.map(Mr))},this.getFieldValue=function(e){n.warningUnhooked();var t=Mr(e);return Dr(n.store,t)},this.getFieldsError=function(e){return n.warningUnhooked(),n.getFieldEntitiesForNamePathList(e).map((function(t,n){return t&&!("INVALIDATE_NAME_PATH"in t)?{name:t.getNamePath(),errors:t.getErrors(),warnings:t.getWarnings()}:{name:Mr(e[n]),errors:[],warnings:[]}}))},this.getFieldError=function(e){n.warningUnhooked();var t=Mr(e);return n.getFieldsError([t])[0].errors},this.getFieldWarning=function(e){n.warningUnhooked();var t=Mr(e);return n.getFieldsError([t])[0].warnings},this.isFieldsTouched=function(){n.warningUnhooked();for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var i,a=t[0],s=t[1],o=!1;0===t.length?i=null:1===t.length?Array.isArray(a)?(i=a.map(Mr),o=!1):(i=null,o=a):(i=a.map(Mr),o=s);var l=n.getFieldEntities(!0),c=function(e){return e.isFieldTouched()};if(!i)return o?l.every(c):l.some(c);var u=new ii;i.forEach((function(e){u.set(e,[])})),l.forEach((function(e){var t=e.getNamePath();i.forEach((function(n){n.every((function(e,n){return t[n]===e}))&&u.update(n,(function(t){return[].concat(Ln(t),[e])}))}))}));var h=function(e){return e.some(c)},f=u.map((function(e){return e.value}));return o?f.every(h):f.some(h)},this.isFieldTouched=function(e){return n.warningUnhooked(),n.isFieldsTouched([e])},this.isFieldsValidating=function(e){n.warningUnhooked();var t=n.getFieldEntities();if(!e)return t.some((function(e){return e.isFieldValidating()}));var r=e.map(Mr);return t.some((function(e){var t=e.getNamePath();return Nr(r,t)&&e.isFieldValidating()}))},this.isFieldValidating=function(e){return n.warningUnhooked(),n.isFieldsValidating([e])},this.resetWithFieldInitialValue=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new ii,r=n.getFieldEntities(!0);r.forEach((function(e){var n=e.props.initialValue,r=e.getNamePath();if(void 0!==n){var i=t.get(r)||new Set;i.add({entity:e,value:n}),t.set(r,i)}}));var i,a=function(r){r.forEach((function(r){if(void 0!==r.props.initialValue){var i=r.getNamePath();if(void 0!==n.getInitialValue(i))_e(!1,"Form already set 'initialValues' with path '".concat(i.join("."),"'. Field can not overwrite it."));else{var a=t.get(i);if(a&&a.size>1)_e(!1,"Multiple Field with path '".concat(i.join("."),"' set 'initialValue'. Can not decide which one to pick."));else if(a){var s=n.getFieldValue(i);e.skipExist&&void 0!==s||n.updateStore(Ir(n.store,i,Ln(a)[0].value))}}}}))};e.entities?i=e.entities:e.namePathList?(i=[],e.namePathList.forEach((function(e){var n,r=t.get(e);r&&(n=i).push.apply(n,Ln(Ln(r).map((function(e){return e.entity}))))}))):i=r,a(i)},this.resetFields=function(e){n.warningUnhooked();var t=n.store;if(!e)return n.updateStore(zr({},n.initialValues)),n.resetWithFieldInitialValue(),n.notifyObservers(t,null,{type:"reset"}),void n.notifyWatch();var r=e.map(Mr);r.forEach((function(e){var t=n.getInitialValue(e);n.updateStore(Ir(n.store,e,t))})),n.resetWithFieldInitialValue({namePathList:r}),n.notifyObservers(t,r,{type:"reset"}),n.notifyWatch(r)},this.setFields=function(e){n.warningUnhooked();var t=n.store,r=[];e.forEach((function(e){var i=e.name,a=(e.errors,q(e,ai)),s=Mr(i);r.push(s),"value"in a&&n.updateStore(Ir(n.store,s,a.value)),n.notifyObservers(t,[s],{type:"setField",data:e})})),n.notifyWatch(r)},this.getFields=function(){return n.getFieldEntities(!0).map((function(e){var t=e.getNamePath(),r=z(z({},e.getMeta()),{},{name:t,value:n.getFieldValue(t)});return Object.defineProperty(r,"originRCField",{value:!0}),r}))},this.initEntityValue=function(e){var t=e.props.initialValue;if(void 0!==t){var r=e.getNamePath();void 0===Dr(n.store,r)&&n.updateStore(Ir(n.store,r,t))}},this.isMergedPreserve=function(e){var t=void 0!==e?e:n.preserve;return null==t||t},this.registerField=function(e){n.fieldEntities.push(e);var t=e.getNamePath();if(n.notifyWatch([t]),void 0!==e.props.initialValue){var r=n.store;n.resetWithFieldInitialValue({entities:[e],skipExist:!0}),n.notifyObservers(r,[e.getNamePath()],{type:"valueUpdate",source:"internal"})}return function(r,i){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if(n.fieldEntities=n.fieldEntities.filter((function(t){return t!==e})),!n.isMergedPreserve(i)&&(!r||a.length>1)){var s=r?void 0:n.getInitialValue(t);if(t.length&&n.getFieldValue(t)!==s&&n.fieldEntities.every((function(e){return!Vr(e.getNamePath(),t)}))){var o=n.store;n.updateStore(Ir(o,t,s,!0)),n.notifyObservers(o,[t],{type:"remove"}),n.triggerDependenciesUpdate(o,t)}}n.notifyWatch([t])}},this.dispatch=function(e){switch(e.type){case"updateValue":var t=e.namePath,r=e.value;n.updateValue(t,r);break;case"validateField":var i=e.namePath,a=e.triggerName;n.validateFields([i],{triggerName:a})}},this.notifyObservers=function(e,t,r){if(n.subscribable){var i=z(z({},r),{},{store:n.getFieldsValue(!0)});n.getFieldEntities().forEach((function(n){(0,n.onStoreChange)(e,t,i)}))}else n.forceRootUpdate()},this.triggerDependenciesUpdate=function(e,t){var r=n.getDependencyChildrenFields(t);return r.length&&n.validateFields(r),n.notifyObservers(e,r,{type:"dependenciesUpdate",relatedFields:[t].concat(Ln(r))}),r},this.updateValue=function(e,t){var r=Mr(e),i=n.store;n.updateStore(Ir(n.store,r,t)),n.notifyObservers(i,[r],{type:"valueUpdate",source:"internal"}),n.notifyWatch([r]);var a=n.triggerDependenciesUpdate(i,r),s=n.callbacks.onValuesChange;s&&s(Rr(n.store,[r]),n.getFieldsValue()),n.triggerOnFieldsChange([r].concat(Ln(a)))},this.setFieldsValue=function(e){n.warningUnhooked();var t=n.store;if(e){var r=zr(n.store,e);n.updateStore(r)}n.notifyObservers(t,null,{type:"valueUpdate",source:"external"}),n.notifyWatch()},this.setFieldValue=function(e,t){n.setFields([{name:e,value:t}])},this.getDependencyChildrenFields=function(e){var t=new Set,r=[],i=new ii;return n.getFieldEntities().forEach((function(e){(e.props.dependencies||[]).forEach((function(t){var n=Mr(t);i.update(n,(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Set;return t.add(e),t}))}))})),function e(n){(i.get(n)||new Set).forEach((function(n){if(!t.has(n)){t.add(n);var i=n.getNamePath();n.isFieldDirty()&&i.length&&(r.push(i),e(i))}}))}(e),r},this.triggerOnFieldsChange=function(e,t){var r=n.callbacks.onFieldsChange;if(r){var i=n.getFields();if(t){var a=new ii;t.forEach((function(e){var t=e.name,n=e.errors;a.set(t,n)})),i.forEach((function(e){e.errors=a.get(e.name)||e.errors}))}r(i.filter((function(t){var n=t.name;return Nr(e,n)})),i)}},this.validateFields=function(e,t){n.warningUnhooked();var r=!!e,i=r?e.map(Mr):[],a=[];n.getFieldEntities(!0).forEach((function(s){if(r||i.push(s.getNamePath()),(null==t?void 0:t.recursive)&&r){var o=s.getNamePath();o.every((function(t,n){return e[n]===t||void 0===e[n]}))&&i.push(o)}if(s.props.rules&&s.props.rules.length){var l=s.getNamePath();if(!r||Nr(i,l)){var c=s.validateRules(z({validateMessages:z(z({},Pr),n.validateMessages)},t));a.push(c.then((function(){return{name:l,errors:[],warnings:[]}})).catch((function(e){var t,n=[],r=[];return null===(t=e.forEach)||void 0===t||t.call(e,(function(e){var t=e.rule.warningOnly,i=e.errors;t?r.push.apply(r,Ln(i)):n.push.apply(n,Ln(i))})),n.length?Promise.reject({name:l,errors:n,warnings:r}):{name:l,errors:n,warnings:r}})))}}}));var s=function(e){var t=!1,n=e.length,r=[];return e.length?new Promise((function(i,a){e.forEach((function(e,s){e.catch((function(e){return t=!0,e})).then((function(e){n-=1,r[s]=e,n>0||(t&&a(r),i(r))}))}))})):Promise.resolve([])}(a);n.lastValidatePromise=s,s.catch((function(e){return e})).then((function(e){var t=e.map((function(e){return e.name}));n.notifyObservers(n.store,t,{type:"validateFinish"}),n.triggerOnFieldsChange(t,e)}));var o=s.then((function(){return n.lastValidatePromise===s?Promise.resolve(n.getFieldsValue(i)):Promise.reject([])})).catch((function(e){var t=e.filter((function(e){return e&&e.errors.length}));return Promise.reject({values:n.getFieldsValue(i),errorFields:t,outOfDate:n.lastValidatePromise!==s})}));return o.catch((function(e){return e})),o},this.submit=function(){n.warningUnhooked(),n.validateFields().then((function(e){var t=n.callbacks.onFinish;if(t)try{t(e)}catch(e){console.error(e)}})).catch((function(e){var t=n.callbacks.onFinishFailed;t&&t(e)}))},this.forceRootUpdate=t})),oi=function(e){var t=i.useRef(),n=G(i.useState({}),2)[1];if(!t.current)if(e)t.current=e;else{var r=new si((function(){n({})}));t.current=r.getForm()}return[t.current]},li=i.createContext({triggerFormChange:function(){},triggerFormFinish:function(){},registerForm:function(){},unregisterForm:function(){}}),ci=function(e){var t=e.validateMessages,n=e.onFormChange,r=e.onFormFinish,a=e.children,s=i.useContext(li),o=i.useRef({});return i.createElement(li.Provider,{value:z(z({},s),{},{validateMessages:z(z({},s.validateMessages),t),triggerFormChange:function(e,t){n&&n(e,{changedFields:t,forms:o.current}),s.triggerFormChange(e,t)},triggerFormFinish:function(e,t){r&&r(e,{values:t,forms:o.current}),s.triggerFormFinish(e,t)},registerForm:function(e,t){e&&(o.current=z(z({},o.current),{},L({},e,t))),s.registerForm(e,t)},unregisterForm:function(e){var t=z({},o.current);delete t[e],o.current=t,s.unregisterForm(e)}})},a)},ui=li,hi=["name","initialValues","fields","form","preserve","children","component","validateMessages","validateTrigger","onValuesChange","onFieldsChange","onFinish","onFinishFailed"],fi=function(e,t){var n=e.name,r=e.initialValues,a=e.fields,o=e.form,l=e.preserve,c=e.children,u=e.component,h=void 0===u?"form":u,f=e.validateMessages,p=e.validateTrigger,d=void 0===p?"onChange":p,m=e.onValuesChange,g=e.onFieldsChange,y=e.onFinish,v=e.onFinishFailed,b=q(e,hi),k=i.useContext(ui),E=G(oi(o),1)[0],x=E.getInternalHooks(qn),w=x.useSubscribe,S=x.setInitialValues,C=x.setCallbacks,P=x.setValidateMessages,_=x.setPreserve,T=x.destroyForm;i.useImperativeHandle(t,(function(){return E})),i.useEffect((function(){return k.registerForm(n,E),function(){k.unregisterForm(n)}}),[k,E,n]),P(z(z({},k.validateMessages),f)),C({onValuesChange:m,onFieldsChange:function(e){if(k.triggerFormChange(n,e),g){for(var t=arguments.length,r=new Array(t>1?t-1:0),i=1;i<t;i++)r[i-1]=arguments[i];g.apply(void 0,[e].concat(r))}},onFinish:function(e){k.triggerFormFinish(n,e),y&&y(e)},onFinishFailed:v}),_(l);var A,F=i.useRef(null);S(r,!F.current),F.current||(F.current=!0),i.useEffect((function(){return T}),[]);var M="function"==typeof c;A=M?c(E.getFieldsValue(!0),E):c,w(!M);var D=i.useRef();i.useEffect((function(){(function(e,t){if(e===t)return!0;if(!e&&t||e&&!t)return!1;if(!e||!t||"object"!==Y(e)||"object"!==Y(t))return!1;var n=Object.keys(e),r=Object.keys(t);return Ln(new Set([].concat(n,r))).every((function(n){var r=e[n],i=t[n];return"function"==typeof r&&"function"==typeof i||r===i}))})(D.current||[],a||[])||E.setFields(a||[]),D.current=a}),[a,E]);var I=i.useMemo((function(){return z(z({},E),{},{validateTrigger:d})}),[E,d]),R=i.createElement(Wn.Provider,{value:I},A);return!1===h?R:i.createElement(h,s({},b,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),E.submit()},onReset:function(e){var t;e.preventDefault(),E.resetFields(),null===(t=b.onReset)||void 0===t||t.call(b,e)}}),R)};function pi(e){try{return JSON.stringify(e)}catch(e){return Math.random()}}var di=i.forwardRef(fi);di.FormProvider=ci,di.Field=Jr,di.List=function(e){var t=e.name,n=e.initialValue,r=e.children,a=e.rules,s=e.validateTrigger,o=i.useContext(Wn),l=i.useRef({keys:[],id:0}).current,c=i.useMemo((function(){var e=Mr(o.prefixName)||[];return[].concat(Ln(e),Ln(Mr(t)))}),[o.prefixName,t]),u=i.useMemo((function(){return z(z({},o),{},{prefixName:c})}),[o,c]),h=i.useMemo((function(){return{getKey:function(e){var t=c.length,n=e[t];return[l.keys[n],e.slice(t+1)]}}}),[c]);return"function"!=typeof r?(_e(!1,"Form.List only accepts function as children."),null):i.createElement(ei.Provider,{value:h},i.createElement(Wn.Provider,{value:u},i.createElement(Jr,{name:[],shouldUpdate:function(e,t,n){return"internal"!==n.source&&e!==t},rules:a,validateTrigger:s,initialValue:n,isList:!0},(function(e,t){var n=e.value,i=void 0===n?[]:n,a=e.onChange,s=o.getFieldValue,u=function(){return s(c||[])||[]},h={add:function(e,t){var n=u();t>=0&&t<=n.length?(l.keys=[].concat(Ln(l.keys.slice(0,t)),[l.id],Ln(l.keys.slice(t))),a([].concat(Ln(n.slice(0,t)),[e],Ln(n.slice(t))))):(l.keys=[].concat(Ln(l.keys),[l.id]),a([].concat(Ln(n),[e]))),l.id+=1},remove:function(e){var t=u(),n=new Set(Array.isArray(e)?e:[e]);n.size<=0||(l.keys=l.keys.filter((function(e,t){return!n.has(t)})),a(t.filter((function(e,t){return!n.has(t)}))))},move:function(e,t){if(e!==t){var n=u();e<0||e>=n.length||t<0||t>=n.length||(l.keys=$r(l.keys,e,t),a($r(n,e,t)))}}},f=i||[];return Array.isArray(f)||(f=[]),r(f.map((function(e,t){var n=l.keys[t];return void 0===n&&(l.keys[t]=l.id,n=l.keys[t],l.id+=1),{name:t,key:n,isListField:!0}})),h,t)}))))},di.useForm=oi,di.useWatch=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1?arguments[1]:void 0,n=(0,i.useState)(),r=G(n,2),a=r[0],s=r[1],o=(0,i.useMemo)((function(){return pi(a)}),[a]),l=(0,i.useRef)(o);l.current=o;var c=(0,i.useContext)(Wn),u=t||c,h=u&&u._init,f=Mr(e),p=(0,i.useRef)(f);return p.current=f,(0,i.useEffect)((function(){if(h){var e=u.getFieldsValue,t=(0,(0,u.getInternalHooks)(qn).registerWatch)((function(e){var t=Dr(e,p.current),n=pi(t);l.current!==n&&(l.current=n,s(t))})),n=Dr(e(),p.current);return s(n),t}}),[]),a};var mi=Number.isNaN||function(e){return"number"==typeof e&&e!=e};function gi(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(!((r=e[n])===(i=t[n])||mi(r)&&mi(i)))return!1;var r,i;return!0}var yi={placeholder:"Select time",rangePlaceholder:["Start time","End time"]},vi={lang:s({placeholder:"Select date",yearPlaceholder:"Select year",quarterPlaceholder:"Select quarter",monthPlaceholder:"Select month",weekPlaceholder:"Select week",rangePlaceholder:["Start date","End date"],rangeYearPlaceholder:["Start year","End year"],rangeQuarterPlaceholder:["Start quarter","End quarter"],rangeMonthPlaceholder:["Start month","End month"],rangeWeekPlaceholder:["Start week","End week"]},{locale:"en_US",today:"Today",now:"Now",backToToday:"Back to today",ok:"OK",clear:"Clear",month:"Month",year:"Year",timeSelect:"select time",dateSelect:"select date",weekSelect:"Choose a week",monthSelect:"Choose a month",yearSelect:"Choose a year",decadeSelect:"Choose a decade",yearFormat:"YYYY",dateFormat:"M/D/YYYY",dayFormat:"D",dateTimeFormat:"M/D/YYYY HH:mm:ss",monthBeforeYear:!0,previousMonth:"Previous month (PageUp)",nextMonth:"Next month (PageDown)",previousYear:"Last year (Control + left)",nextYear:"Next year (Control + right)",previousDecade:"Last decade",nextDecade:"Next decade",previousCentury:"Last century",nextCentury:"Next century"}),timePickerLocale:s({},yi)},bi="${label} is not a valid ${type}",ki={locale:"en",Pagination:{items_per_page:"/ page",jump_to:"Go to",jump_to_confirm:"confirm",page:"Page",prev_page:"Previous Page",next_page:"Next Page",prev_5:"Previous 5 Pages",next_5:"Next 5 Pages",prev_3:"Previous 3 Pages",next_3:"Next 3 Pages",page_size:"Page Size"},DatePicker:vi,TimePicker:yi,Calendar:vi,global:{placeholder:"Please select"},Table:{filterTitle:"Filter menu",filterConfirm:"OK",filterReset:"Reset",filterEmptyText:"No filters",filterCheckall:"Select all items",filterSearchPlaceholder:"Search in filters",emptyText:"No data",selectAll:"Select current page",selectInvert:"Invert current page",selectNone:"Clear all data",selectionAll:"Select all data",sortTitle:"Sort",expand:"Expand row",collapse:"Collapse row",triggerDesc:"Click to sort descending",triggerAsc:"Click to sort ascending",cancelSort:"Click to cancel sorting"},Modal:{okText:"OK",cancelText:"Cancel",justOkText:"OK"},Popconfirm:{okText:"OK",cancelText:"Cancel"},Transfer:{titles:["",""],searchPlaceholder:"Search here",itemUnit:"item",itemsUnit:"items",remove:"Remove",selectCurrent:"Select current page",removeCurrent:"Remove current page",selectAll:"Select all data",removeAll:"Remove all data",selectInvert:"Invert current page"},Upload:{uploading:"Uploading...",removeFile:"Remove file",uploadError:"Upload error",previewFile:"Preview file",downloadFile:"Download file"},Empty:{description:"No Data"},Icon:{icon:"icon"},Text:{edit:"Edit",copy:"Copy",copied:"Copied",expand:"Expand"},PageHeader:{back:"Back"},Form:{optional:"(optional)",defaultValidateMessages:{default:"Field validation error for ${label}",required:"Please enter ${label}",enum:"${label} must be one of [${enum}]",whitespace:"${label} cannot be a blank character",date:{format:"${label} date format is invalid",parse:"${label} cannot be converted to a date",invalid:"${label} is an invalid date"},types:{string:bi,method:bi,array:bi,object:bi,number:bi,date:bi,boolean:bi,integer:bi,float:bi,regexp:bi,email:bi,url:bi,hex:bi},string:{len:"${label} must be ${len} characters",min:"${label} must be at least ${min} characters",max:"${label} must be up to ${max} characters",range:"${label} must be between ${min}-${max} characters"},number:{len:"${label} must be equal to ${len}",min:"${label} must be minimum ${min}",max:"${label} must be maximum ${max}",range:"${label} must be between ${min}-${max}"},array:{len:"Must be ${len} ${label}",min:"At least ${min} ${label}",max:"At most ${max} ${label}",range:"The amount of ${label} must be between ${min}-${max}"},pattern:{mismatch:"${label} does not match the pattern ${pattern}"}}},Image:{preview:"Preview"}},Ei=s({},ki.Modal);function xi(e){Ei=e?s(s({},Ei),e):s({},ki.Modal)}var wi=(0,i.createContext)(void 0),Si=function(e){yt(n,e);var t=Et(n);function n(e){var r;return pt(this,n),(r=t.call(this,e)).getMemoizedContextValue=function(e,t){void 0===t&&(t=gi);var n=null;function r(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];if(n&&n.lastThis===this&&t(r,n.lastArgs))return n.lastResult;var a=e.apply(this,r);return n={lastResult:a,lastArgs:r,lastThis:this},a}return r.clear=function(){n=null},r}((function(e){return s(s({},e),{exist:!0})})),xi(e.locale&&e.locale.Modal),r}return mt(n,[{key:"componentDidMount",value:function(){xi(this.props.locale&&this.props.locale.Modal)}},{key:"componentDidUpdate",value:function(e){var t=this.props.locale;e.locale!==t&&xi(t&&t.Modal)}},{key:"componentWillUnmount",value:function(){xi()}},{key:"render",value:function(){var e=this.props,t=e.locale,n=e.children,r=this.getMemoizedContextValue(t);return i.createElement(wi.Provider,{value:r},n)}}]),n}(i.Component);Si.defaultProps={locale:{}};var Ci=ki,Pi=function(e){yt(n,e);var t=Et(n);function n(){return pt(this,n),t.apply(this,arguments)}return mt(n,[{key:"getLocale",value:function(){var e=this.props,t=e.componentName,n=e.defaultLocale||Ci[null!=t?t:"global"],r=this.context,i=t&&r?r[t]:{};return s(s({},n instanceof Function?n():n),i||{})}},{key:"getLocaleCode",value:function(){var e=this.context,t=e&&e.locale;return e&&e.exist&&!t?Ci.locale:t}},{key:"render",value:function(){return this.props.children(this.getLocale(),this.getLocaleCode(),this.context)}}]),n}(i.Component);Pi.defaultProps={componentName:"global"},Pi.contextType=wi;var _i={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z"}},{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}}]},name:"check-circle",theme:"outlined"},Ti=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:_i}))};Ti.displayName="CheckCircleOutlined";var Ai=i.forwardRef(Ti),Fi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z"}},{tag:"path",attrs:{d:"M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}}]},name:"close-circle",theme:"outlined"},Mi=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:Fi}))};Mi.displayName="CloseCircleOutlined";var Di=i.forwardRef(Mi),Ii={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"}}]},name:"close",theme:"outlined"},Ri=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:Ii}))};Ri.displayName="CloseOutlined";var Ni=i.forwardRef(Ri),Li={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z"}}]},name:"exclamation-circle",theme:"outlined"},Oi=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:Li}))};Oi.displayName="ExclamationCircleOutlined";var zi=i.forwardRef(Oi),Vi={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"}},{tag:"path",attrs:{d:"M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z"}}]},name:"info-circle",theme:"outlined"},Bi=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:Vi}))};Bi.displayName="InfoCircleOutlined";var $i,ji,Hi,Gi=i.forwardRef(Bi),qi=i.createContext({getPrefixCls:function(e,t){return t||(e?"ant-".concat(e):"ant")}}),Ui=qi.Consumer,Wi={},Ki=4.5,Yi=24,Qi=24,Xi="",Zi="topRight",Ji=!1;function ea(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Yi,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Qi;switch(e){case"top":t={left:"50%",transform:"translateX(-50%)",right:"auto",top:n,bottom:"auto"};break;case"topLeft":t={left:0,top:n,bottom:"auto"};break;case"topRight":t={right:0,top:n,bottom:"auto"};break;case"bottom":t={left:"50%",transform:"translateX(-50%)",right:"auto",top:"auto",bottom:r};break;case"bottomLeft":t={left:0,top:"auto",bottom:r};break;default:t={right:0,top:"auto",bottom:r}}return t}function ta(e,t){var n=e.placement,r=void 0===n?Zi:n,i=e.top,a=e.bottom,s=e.getContainer,o=void 0===s?$i:s,l=e.prefixCls,c=va(),u=c.getPrefixCls,h=c.getIconPrefixCls,f=u("notification",l||Xi),p=h(),d="".concat(f,"-").concat(r),m=Wi[d];if(m)Promise.resolve(m).then((function(e){t({prefixCls:"".concat(f,"-notice"),iconPrefixCls:p,instance:e})}));else{var g=W()("".concat(f,"-").concat(r),L({},"".concat(f,"-rtl"),!0===Ji));Wi[d]=new Promise((function(e){Hn.newInstance({prefixCls:f,className:g,style:ea(r,i,a),getContainer:o,maxCount:Hi},(function(n){e(n),t({prefixCls:"".concat(f,"-notice"),iconPrefixCls:p,instance:n})}))}))}}var na={success:Ai,info:Gi,error:Di,warning:zi};function ra(e,t,n){var r=e.duration,a=e.icon,s=e.type,o=e.description,l=e.message,c=e.btn,u=e.onClose,h=e.onClick,f=e.key,p=e.style,d=e.className,m=e.closeIcon,g=void 0===m?ji:m,y=void 0===r?Ki:r,v=null;a?v=i.createElement("span",{className:"".concat(t,"-icon")},e.icon):s&&(v=i.createElement(na[s]||null,{className:"".concat(t,"-icon ").concat(t,"-icon-").concat(s)}));var b=i.createElement("span",{className:"".concat(t,"-close-x")},g||i.createElement(Ni,{className:"".concat(t,"-close-icon")})),k=!o&&v?i.createElement("span",{className:"".concat(t,"-message-single-line-auto-margin")}):null;return{content:i.createElement(Ca,{iconPrefixCls:n},i.createElement("div",{className:v?"".concat(t,"-with-icon"):"",role:"alert"},v,i.createElement("div",{className:"".concat(t,"-message")},k,l),i.createElement("div",{className:"".concat(t,"-description")},o),c?i.createElement("span",{className:"".concat(t,"-btn")},c):null)),duration:y,closable:!0,closeIcon:b,onClose:u,onClick:h,key:f,style:p||{},className:W()(d,L({},"".concat(t,"-").concat(s),!!s))}}var ia={open:function(e){ta(e,(function(t){var n=t.prefixCls,r=t.iconPrefixCls;t.instance.notice(ra(e,n,r))}))},close:function(e){Object.keys(Wi).forEach((function(t){return Promise.resolve(Wi[t]).then((function(t){t.removeNotice(e)}))}))},config:function(e){var t=e.duration,n=e.placement,r=e.bottom,i=e.top,a=e.getContainer,s=e.closeIcon,o=e.prefixCls;void 0!==o&&(Xi=o),void 0!==t&&(Ki=t),void 0!==n?Zi=n:e.rtl&&(Zi="topLeft"),void 0!==r&&(Qi=r),void 0!==i&&(Yi=i),void 0!==a&&($i=a),void 0!==s&&(ji=s),void 0!==e.rtl&&(Ji=e.rtl),void 0!==e.maxCount&&(Hi=e.maxCount)},destroy:function(){Object.keys(Wi).forEach((function(e){Promise.resolve(Wi[e]).then((function(e){e.destroy()})),delete Wi[e]}))}};["success","info","warning","error"].forEach((function(e){ia[e]=function(t){return ia.open(s(s({},t),{type:e}))}})),ia.warn=ia.warning,ia.useNotification=function(e,t){return function(){var n,r=null,a=G(On({add:function(e,t){null==r||r.component.add(e,t)}}),2),o=a[0],l=a[1],c=i.useRef({});return c.current.open=function(i){var a=i.prefixCls,l=n("notification",a);e(s(s({},i),{prefixCls:l}),(function(e){var n=e.prefixCls,a=e.instance;r=a,o(t(i,n))}))},["success","info","warning","error"].forEach((function(e){c.current[e]=function(t){return c.current.open(s(s({},t),{type:e}))}})),[c.current,i.createElement(Ui,{key:"holder"},(function(e){return n=e.getPrefixCls,l}))]}}(ta,ra);var aa=ia,sa=function(){function e(t,n){var r;if(void 0===t&&(t=""),void 0===n&&(n={}),t instanceof e)return t;"number"==typeof t&&(t=function(e){return{r:e>>16,g:(65280&e)>>8,b:255&e}}(t)),this.originalInput=t;var i=le(t);this.originalInput=t,this.r=i.r,this.g=i.g,this.b=i.b,this.a=i.a,this.roundA=Math.round(100*this.a)/100,this.format=null!==(r=n.format)&&void 0!==r?r:i.format,this.gradientType=n.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=i.ok}return e.prototype.isDark=function(){return this.getBrightness()<128},e.prototype.isLight=function(){return!this.isDark()},e.prototype.getBrightness=function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},e.prototype.getLuminance=function(){var e=this.toRgb(),t=e.r/255,n=e.g/255,r=e.b/255;return.2126*(t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))},e.prototype.getAlpha=function(){return this.a},e.prototype.setAlpha=function(e){return this.a=Z(e),this.roundA=Math.round(100*this.a)/100,this},e.prototype.toHsv=function(){var e=re(this.r,this.g,this.b);return{h:360*e.h,s:e.s,v:e.v,a:this.a}},e.prototype.toHsvString=function(){var e=re(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.v);return 1===this.a?"hsv(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsva(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHsl=function(){var e=te(this.r,this.g,this.b);return{h:360*e.h,s:e.s,l:e.l,a:this.a}},e.prototype.toHslString=function(){var e=te(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.l);return 1===this.a?"hsl(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsla(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHex=function(e){return void 0===e&&(e=!1),ie(this.r,this.g,this.b,e)},e.prototype.toHexString=function(e){return void 0===e&&(e=!1),"#"+this.toHex(e)},e.prototype.toHex8=function(e){return void 0===e&&(e=!1),function(e,t,n,r,i){var a,s=[ee(Math.round(e).toString(16)),ee(Math.round(t).toString(16)),ee(Math.round(n).toString(16)),ee((a=r,Math.round(255*parseFloat(a)).toString(16)))];return i&&s[0].startsWith(s[0].charAt(1))&&s[1].startsWith(s[1].charAt(1))&&s[2].startsWith(s[2].charAt(1))&&s[3].startsWith(s[3].charAt(1))?s[0].charAt(0)+s[1].charAt(0)+s[2].charAt(0)+s[3].charAt(0):s.join("")}(this.r,this.g,this.b,this.a,e)},e.prototype.toHex8String=function(e){return void 0===e&&(e=!1),"#"+this.toHex8(e)},e.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},e.prototype.toRgbString=function(){var e=Math.round(this.r),t=Math.round(this.g),n=Math.round(this.b);return 1===this.a?"rgb(".concat(e,", ").concat(t,", ").concat(n,")"):"rgba(".concat(e,", ").concat(t,", ").concat(n,", ").concat(this.roundA,")")},e.prototype.toPercentageRgb=function(){var e=function(e){return"".concat(Math.round(100*Q(e,255)),"%")};return{r:e(this.r),g:e(this.g),b:e(this.b),a:this.a}},e.prototype.toPercentageRgbString=function(){var e=function(e){return Math.round(100*Q(e,255))};return 1===this.a?"rgb(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%)"):"rgba(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%, ").concat(this.roundA,")")},e.prototype.toName=function(){if(0===this.a)return"transparent";if(this.a<1)return!1;for(var e="#"+ie(this.r,this.g,this.b,!1),t=0,n=Object.entries(oe);t<n.length;t++){var r=n[t],i=r[0];if(e===r[1])return i}return!1},e.prototype.toString=function(e){var t=Boolean(e);e=null!=e?e:this.format;var n=!1,r=this.a<1&&this.a>=0;return t||!r||!e.startsWith("hex")&&"name"!==e?("rgb"===e&&(n=this.toRgbString()),"prgb"===e&&(n=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(n=this.toHexString()),"hex3"===e&&(n=this.toHexString(!0)),"hex4"===e&&(n=this.toHex8String(!0)),"hex8"===e&&(n=this.toHex8String()),"name"===e&&(n=this.toName()),"hsl"===e&&(n=this.toHslString()),"hsv"===e&&(n=this.toHsvString()),n||this.toHexString()):"name"===e&&0===this.a?this.toName():this.toRgbString()},e.prototype.toNumber=function(){return(Math.round(this.r)<<16)+(Math.round(this.g)<<8)+Math.round(this.b)},e.prototype.clone=function(){return new e(this.toString())},e.prototype.lighten=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l+=t/100,n.l=X(n.l),new e(n)},e.prototype.brighten=function(t){void 0===t&&(t=10);var n=this.toRgb();return n.r=Math.max(0,Math.min(255,n.r-Math.round(-t/100*255))),n.g=Math.max(0,Math.min(255,n.g-Math.round(-t/100*255))),n.b=Math.max(0,Math.min(255,n.b-Math.round(-t/100*255))),new e(n)},e.prototype.darken=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l-=t/100,n.l=X(n.l),new e(n)},e.prototype.tint=function(e){return void 0===e&&(e=10),this.mix("white",e)},e.prototype.shade=function(e){return void 0===e&&(e=10),this.mix("black",e)},e.prototype.desaturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s-=t/100,n.s=X(n.s),new e(n)},e.prototype.saturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s+=t/100,n.s=X(n.s),new e(n)},e.prototype.greyscale=function(){return this.desaturate(100)},e.prototype.spin=function(t){var n=this.toHsl(),r=(n.h+t)%360;return n.h=r<0?360+r:r,new e(n)},e.prototype.mix=function(t,n){void 0===n&&(n=50);var r=this.toRgb(),i=new e(t).toRgb(),a=n/100;return new e({r:(i.r-r.r)*a+r.r,g:(i.g-r.g)*a+r.g,b:(i.b-r.b)*a+r.b,a:(i.a-r.a)*a+r.a})},e.prototype.analogous=function(t,n){void 0===t&&(t=6),void 0===n&&(n=30);var r=this.toHsl(),i=360/n,a=[this];for(r.h=(r.h-(i*t>>1)+720)%360;--t;)r.h=(r.h+i)%360,a.push(new e(r));return a},e.prototype.complement=function(){var t=this.toHsl();return t.h=(t.h+180)%360,new e(t)},e.prototype.monochromatic=function(t){void 0===t&&(t=6);for(var n=this.toHsv(),r=n.h,i=n.s,a=n.v,s=[],o=1/t;t--;)s.push(new e({h:r,s:i,v:a})),a=(a+o)%1;return s},e.prototype.splitcomplement=function(){var t=this.toHsl(),n=t.h;return[this,new e({h:(n+72)%360,s:t.s,l:t.l}),new e({h:(n+216)%360,s:t.s,l:t.l})]},e.prototype.onBackground=function(t){var n=this.toRgb(),r=new e(t).toRgb();return new e({r:r.r+(n.r-r.r)*n.a,g:r.g+(n.g-r.g)*n.a,b:r.b+(n.b-r.b)*n.a})},e.prototype.triad=function(){return this.polyad(3)},e.prototype.tetrad=function(){return this.polyad(4)},e.prototype.polyad=function(t){for(var n=this.toHsl(),r=n.h,i=[this],a=360/t,s=1;s<t;s++)i.push(new e({h:(r+s*a)%360,s:n.s,l:n.l}));return i},e.prototype.equals=function(t){return this.toRgbString()===new e(t).toRgbString()},e}(),oa="-ant-".concat(Date.now(),"-").concat(Math.random());var la,ca,ua=i.createContext(!1),ha=function(e){var t=e.children,n=e.disabled,r=i.useContext(ua);return i.createElement(ua.Provider,{value:n||r},t)},fa=i.createContext(void 0),pa=function(e){var t=e.children,n=e.size;return i.createElement(fa.Consumer,null,(function(e){return i.createElement(fa.Provider,{value:n||e},t)}))},da=fa,ma=["getTargetContainer","getPopupContainer","renderEmpty","pageHeader","input","pagination","form"];function ga(){return la||"ant"}function ya(){return ca||"anticon"}var va=function(){return{getPrefixCls:function(e,t){return t||(e?"".concat(ga(),"-").concat(e):ga())},getIconPrefixCls:ya,getRootPrefixCls:function(e,t){return e||la||(t&&t.includes("-")?t.replace(/^(.*)-[^-]*$/,"$1"):ga())}}},ba=function(e){var t,n,r=e.children,a=e.csp,o=e.autoInsertSpaceInButton,l=e.form,c=e.locale,u=e.componentSize,h=e.direction,f=e.space,p=e.virtual,d=e.dropdownMatchSelectWidth,m=e.legacyLocale,g=e.parentContext,y=e.iconPrefixCls,v=e.componentDisabled,b=i.useCallback((function(t,n){var r=e.prefixCls;if(n)return n;var i=r||g.getPrefixCls("");return t?"".concat(i,"-").concat(t):i}),[g.getPrefixCls,e.prefixCls]),k=s(s({},g),{csp:a,autoInsertSpaceInButton:o,locale:c||m,direction:h,space:f,virtual:p,dropdownMatchSelectWidth:d,getPrefixCls:b});ma.forEach((function(t){var n=e[t];n&&(k[t]=n)}));var E,x,w,S,C,P,_=(E=k,"value"in(P=i.useRef({})).current&&(x=P.current.condition,w=E,S=Object.keys(x),C=Object.keys(w),!(S.length!==C.length||S.some((function(e){return x[e]!==w[e]}))))||(P.current.value=k,P.current.condition=E),P.current.value),T=i.useMemo((function(){return{prefixCls:y,csp:a}}),[y,a]),A=r,F={};return c&&(F=(null===(t=c.Form)||void 0===t?void 0:t.defaultValidateMessages)||(null===(n=ki.Form)||void 0===n?void 0:n.defaultValidateMessages)||{}),l&&l.validateMessages&&(F=s(s({},F),l.validateMessages)),Object.keys(F).length>0&&(A=i.createElement(ci,{validateMessages:F},r)),c&&(A=i.createElement(Si,{locale:c,_ANT_MARK__:"internalMark"},A)),(y||a)&&(A=i.createElement(K.Provider,{value:T},A)),u&&(A=i.createElement(pa,{size:u},A)),void 0!==v&&(A=i.createElement(ha,{disabled:v},A)),i.createElement(qi.Provider,{value:_},A)},ka=function(e){return i.useEffect((function(){e.direction&&(Va.config({rtl:"rtl"===e.direction}),aa.config({rtl:"rtl"===e.direction}))}),[e.direction]),i.createElement(Pi,null,(function(t,n,r){return i.createElement(Ui,null,(function(t){return i.createElement(ba,s({parentContext:t,legacyLocale:r},e))}))}))};ka.ConfigContext=qi,ka.SizeContext=da,ka.config=function(e){var t=e.prefixCls,n=e.iconPrefixCls,r=e.theme;void 0!==t&&(la=t),void 0!==n&&(ca=n),r&&function(e,t){var n=function(e,t){var n={},r=function(e,t){var n=e.clone();return(n=(null==t?void 0:t(n))||n).toRgbString()},i=function(e,t){var i=new sa(e),a=Ee(i.toRgbString());n["".concat(t,"-color")]=r(i),n["".concat(t,"-color-disabled")]=a[1],n["".concat(t,"-color-hover")]=a[4],n["".concat(t,"-color-active")]=a[6],n["".concat(t,"-color-outline")]=i.clone().setAlpha(.2).toRgbString(),n["".concat(t,"-color-deprecated-bg")]=a[0],n["".concat(t,"-color-deprecated-border")]=a[2]};if(t.primaryColor){i(t.primaryColor,"primary");var a=new sa(t.primaryColor),s=Ee(a.toRgbString());s.forEach((function(e,t){n["primary-".concat(t+1)]=e})),n["primary-color-deprecated-l-35"]=r(a,(function(e){return e.lighten(35)})),n["primary-color-deprecated-l-20"]=r(a,(function(e){return e.lighten(20)})),n["primary-color-deprecated-t-20"]=r(a,(function(e){return e.tint(20)})),n["primary-color-deprecated-t-50"]=r(a,(function(e){return e.tint(50)})),n["primary-color-deprecated-f-12"]=r(a,(function(e){return e.setAlpha(.12*e.getAlpha())}));var o=new sa(s[0]);n["primary-color-active-deprecated-f-30"]=r(o,(function(e){return e.setAlpha(.3*e.getAlpha())})),n["primary-color-active-deprecated-d-02"]=r(o,(function(e){return e.darken(2)}))}t.successColor&&i(t.successColor,"success"),t.warningColor&&i(t.warningColor,"warning"),t.errorColor&&i(t.errorColor,"error"),t.infoColor&&i(t.infoColor,"info");var l=Object.keys(n).map((function(t){return"--".concat(e,"-").concat(t,": ").concat(n[t],";")}));return"\n  :root {\n    ".concat(l.join("\n"),"\n  }\n  ").trim()}(e,t);Te()&&ze(n,"".concat(oa,"-dynamic-theme"))}(ga(),r)};var Ea,xa,wa,Sa,Ca=ka,Pa=3,_a=1,Ta="",Aa="move-up",Fa=!1,Ma=!1;function Da(){return _a++}function Ia(e,t){var n=e.prefixCls,r=e.getPopupContainer,i=va(),a=i.getPrefixCls,s=i.getRootPrefixCls,o=i.getIconPrefixCls,l=a("message",n||Ta),c=s(e.rootPrefixCls,l),u=o();if(Ea)t({prefixCls:l,rootPrefixCls:c,iconPrefixCls:u,instance:Ea});else{var h={prefixCls:l,transitionName:Fa?Aa:"".concat(c,"-").concat(Aa),style:{top:xa},getContainer:wa||r,maxCount:Sa};Hn.newInstance(h,(function(e){Ea?t({prefixCls:l,rootPrefixCls:c,iconPrefixCls:u,instance:Ea}):(Ea=e,t({prefixCls:l,rootPrefixCls:c,iconPrefixCls:u,instance:e}))}))}}var Ra={info:ct,success:et,error:rt,warning:st,loading:ft},Na=Object.keys(Ra);function La(e,t,n){var r,a=void 0!==e.duration?e.duration:Pa,s=Ra[e.type],o=W()("".concat(t,"-custom-content"),(L(r={},"".concat(t,"-").concat(e.type),e.type),L(r,"".concat(t,"-rtl"),!0===Ma),r));return{key:e.key,duration:a,style:e.style||{},className:e.className,content:i.createElement(Ca,{iconPrefixCls:n},i.createElement("div",{className:o},e.icon||s&&i.createElement(s,null),i.createElement("span",null,e.content))),onClose:e.onClose,onClick:e.onClick}}var Oa={open:function(e){var t=e.key||Da(),n=new Promise((function(n){var r=function(){return"function"==typeof e.onClose&&e.onClose(),n(!0)};Ia(e,(function(n){var i=n.prefixCls,a=n.iconPrefixCls;n.instance.notice(La(s(s({},e),{key:t,onClose:r}),i,a))}))})),r=function(){Ea&&Ea.removeNotice(t)};return r.then=function(e,t){return n.then(e,t)},r.promise=n,r},config:function(e){void 0!==e.top&&(xa=e.top,Ea=null),void 0!==e.duration&&(Pa=e.duration),void 0!==e.prefixCls&&(Ta=e.prefixCls),void 0!==e.getContainer&&(wa=e.getContainer,Ea=null),void 0!==e.transitionName&&(Aa=e.transitionName,Ea=null,Fa=!0),void 0!==e.maxCount&&(Sa=e.maxCount,Ea=null),void 0!==e.rtl&&(Ma=e.rtl)},destroy:function(e){if(Ea)if(e)(0,Ea.removeNotice)(e);else{(0,Ea.destroy)(),Ea=null}}};function za(e,t){e[t]=function(n,r,i){return function(e){return"[object Object]"===Object.prototype.toString.call(e)&&!!e.content}(n)?e.open(s(s({},n),{type:t})):("function"==typeof r&&(i=r,r=void 0),e.open({content:n,duration:r,type:t,onClose:i}))}}Na.forEach((function(e){return za(Oa,e)})),Oa.warn=Oa.warning,Oa.useMessage=function(e,t){return function(){var n,r,a=null,o=G(On({add:function(e,t){null==a||a.component.add(e,t)}}),2),l=o[0],c=o[1],u=i.useRef({});return u.current.open=function(i){var o=i.prefixCls,c=n("message",o),u=n(),h=i.key||Da(),f=new Promise((function(n){var o=function(){return"function"==typeof i.onClose&&i.onClose(),n(!0)};e(s(s({},i),{prefixCls:c,rootPrefixCls:u,getPopupContainer:r}),(function(e){var n=e.prefixCls,r=e.instance;a=r,l(t(s(s({},i),{key:h,onClose:o}),n))}))})),p=function(){a&&a.removeNotice(h)};return p.then=function(e,t){return f.then(e,t)},p.promise=f,p},Na.forEach((function(e){return za(u.current,e)})),[u.current,i.createElement(Ui,{key:"holder"},(function(e){return n=e.getPrefixCls,r=e.getPopupContainer,c}))]}}(Ia,La);var Va=Oa,Ba={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M689 165.1L308.2 493.5c-10.9 9.4-10.9 27.5 0 37L689 858.9c14.2 12.2 35 1.2 35-18.5V183.6c0-19.7-20.8-30.7-35-18.5z"}}]},name:"caret-left",theme:"outlined"},$a=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:Ba}))};$a.displayName="CaretLeftOutlined";var ja=i.forwardRef($a),Ha={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M715.8 493.5L335 165.1c-14.2-12.2-35-1.2-35 18.5v656.8c0 19.7 20.8 30.7 35 18.5l380.8-328.4c10.9-9.4 10.9-27.6 0-37z"}}]},name:"caret-right",theme:"outlined"},Ga=function(e,t){return i.createElement(Ze,z(z({},e),{},{ref:t,icon:Ha}))};Ga.displayName="CaretRightOutlined";var qa=i.forwardRef(Ga);function Ua(e,t){return function(){return e.apply(t,arguments)}}const{toString:Wa}=Object.prototype,{getPrototypeOf:Ka}=Object,Ya=(Qa=Object.create(null),e=>{const t=Wa.call(e);return Qa[t]||(Qa[t]=t.slice(8,-1).toLowerCase())});var Qa;const Xa=e=>(e=e.toLowerCase(),t=>Ya(t)===e),Za=e=>t=>typeof t===e,{isArray:Ja}=Array,es=Za("undefined"),ts=Xa("ArrayBuffer"),ns=Za("string"),rs=Za("function"),is=Za("number"),as=e=>null!==e&&"object"==typeof e,ss=e=>{if("object"!==Ya(e))return!1;const t=Ka(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},os=Xa("Date"),ls=Xa("File"),cs=Xa("Blob"),us=Xa("FileList"),hs=Xa("URLSearchParams");function fs(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,i;if("object"!=typeof e&&(e=[e]),Ja(e))for(r=0,i=e.length;r<i;r++)t.call(null,e[r],r,e);else{const i=n?Object.getOwnPropertyNames(e):Object.keys(e),a=i.length;let s;for(r=0;r<a;r++)s=i[r],t.call(null,e[s],s,e)}}const ps=(ds="undefined"!=typeof Uint8Array&&Ka(Uint8Array),e=>ds&&e instanceof ds);var ds;const ms=Xa("HTMLFormElement"),gs=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),ys=Xa("RegExp"),vs=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};fs(n,((n,i)=>{!1!==t(n,i,e)&&(r[i]=n)})),Object.defineProperties(e,r)};var bs={isArray:Ja,isArrayBuffer:ts,isBuffer:function(e){return null!==e&&!es(e)&&null!==e.constructor&&!es(e.constructor)&&rs(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{const t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||Wa.call(e)===t||rs(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&ts(e.buffer),t},isString:ns,isNumber:is,isBoolean:e=>!0===e||!1===e,isObject:as,isPlainObject:ss,isUndefined:es,isDate:os,isFile:ls,isBlob:cs,isRegExp:ys,isFunction:rs,isStream:e=>as(e)&&rs(e.pipe),isURLSearchParams:hs,isTypedArray:ps,isFileList:us,forEach:fs,merge:function e(){const t={},n=(n,r)=>{ss(t[r])&&ss(n)?t[r]=e(t[r],n):ss(n)?t[r]=e({},n):Ja(n)?t[r]=n.slice():t[r]=n};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&fs(arguments[e],n);return t},extend:(e,t,n,{allOwnKeys:r}={})=>(fs(t,((t,r)=>{n&&rs(t)?e[r]=Ua(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let i,a,s;const o={};if(t=t||{},null==e)return t;do{for(i=Object.getOwnPropertyNames(e),a=i.length;a-- >0;)s=i[a],r&&!r(s,e,t)||o[s]||(t[s]=e[s],o[s]=!0);e=!1!==n&&Ka(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:Ya,kindOfTest:Xa,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(Ja(e))return e;let t=e.length;if(!is(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:ms,hasOwnProperty:gs,hasOwnProp:gs,reduceDescriptors:vs,freezeMethods:e=>{vs(e,((t,n)=>{const r=e[n];rs(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return Ja(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[_-\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t)};function ks(e,t,n,r,i){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),i&&(this.response=i)}bs.inherits(ks,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Es=ks.prototype,xs={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{xs[e]={value:e}})),Object.defineProperties(ks,xs),Object.defineProperty(Es,"isAxiosError",{value:!0}),ks.from=(e,t,n,r,i,a)=>{const s=Object.create(Es);return bs.toFlatObject(e,s,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),ks.call(s,e.message,t,n,r,i),s.cause=e,s.name=e.name,a&&Object.assign(s,a),s};var ws=ks,Ss=n(230);function Cs(e){return bs.isPlainObject(e)||bs.isArray(e)}function Ps(e){return bs.endsWith(e,"[]")?e.slice(0,-2):e}function _s(e,t,n){return e?e.concat(t).map((function(e,t){return e=Ps(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const Ts=bs.toFlatObject(bs,{},null,(function(e){return/^is[A-Z]/.test(e)}));var As=function(e,t,n){if(!bs.isObject(e))throw new TypeError("target must be an object");t=t||new(Ss||FormData);const r=(n=bs.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!bs.isUndefined(t[e])}))).metaTokens,i=n.visitor||u,a=n.dots,s=n.indexes,o=(n.Blob||"undefined"!=typeof Blob&&Blob)&&(l=t)&&bs.isFunction(l.append)&&"FormData"===l[Symbol.toStringTag]&&l[Symbol.iterator];var l;if(!bs.isFunction(i))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(bs.isDate(e))return e.toISOString();if(!o&&bs.isBlob(e))throw new ws("Blob is not supported. Use a Buffer instead.");return bs.isArrayBuffer(e)||bs.isTypedArray(e)?o&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function u(e,n,i){let o=e;if(e&&!i&&"object"==typeof e)if(bs.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(bs.isArray(e)&&function(e){return bs.isArray(e)&&!e.some(Cs)}(e)||bs.isFileList(e)||bs.endsWith(n,"[]")&&(o=bs.toArray(e)))return n=Ps(n),o.forEach((function(e,r){!bs.isUndefined(e)&&null!==e&&t.append(!0===s?_s([n],r,a):null===s?n:n+"[]",c(e))})),!1;return!!Cs(e)||(t.append(_s(i,n,a),c(e)),!1)}const h=[],f=Object.assign(Ts,{defaultVisitor:u,convertValue:c,isVisitable:Cs});if(!bs.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!bs.isUndefined(n)){if(-1!==h.indexOf(n))throw Error("Circular reference detected in "+r.join("."));h.push(n),bs.forEach(n,(function(n,a){!0===(!(bs.isUndefined(n)||null===n)&&i.call(t,n,bs.isString(a)?a.trim():a,r,f))&&e(n,r?r.concat(a):[a])})),h.pop()}}(e),t};function Fs(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Ms(e,t){this._pairs=[],e&&As(e,this,t)}const Ds=Ms.prototype;Ds.append=function(e,t){this._pairs.push([e,t])},Ds.toString=function(e){const t=e?function(t){return e.call(this,t,Fs)}:Fs;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};var Is=Ms;function Rs(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ns(e,t,n){if(!t)return e;const r=n&&n.encode||Rs,i=n&&n.serialize;let a;if(a=i?i(t,n):bs.isURLSearchParams(t)?t.toString():new Is(t,n).toString(r),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}var Ls=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){bs.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Os={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},zs="undefined"!=typeof URLSearchParams?URLSearchParams:Is,Vs=FormData;const Bs=(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&"undefined"!=typeof window&&"undefined"!=typeof document})();var $s={isBrowser:!0,classes:{URLSearchParams:zs,FormData:Vs,Blob:Blob},isStandardBrowserEnv:Bs,protocols:["http","https","file","blob","url","data"]},js=function(e){function t(e,n,r,i){let a=e[i++];const s=Number.isFinite(+a),o=i>=e.length;return a=!a&&bs.isArray(r)?r.length:a,o?(bs.hasOwnProp(r,a)?r[a]=[r[a],n]:r[a]=n,!s):(r[a]&&bs.isObject(r[a])||(r[a]=[]),t(e,n,r[a],i)&&bs.isArray(r[a])&&(r[a]=function(e){const t={},n=Object.keys(e);let r;const i=n.length;let a;for(r=0;r<i;r++)a=n[r],t[a]=e[a];return t}(r[a])),!s)}if(bs.isFormData(e)&&bs.isFunction(e.entries)){const n={};return bs.forEachEntry(e,((e,r)=>{t(function(e){return bs.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},Hs=$s.isStandardBrowserEnv?{write:function(e,t,n,r,i,a){const s=[];s.push(e+"="+encodeURIComponent(t)),bs.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),bs.isString(r)&&s.push("path="+r),bs.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function Gs(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}var qs=$s.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=bs.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function Us(e,t,n){ws.call(this,null==e?"canceled":e,ws.ERR_CANCELED,t,n),this.name="CanceledError"}bs.inherits(Us,ws,{__CANCEL__:!0});var Ws=Us;const Ks=bs.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Ys=Symbol("internals"),Qs=Symbol("defaults");function Xs(e){return e&&String(e).trim().toLowerCase()}function Zs(e){return!1===e||null==e?e:bs.isArray(e)?e.map(Zs):String(e)}function Js(e,t,n,r){return bs.isFunction(r)?r.call(this,t,n):bs.isString(t)?bs.isString(r)?-1!==t.indexOf(r):bs.isRegExp(r)?r.test(t):void 0:void 0}function eo(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,i=n.length;for(;i-- >0;)if(r=n[i],t===r.toLowerCase())return r;return null}function to(e,t){e&&this.set(e),this[Qs]=t||null}Object.assign(to.prototype,{set:function(e,t,n){const r=this;function i(e,t,n){const i=Xs(t);if(!i)throw new Error("header name must be a non-empty string");const a=eo(r,i);(!a||!0===n||!1!==r[a]&&!1!==n)&&(r[a||t]=Zs(e))}return bs.isPlainObject(e)?bs.forEach(e,((e,n)=>{i(e,n,t)})):i(t,e,n),this},get:function(e,t){if(!(e=Xs(e)))return;const n=eo(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(bs.isFunction(t))return t.call(this,e,n);if(bs.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}},has:function(e,t){if(e=Xs(e)){const n=eo(this,e);return!(!n||t&&!Js(0,this[n],n,t))}return!1},delete:function(e,t){const n=this;let r=!1;function i(e){if(e=Xs(e)){const i=eo(n,e);!i||t&&!Js(0,n[i],i,t)||(delete n[i],r=!0)}}return bs.isArray(e)?e.forEach(i):i(e),r},clear:function(){return Object.keys(this).forEach(this.delete.bind(this))},normalize:function(e){const t=this,n={};return bs.forEach(this,((r,i)=>{const a=eo(n,i);if(a)return t[a]=Zs(r),void delete t[i];const s=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(i):String(i).trim();s!==i&&delete t[i],t[s]=Zs(r),n[s]=!0})),this},toJSON:function(e){const t=Object.create(null);return bs.forEach(Object.assign({},this[Qs]||null,this),((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&bs.isArray(n)?n.join(", "):n)})),t}}),Object.assign(to,{from:function(e){return bs.isString(e)?new this((e=>{const t={};let n,r,i;return e&&e.split("\n").forEach((function(e){i=e.indexOf(":"),n=e.substring(0,i).trim().toLowerCase(),r=e.substring(i+1).trim(),!n||t[n]&&Ks[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e)):e instanceof this?e:new this(e)},accessor:function(e){const t=(this[Ys]=this[Ys]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=Xs(e);t[r]||(function(e,t){const n=bs.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,i){return this[r].call(this,t,e,n,i)},configurable:!0})}))}(n,e),t[r]=!0)}return bs.isArray(e)?e.forEach(r):r(e),this}}),to.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent"]),bs.freezeMethods(to.prototype),bs.freezeMethods(to);var no=to;function ro(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let i,a=0,s=0;return t=void 0!==t?t:1e3,function(o){const l=Date.now(),c=r[s];i||(i=l),n[a]=o,r[a]=l;let u=s,h=0;for(;u!==a;)h+=n[u++],u%=e;if(a=(a+1)%e,a===s&&(s=(s+1)%e),l-i<t)return;const f=c&&l-c;return f?Math.round(1e3*h/f):void 0}}(50,250);return i=>{const a=i.loaded,s=i.lengthComputable?i.total:void 0,o=a-n,l=r(o);n=a;const c={loaded:a,total:s,progress:s?a/s:void 0,bytes:o,rate:l||void 0,estimated:l&&s&&a<=s?(s-a)/l:void 0};c[t?"download":"upload"]=!0,e(c)}}function io(e){return new Promise((function(t,n){let r=e.data;const i=no.from(e.headers).normalize(),a=e.responseType;let s;function o(){e.cancelToken&&e.cancelToken.unsubscribe(s),e.signal&&e.signal.removeEventListener("abort",s)}bs.isFormData(r)&&$s.isStandardBrowserEnv&&i.setContentType(!1);let l=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";i.set("Authorization","Basic "+btoa(t+":"+n))}const c=Gs(e.baseURL,e.url);function u(){if(!l)return;const r=no.from("getAllResponseHeaders"in l&&l.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new ws("Request failed with status code "+n.status,[ws.ERR_BAD_REQUEST,ws.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),o()}),(function(e){n(e),o()}),{data:a&&"text"!==a&&"json"!==a?l.response:l.responseText,status:l.status,statusText:l.statusText,headers:r,config:e,request:l}),l=null}if(l.open(e.method.toUpperCase(),Ns(c,e.params,e.paramsSerializer),!0),l.timeout=e.timeout,"onloadend"in l?l.onloadend=u:l.onreadystatechange=function(){l&&4===l.readyState&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf("file:"))&&setTimeout(u)},l.onabort=function(){l&&(n(new ws("Request aborted",ws.ECONNABORTED,e,l)),l=null)},l.onerror=function(){n(new ws("Network Error",ws.ERR_NETWORK,e,l)),l=null},l.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||Os;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new ws(t,r.clarifyTimeoutError?ws.ETIMEDOUT:ws.ECONNABORTED,e,l)),l=null},$s.isStandardBrowserEnv){const t=(e.withCredentials||qs(c))&&e.xsrfCookieName&&Hs.read(e.xsrfCookieName);t&&i.set(e.xsrfHeaderName,t)}void 0===r&&i.setContentType(null),"setRequestHeader"in l&&bs.forEach(i.toJSON(),(function(e,t){l.setRequestHeader(t,e)})),bs.isUndefined(e.withCredentials)||(l.withCredentials=!!e.withCredentials),a&&"json"!==a&&(l.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&l.addEventListener("progress",ro(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&l.upload&&l.upload.addEventListener("progress",ro(e.onUploadProgress)),(e.cancelToken||e.signal)&&(s=t=>{l&&(n(!t||t.type?new Ws(null,e,l):t),l.abort(),l=null)},e.cancelToken&&e.cancelToken.subscribe(s),e.signal&&(e.signal.aborted?s():e.signal.addEventListener("abort",s)));const h=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(c);h&&-1===$s.protocols.indexOf(h)?n(new ws("Unsupported protocol "+h+":",ws.ERR_BAD_REQUEST,e)):l.send(r||null)}))}const ao={http:io,xhr:io};var so=e=>{if(bs.isString(e)){const t=ao[e];if(!e)throw Error(bs.hasOwnProp(e)?`Adapter '${e}' is not available in the build`:`Can not resolve adapter '${e}'`);return t}if(!bs.isFunction(e))throw new TypeError("adapter is not a function");return e};const oo={"Content-Type":"application/x-www-form-urlencoded"},lo={transitional:Os,adapter:function(){let e;return"undefined"!=typeof XMLHttpRequest?e=so("xhr"):"undefined"!=typeof process&&"process"===bs.kindOf(process)&&(e=so("http")),e}(),transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,i=bs.isObject(e);if(i&&bs.isHTMLForm(e)&&(e=new FormData(e)),bs.isFormData(e))return r&&r?JSON.stringify(js(e)):e;if(bs.isArrayBuffer(e)||bs.isBuffer(e)||bs.isStream(e)||bs.isFile(e)||bs.isBlob(e))return e;if(bs.isArrayBufferView(e))return e.buffer;if(bs.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(i){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return As(e,new $s.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return $s.isNode&&bs.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=bs.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return As(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return i||r?(t.setContentType("application/json",!1),function(e,t,n){if(bs.isString(e))try{return(0,JSON.parse)(e),bs.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||lo.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&bs.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw ws.from(e,ws.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:$s.classes.FormData,Blob:$s.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};bs.forEach(["delete","get","head"],(function(e){lo.headers[e]={}})),bs.forEach(["post","put","patch"],(function(e){lo.headers[e]=bs.merge(oo)}));var co=lo;function uo(e,t){const n=this||co,r=t||n,i=no.from(r.headers);let a=r.data;return bs.forEach(e,(function(e){a=e.call(n,a,i.normalize(),t?t.status:void 0)})),i.normalize(),a}function ho(e){return!(!e||!e.__CANCEL__)}function fo(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Ws}function po(e){return fo(e),e.headers=no.from(e.headers),e.data=uo.call(e,e.transformRequest),(e.adapter||co.adapter)(e).then((function(t){return fo(e),t.data=uo.call(e,e.transformResponse,t),t.headers=no.from(t.headers),t}),(function(t){return ho(t)||(fo(e),t&&t.response&&(t.response.data=uo.call(e,e.transformResponse,t.response),t.response.headers=no.from(t.response.headers))),Promise.reject(t)}))}function mo(e,t){t=t||{};const n={};function r(e,t){return bs.isPlainObject(e)&&bs.isPlainObject(t)?bs.merge(e,t):bs.isPlainObject(t)?bs.merge({},t):bs.isArray(t)?t.slice():t}function i(n){return bs.isUndefined(t[n])?bs.isUndefined(e[n])?void 0:r(void 0,e[n]):r(e[n],t[n])}function a(e){if(!bs.isUndefined(t[e]))return r(void 0,t[e])}function s(n){return bs.isUndefined(t[n])?bs.isUndefined(e[n])?void 0:r(void 0,e[n]):r(void 0,t[n])}function o(n){return n in t?r(e[n],t[n]):n in e?r(void 0,e[n]):void 0}const l={url:a,method:a,data:a,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:o};return bs.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){const t=l[e]||i,r=t(e);bs.isUndefined(r)&&t!==o||(n[e]=r)})),n}const go={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{go[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const yo={};go.transitional=function(e,t,n){function r(e,t){return"[Axios v1.1.3] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,i,a)=>{if(!1===e)throw new ws(r(i," has been removed"+(t?" in "+t:"")),ws.ERR_DEPRECATED);return t&&!yo[i]&&(yo[i]=!0,console.warn(r(i," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,i,a)}};var vo={assertOptions:function(e,t,n){if("object"!=typeof e)throw new ws("options must be an object",ws.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let i=r.length;for(;i-- >0;){const a=r[i],s=t[a];if(s){const t=e[a],n=void 0===t||s(t,a,e);if(!0!==n)throw new ws("option "+a+" must be "+n,ws.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new ws("Unknown option "+a,ws.ERR_BAD_OPTION)}},validators:go};const bo=vo.validators;class ko{constructor(e){this.defaults=e,this.interceptors={request:new Ls,response:new Ls}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=mo(this.defaults,t);const{transitional:n,paramsSerializer:r}=t;void 0!==n&&vo.assertOptions(n,{silentJSONParsing:bo.transitional(bo.boolean),forcedJSONParsing:bo.transitional(bo.boolean),clarifyTimeoutError:bo.transitional(bo.boolean)},!1),void 0!==r&&vo.assertOptions(r,{encode:bo.function,serialize:bo.function},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase();const i=t.headers&&bs.merge(t.headers.common,t.headers[t.method]);i&&bs.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),t.headers=new no(t.headers,i);const a=[];let s=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(s=s&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const o=[];let l;this.interceptors.response.forEach((function(e){o.push(e.fulfilled,e.rejected)}));let c,u=0;if(!s){const e=[po.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,o),c=e.length,l=Promise.resolve(t);u<c;)l=l.then(e[u++],e[u++]);return l}c=a.length;let h=t;for(u=0;u<c;){const e=a[u++],t=a[u++];try{h=e(h)}catch(e){t.call(this,e);break}}try{l=po.call(this,h)}catch(e){return Promise.reject(e)}for(u=0,c=o.length;u<c;)l=l.then(o[u++],o[u++]);return l}getUri(e){return Ns(Gs((e=mo(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}bs.forEach(["delete","get","head","options"],(function(e){ko.prototype[e]=function(t,n){return this.request(mo(n||{},{method:e,url:t,data:(n||{}).data}))}})),bs.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,i){return this.request(mo(i||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}ko.prototype[e]=t(),ko.prototype[e+"Form"]=t(!0)}));var Eo=ko;class xo{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,i){n.reason||(n.reason=new Ws(e,r,i),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new xo((function(t){e=t})),cancel:e}}}var wo=xo;const So=function e(t){const n=new Eo(t),r=Ua(Eo.prototype.request,n);return bs.extend(r,Eo.prototype,n,{allOwnKeys:!0}),bs.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(mo(t,n))},r}(co);So.Axios=Eo,So.CanceledError=Ws,So.CancelToken=wo,So.isCancel=ho,So.VERSION="1.1.3",So.toFormData=As,So.AxiosError=ws,So.Cancel=So.CanceledError,So.all=function(e){return Promise.all(e)},So.spread=function(e){return function(t){return e.apply(null,t)}},So.isAxiosError=function(e){return bs.isObject(e)&&!0===e.isAxiosError},So.formToJSON=e=>js(bs.isHTMLForm(e)?new FormData(e):e);var Co=So;const{Axios:Po,AxiosError:_o,CanceledError:To,isCancel:Ao,CancelToken:Fo,VERSION:Mo,all:Do,Cancel:Io,isAxiosError:Ro,spread:No,toFormData:Lo}=Co;var Oo=Co;function zo(e,t,n){return new Promise(((r,i)=>{switch(e){case"get":console.log("begin a get request,and url:",t),function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new Promise(((n,r)=>{Oo.get(e,{params:t}).then((e=>{Vo(0,0,e.data),n(e.data)})).catch((e=>{r(e)}))}))}(t,n).then((function(e){r(e)})).catch((function(e){console.log("get request GET failed.",e),i(e)}));break;case"post":(function(e,t){return new Promise(((n,r)=>{Oo.post(e,t).then((e=>{n(e.data)}),(e=>{r(e)}))}))})(t,n).then((function(e){r(e)})).catch((function(e){console.log("get request POST failed.",e),i(e)}))}}))}function Vo(e,t,n){n.code}function Bo(e){return new Promise(((t,n)=>{zo("get","/getmd",e).then((e=>{t(e)}),(e=>{console.log("网络异常~",e),n(e)}))}))}Oo.defaults.timeout=1e5,Oo.defaults.baseURL=" http://120.48.85.51:7001",Oo.interceptors.request.use((e=>(e.data=JSON.stringify(e.data),e.headers={"Content-Type":"application/json"},e)),(e=>Promise.reject(e))),Oo.interceptors.response.use((e=>(2===e.data.errCode&&console.log("过期"),e)),(e=>{console.log("请求出错：",e)}));var $o=function(e){var t=new Date(Number(e)),n=t.getFullYear()+"-",r=(t.getMonth()+1<10?"0"+(t.getMonth()+1):t.getMonth()+1)+"-",i=t.getDate()+" ";return t.getHours(),t.getMinutes(),t.getSeconds(),n+r+i};const jo=[{img:"https://images.pexels.com/photos/13850240/pexels-photo-13850240.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",height:"300px"},{img:"https://images.pexels.com/photos/5633983/pexels-photo-5633983.jpeg?auto=compress&cs=tinysrgb&w=800",height:"200px"},{img:"https://images.pexels.com/photos/5633983/pexels-photo-5633983.jpeg?auto=compress&cs=tinysrgb&w=800",height:"200px"},{img:"https://images.pexels.com/photos/5633983/pexels-photo-5633983.jpeg?auto=compress&cs=tinysrgb&w=800",height:"200px"}];var Ho=()=>{const e=(0,i.useRef)(null),[t,n]=(0,i.useState)(0),[r,a]=(0,i.useState)(!0),[s,o]=(0,i.useState)(""),[l,c]=(0,i.useState)([]),u=A(),h=()=>i.createElement("svg",{viewBox:"0 0 1024 1024",width:"1em",height:"1em",fill:"currentColor"},i.createElement("path",{d:"M99.096 315.634s-82.58-64.032-82.58-132.13c0-66.064 33.032-165.162 148.646-148.646 83.37 11.91 99.096 165.162 99.096 165.162l-165.162 115.614zM924.906 315.634s82.58-64.032 82.58-132.13c0-66.064-33.032-165.162-148.646-148.646-83.37 11.91-99.096 165.162-99.096 165.162l165.162 115.614z",fill:"#6B676E"}),i.createElement("path",{d:"M1024 561.548c0 264.526-229.23 429.42-512.002 429.42S0 826.076 0 561.548 283.96 66.064 512.002 66.064 1024 297.022 1024 561.548z",fill:"#FFEBD2"}),i.createElement("path",{d:"M330.324 842.126c0 82.096 81.34 148.646 181.678 148.646s181.678-66.55 181.678-148.646H330.324z",fill:"#E9D7C3"}),i.createElement("path",{d:"M644.13 611.098C594.582 528.516 561.55 512 512.002 512c-49.548 0-82.58 16.516-132.13 99.096-42.488 70.814-78.73 211.264-49.548 247.742 66.064 82.58 165.162 33.032 181.678 33.032 16.516 0 115.614 49.548 181.678-33.032 29.18-36.476-7.064-176.93-49.55-247.74z",fill:"#FFFFFF"}),i.createElement("path",{d:"M611.098 495.484c0-45.608 36.974-82.58 82.58-82.58 49.548 0 198.194 99.098 198.194 165.162s-79.934 144.904-148.646 99.096c-49.548-33.032-132.128-148.646-132.128-181.678zM412.904 495.484c0-45.608-36.974-82.58-82.58-82.58-49.548 0-198.194 99.098-198.194 165.162s79.934 144.904 148.646 99.096c49.548-33.032 132.128-148.646 132.128-181.678z",fill:"#6B676E"}),i.createElement("path",{d:"M512.002 726.622c-30.06 0-115.614 5.668-115.614 33.032 0 49.638 105.484 85.24 115.614 82.58 10.128 2.66 115.614-32.944 115.614-82.58-0.002-27.366-85.556-33.032-115.614-33.032z",fill:"#464655"}),i.createElement("path",{d:"M330.324 495.484m-33.032 0a33.032 33.032 0 1 0 66.064 0 33.032 33.032 0 1 0-66.064 0Z",fill:"#464655"}),i.createElement("path",{d:"M693.678 495.484m-33.032 0a33.032 33.032 0 1 0 66.064 0 33.032 33.032 0 1 0-66.064 0Z",fill:"#464655"}));return setInterval((()=>{var t;null!=e&&null!==(t=e.current)&&void 0!==t&&t.currentTime&&n(e.current.currentTime/e.current.duration*100)}),1e3),(0,i.useEffect)((()=>{Bo({}).then((e=>{200===e.status&&(console.log(e.res),c(e.res))}))}),[]),i.createElement(i.Fragment,null,i.createElement("div",{className:"message",onClick:()=>{N()("id")?u("/message"):Va.error("请登录")}}),i.createElement("div",{className:"home-box"},i.createElement("div",{className:"home-img"}),i.createElement("div",{className:"home-title"},"JASMINES"),i.createElement("div",{className:"home-name"},i.createElement("div",{className:"home-hello"},"Hello World"),i.createElement("div",{className:"home-occupation"},"前端程序员"),i.createElement("div",{className:"home-occupation"},"本页面前端由构建react"),i.createElement("div",{className:"home-occupation"},"后端egg"),i.createElement("div",null)),i.createElement("div",{className:"new-book"},i.createElement("span",null,"最新文章"),i.createElement("em",null)),i.createElement("div",{className:"box"},i.createElement("div",{className:"list"},l.map(((e,t)=>{const n=e.tag.split(" ");return i.createElement("div",{className:"list-box",key:t,onClick:()=>(e=>{u(`/${e.id}`)})(e)},i.createElement("img",{src:e.img,alt:""}),i.createElement("div",{className:"list-title"},i.createElement("div",{className:"list-title-t"},e.title),i.createElement("div",{className:"list-desc"},e.text),n.map(((e,t)=>i.createElement("span",{className:"list-tag",key:t},e))),i.createElement("span",{className:"time"},$o(e.time))))}))),i.createElement("div",{className:"MY"},i.createElement("div",{className:"audio-box"},i.createElement("div",{className:"audio-name"},"我的音乐"),i.createElement("div",{className:"img"},i.createElement("div",{className:s},i.createElement("div",{className:"img-header"})),i.createElement("div",{className:"img-name"},i.createElement("div",null,"邓紫棋"),i.createElement("div",null,"多久都早在一起"),i.createElement("div",{className:"img-open"},i.createElement(ja,null),i.createElement("div",{onClick:()=>{a(!r),console.log(r),r?(o("from"),e.current.play()):(o(""),e.current.pause())}},i.createElement(h,null)),i.createElement(qa,null),i.createElement("audio",{preload:"auto",src:"https://www.xzmp3.com/down/e40cfb114b2f.mp3",controls:!0,ref:e})))),i.createElement("div",{className:"imgline"},i.createElement("span",{style:{width:t+"%"}}))),i.createElement("div",{className:"pic-name"},"MY相册"),i.createElement("div",{className:"pic"},null==jo?void 0:jo.map(((e,t)=>[i.createElement("img",{src:e.img,style:{height:e.height},alt:"",key:t})])))))))},Go=Object.defineProperty,qo=Object.defineProperties,Uo=Object.getOwnPropertyDescriptors,Wo=Object.getOwnPropertySymbols,Ko=Object.prototype.hasOwnProperty,Yo=Object.prototype.propertyIsEnumerable,Qo=(e,t,n)=>t in e?Go(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,Xo=(e,t)=>{for(var n in t||(t={}))Ko.call(t,n)&&Qo(e,n,t[n]);if(Wo)for(var n of Wo(t))Yo.call(t,n)&&Qo(e,n,t[n]);return e},Zo=(e,t)=>qo(e,Uo(t)),Jo=new class{constructor(){this.pools={}}remove(e,t,n){const r=this.pools[e]&&this.pools[e][t];r&&(this.pools[e][t]=r.filter((e=>e===n)))}clear(e){this.pools[e]={}}on(e,t){return this.pools[e]||(this.pools[e]={}),this.pools[e][t.name]||(this.pools[e][t.name]=[]),this.pools[e][t.name].push(t.callback),this.pools[e][t.name].includes(t.callback)}emit(e,t,...n){this.pools[e]||(this.pools[e]={});const r=this.pools[e][t];r&&r.forEach((e=>{try{e(...n)}catch(e){console.error(`${t} monitor event exception！`,e)}}))}};const el="md",tl="md-editor-rt",nl="https://cdnjs.cloudflare.com/ajax/libs",rl=`${nl}/highlight.js/11.5.1/highlight.min.js`,il={main:`${nl}/prettier/2.4.0/standalone.js`,markdown:`${nl}/prettier/2.4.0/parser-markdown.js`},al={css:`${nl}/cropperjs/1.5.12/cropper.min.css`,js:`${nl}/cropperjs/1.5.12/cropper.min.js`},sl=`${nl}/screenfull.js/5.1.0/screenfull.min.js`,ol=["bold","underline","italic","strikeThrough","-","title","sub","sup","quote","unorderedList","orderedList","-","codeRow","code","link","image","table","mermaid","katex","-","revoke","next","save","=","prettier","pageFullscreen","fullscreen","preview","htmlPreview","catalog","github"],ll=["markdownTotal","=","scrollSwitch"],cl={"zh-CN":{toolbarTips:{bold:"加粗",underline:"下划线",italic:"斜体",strikeThrough:"删除线",title:"标题",sub:"下标",sup:"上标",quote:"引用",unorderedList:"无序列表",orderedList:"有序列表",codeRow:"行内代码",code:"块级代码",link:"链接",image:"图片",table:"表格",mermaid:"mermaid图",katex:"katex公式",revoke:"后退",next:"前进",save:"保存",prettier:"美化",pageFullscreen:"浏览器全屏",fullscreen:"屏幕全屏",preview:"预览",htmlPreview:"html代码预览",catalog:"目录",github:"源码地址"},titleItem:{h1:"一级标题",h2:"二级标题",h3:"三级标题",h4:"四级标题",h5:"五级标题",h6:"六级标题"},imgTitleItem:{link:"添加链接",upload:"上传图片",clip2upload:"裁剪上传"},linkModalTips:{title:"添加",descLable:"链接描述：",descLablePlaceHolder:"请输入描述...",urlLable:"链接地址：",UrlLablePlaceHolder:"请输入链接...",buttonOK:"确定"},clipModalTips:{title:"裁剪图片上传",buttonUpload:"上传"},copyCode:{text:"复制代码",successTips:"已复制！",failTips:"复制失败！"},mermaid:{flow:"流程图",sequence:"时序图",gantt:"甘特图",class:"类图",state:"状态图",pie:"饼图",relationship:"关系图",journey:"旅程图"},katex:{inline:"行内公式",block:"块级公式"},footer:{markdownTotal:"字数",scrollAuto:"同步滚动"}},"en-US":{toolbarTips:{bold:"bold",underline:"underline",italic:"italic",strikeThrough:"strikeThrough",title:"title",sub:"subscript",sup:"superscript",quote:"quote",unorderedList:"unordered list",orderedList:"ordered list",codeRow:"inline code",code:"block-level code",link:"link",image:"image",table:"table",mermaid:"mermaid",katex:"formula",revoke:"revoke",next:"undo revoke",save:"save",prettier:"prettier",pageFullscreen:"fullscreen in page",fullscreen:"fullscreen",preview:"preview",htmlPreview:"html preview",catalog:"catalog",github:"source code"},titleItem:{h1:"Lv1 Heading",h2:"Lv2 Heading",h3:"Lv3 Heading",h4:"Lv4 Heading",h5:"Lv5 Heading",h6:"Lv6 Heading"},imgTitleItem:{link:"Add Img Link",upload:"Upload Img",clip2upload:"Clip Upload"},linkModalTips:{title:"Add ",descLable:"Desc:",descLablePlaceHolder:"Enter a description...",urlLable:"Link:",UrlLablePlaceHolder:"Enter a link...",buttonOK:"OK"},clipModalTips:{title:"Crop Image",buttonUpload:"Upload"},copyCode:{text:"Copy",successTips:"Copied!",failTips:"Copy failed!"},mermaid:{flow:"flow",sequence:"sequence",gantt:"gantt",class:"class",state:"state",pie:"pie",relationship:"relationship",journey:"journey"},katex:{inline:"inline",block:"block"},footer:{markdownTotal:"Word Count",scrollAuto:"Scroll Auto"}}},ul=`${nl}/mermaid/8.13.5/mermaid.min.js`,hl={js:`${nl}/KaTeX/0.15.1/katex.min.js`,css:`${nl}/KaTeX/0.15.1/katex.min.css`},fl={a11y:{light:`${nl}/highlight.js/11.5.1/styles/a11y-light.min.css`,dark:`${nl}/highlight.js/11.5.1/styles/a11y-dark.min.css`},atom:{light:`${nl}/highlight.js/11.5.1/styles/atom-one-light.min.css`,dark:`${nl}/highlight.js/11.5.1/styles/atom-one-dark.min.css`},github:{light:`${nl}/highlight.js/11.5.1/styles/github.min.css`,dark:`${nl}/highlight.js/11.5.1/styles/github-dark.min.css`},gradient:{light:`${nl}/highlight.js/11.5.1/styles/gradient-light.min.css`,dark:`${nl}/highlight.js/11.5.1/styles/gradient-dark.min.css`},kimbie:{light:`${nl}/highlight.js/11.5.1/styles/kimbie-light.min.css`,dark:`${nl}/highlight.js/11.5.1/styles/kimbie-dark.min.css`},paraiso:{light:`${nl}/highlight.js/11.5.1/styles/paraiso-light.min.css`,dark:`${nl}/highlight.js/11.5.1/styles/paraiso-dark.min.css`},qtcreator:{light:`${nl}/highlight.js/11.5.1/styles/qtcreator-light.min.css`,dark:`${nl}/highlight.js/11.5.1/styles/qtcreator-dark.min.css`},stackoverflow:{light:`${nl}/highlight.js/11.5.1/styles/stackoverflow-light.min.css`,dark:`${nl}/highlight.js/11.5.1/styles/stackoverflow-dark.min.css`}},pl={modelValue:"",theme:"light",className:"",toolbars:ol,toolbarsExclude:[],defToolbars:[],previewOnly:!1,editorId:tl,tabWidth:2,historyLength:10,showCodeRowNumber:!1,previewTheme:"default",noPrettier:!1,tableShape:[6,4],noMermaid:!1,noKatex:!1,placeholder:"",onChange:()=>{},onHtmlChanged:()=>{},onGetCatalog:()=>{},sanitize:e=>e,onError:()=>{},markedHeadingId:e=>e,footers:ll,defFooters:[]},dl={markedRenderer:e=>e,markedExtensions:[],markedOptions:{},editorExtensions:{},editorConfig:{}},ml=(e,t=0,n=t)=>new Promise(((r,i)=>{e.setSelectionRange?setTimeout((()=>{e.setSelectionRange(t,n),e.focus(),r(!0)}),0):(console.error("Can not reset position!"),i())})),gl=(e,t,n)=>{const{deviationStart:r=0,deviationEnd:i=0,direct:a=!1,select:s=!1}=n;let o="";if(e.selectionStart||0===e.selectionStart){const a=e.selectionStart,l=e.selectionEnd||0,{prefixVal:c=e.value.substring(0,a),subfixVal:u=e.value.substring(l,e.value.length)}=n;o=c+t+u,ml(e,s?a+r:a+t.length+i,a+t.length+i)}else o+=t;return a&&(e.value=o),o},yl=(e,t)=>{const n=kl((()=>{e.removeEventListener("scroll",r),e.addEventListener("scroll",r),t.removeEventListener("scroll",r),t.addEventListener("scroll",r)}),50),r=i=>{const a=e.clientHeight,s=t.clientHeight,o=(e.scrollHeight-a)/(t.scrollHeight-s);i.target===e?(t.removeEventListener("scroll",r),t.scrollTo({top:e.scrollTop/o}),n()):(e.removeEventListener("scroll",r),e.scrollTo({top:t.scrollTop*o}),n())};return[n,()=>{e.removeEventListener("scroll",r),t.removeEventListener("scroll",r)}]},vl=(e,t="image.png")=>{const n=e.split(","),r=n[0].match(/:(.*?);/);if(r){const e=r[1],i=atob(n[1]);let a=i.length;const s=new Uint8Array(a);for(;a--;)s[a]=i.charCodeAt(a);return new File([s],t,{type:e})}return null},bl=e=>{if(!e.trim())return e;const t=e.split("\n"),n=['<span rn-wrapper aria-hidden="true">'];return t.forEach((()=>{n.push("<span></span>")})),n.push("</span>"),`<span class="code-block">${e}</span>${n.join("")}`},kl=(e,t=200)=>{let n=0;return(...r)=>{n&&clearTimeout(n),n=window.setTimeout((()=>{e.apply(globalThis,r),n=0}),t)}},El=(e,t="$")=>{const n=e.split(t);let r=t,i="";for(let e=1;e<n.length;e++){if(!/\\$/.test(n[e])){r+=n[e]+t,i+=n[e];break}r+=n[e]+"$",i+=n[e]+"$"}return[r,i]},xl=e=>e.filter((e=>!1!==e)).join(" "),wl=(e,t="")=>{const n=document.getElementById(e.id);n?""!==t&&e.onload instanceof Function&&(Reflect.get(window,t)?e.onload(new Event("load")):n.addEventListener("load",e.onload)):document.head.appendChild(e)},Sl=kl(((e,t,n)=>{const r=document.getElementById(e);r&&r.setAttribute(t,n)}),10);let Cl="";var Pl=()=>i.createElement("div",{className:"md-divider"});const _l="md-dropdown-hidden",Tl=e=>{const[t,n]=(0,i.useState)({overlayClass:_l,overlayStyle:{}}),r=(0,i.useRef)({triggerHover:!1,overlayHover:!1}),a=(0,i.useRef)(null),s=(0,i.useRef)(null),o=()=>{var t;"hover"===e.trigger&&(r.current.triggerHover=!0);const i=a.current,o=s.current,l=i.getBoundingClientRect(),c=i.offsetTop,u=i.offsetLeft,h=l.height,f=l.width,p=(null==(t=document.querySelector(e.relative))?void 0:t.scrollLeft)||0;n((e=>Zo(Xo({},e),{overlayStyle:{top:c+h+"px",left:u-o.offsetWidth/2+f/2-p+"px"}}))),e.onChange(!0)},l=()=>{r.current.overlayHover=!0};(0,i.useEffect)((()=>{e.visible?n((e=>Zo(Xo({},e),{overlayClass:""}))):n((e=>Zo(Xo({},e),{overlayClass:_l})))}),[e.visible]);const c=t=>{const n=a.current,r=s.current;n.contains(t.target)||r.contains(t.target)||e.onChange(!1)},u=(0,i.useRef)(-1),h=t=>{a.current===t.target?r.current.triggerHover=!1:r.current.overlayHover=!1,clearTimeout(u.current),u.current=window.setTimeout((()=>{r.current.overlayHover||r.current.triggerHover||e.onChange(!1)}),10)};(0,i.useEffect)((()=>("click"===e.trigger?(a.current.addEventListener("click",o),document.addEventListener("click",c)):(a.current.addEventListener("mouseenter",o),a.current.addEventListener("mouseleave",h),s.current.addEventListener("mouseenter",l),s.current.addEventListener("mouseleave",h)),()=>{"click"===e.trigger&&a.current?(a.current.removeEventListener("click",o),document.removeEventListener("click",c)):(a.current&&(a.current.removeEventListener("mouseenter",o),a.current.removeEventListener("mouseleave",h)),s.current&&(s.current.removeEventListener("mouseenter",l),s.current.removeEventListener("mouseleave",h)))})),[]);const f=e.children,p=e.overlay,d=(0,i.cloneElement)(f,{ref:a}),m=i.createElement("div",{className:`md-dropdown ${t.overlayClass}`,style:t.overlayStyle,ref:s},i.createElement("div",{className:"md-dropdown-overlay"},p instanceof Array?p[0]:p));return i.createElement(i.Fragment,null,d,m)};Tl.defaultProps={trigger:"hover",relative:"html"};const Al=e=>{const{onClose:t=(()=>{})}=e,[n,r]=(0,i.useState)(e.visible),[a,s]=(0,i.useState)(["md-modal"]),o=(0,i.useRef)(null),l=(0,i.useRef)(null),[c,u]=(0,i.useState)({initPos:{left:"0px",top:"0px"},historyPos:{left:"0px",top:"0px"}}),h=(0,i.useMemo)((()=>e.isFullscreen?{width:"100%",height:"100%"}:{width:e.width,height:e.height}),[e.isFullscreen]),[f,p]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{let t=()=>{};return e.isFullscreen||(t=((e,t)=>{const n=n=>{const r=e.parentElement||document.body,i=r.offsetWidth,a=r.offsetHeight,s=document.documentElement.clientWidth,o=document.documentElement.clientHeight,l=n.offsetX,c=n.offsetY,u=e=>{let n=e.x+document.body.scrollLeft-document.body.clientLeft-l,u=e.y+document.body.scrollTop-document.body.clientTop-c;n=n<1?1:n<s-i-1?n:s-i-1,u=u<1?1:u<o-a-1?u:o-a-1,t?t(n,u):(r.style.left=n+"px",r.style.top=u+"px")};document.addEventListener("mousemove",u);const h=()=>{document.removeEventListener("mousemove",u),document.removeEventListener("mouseup",h)};document.addEventListener("mouseup",h)};return e.addEventListener("mousedown",n),()=>{e.removeEventListener("mousedown",n)}})(l.current,((e,t)=>{u(Zo(Xo({},c),{initPos:{left:e+"px",top:t+"px"}}))}))),t}),[f,e.isFullscreen]),(0,i.useEffect)((()=>{if(n){const e=o.current.offsetWidth/2,t=o.current.offsetHeight/2,n=document.documentElement.clientWidth/2,r=document.documentElement.clientHeight/2;u(Zo(Xo({},c),{initPos:{left:n-e+"px",top:r-t+"px"}})),!f&&p(!0)}}),[n]),(0,i.useEffect)((()=>{const t=e.visible;t?(s((()=>["md-modal","zoom-in"])),r(t)):f&&(s((()=>["md-modal","zoom-out"])),setTimeout((()=>{r(t)}),150))}),[e.visible]),i.createElement("div",{style:{display:n?"block":"none"}},i.createElement("div",{className:"md-modal-mask",onClick:t}),i.createElement("div",{className:a.join(" "),style:Xo(Xo({},c.initPos),h),ref:o},i.createElement("div",{className:"md-modal-header",ref:l},e.title||""),i.createElement("div",{className:"md-modal-func"},e.showAdjust&&i.createElement("div",{className:"md-modal-adjust",onClick:t=>{t.stopPropagation(),e.isFullscreen?u((e=>Zo(Xo({},e),{initPos:e.historyPos}))):u((e=>({historyPos:e.initPos,initPos:{left:"0",top:"0"}}))),e.onAdjust(!e.isFullscreen)}},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-"+(e.isFullscreen?"suoxiao":"fangda")}))),i.createElement("div",{className:"md-modal-close",onClick:t=>{t.stopPropagation(),e.onClose&&e.onClose()}},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-close"})))),i.createElement("div",{className:"md-modal-body"},e.children)))};Al.defaultProps={onAdjust(){}};const Fl=e=>{const{editorId:t,usedLanguageText:n}=(0,i.useContext)(Gc),r=(0,i.useMemo)((()=>{var t,r,i,a;switch(e.type){case"link":return`${null==(t=n.linkModalTips)?void 0:t.title}${null==(r=n.toolbarTips)?void 0:r.link}`;case"image":return`${null==(i=n.linkModalTips)?void 0:i.title}${null==(a=n.toolbarTips)?void 0:a.image}`;default:return""}}),[e.type,n]),[a,s]=(0,i.useState)({desc:"",url:""});return(0,i.useEffect)((()=>{e.visible||setTimeout((()=>{s({desc:"",url:""})}),200)}),[e.visible]),(0,i.useMemo)((()=>{var o,l,c,u,h;return i.createElement(Al,{title:r,visible:e.visible,onClose:e.onCancel},i.createElement("div",{className:"md-form-item"},i.createElement("label",{className:"md-lable",htmlFor:`link-desc-${t}`},null==(o=n.linkModalTips)?void 0:o.descLable),i.createElement("input",{placeholder:null==(l=n.linkModalTips)?void 0:l.descLablePlaceHolder,className:"md-input",id:`link-desc-${t}`,type:"text",value:a.desc,onChange:e=>{s((t=>Zo(Xo({},t),{desc:e.target.value})))}})),i.createElement("div",{className:"md-form-item"},i.createElement("label",{className:"md-lable",htmlFor:`link-url-${t}`},null==(c=n.linkModalTips)?void 0:c.urlLable),i.createElement("input",{placeholder:null==(u=n.linkModalTips)?void 0:u.UrlLablePlaceHolder,className:"md-input",id:`link-url-${t}`,type:"text",value:a.url,onChange:e=>{s((t=>Zo(Xo({},t),{url:e.target.value})))}})),i.createElement("div",{className:"md-form-item"},i.createElement("button",{className:"md-btn md-btn-row",type:"button",onClick:()=>{e.onOk(a),s((e=>Zo(Xo({},e),{desc:"",url:""})))}},null==(h=n.linkModalTips)?void 0:h.buttonOK)))}),[r,e.visible,a.desc,a.url,t,n])};let Ml=null;const Dl=e=>{var t,n;const r=(0,i.useContext)(Gc),{editorId:a,usedLanguageText:s}=r,o=null==(n=null==(t=dl.editorExtensions)?void 0:t.cropper)?void 0:n.instance,l=(0,i.useRef)(null),c=(0,i.useRef)(null),u=(0,i.useRef)(null),[h,f]=(0,i.useState)({cropperInited:!1,imgSelected:!1,imgSrc:"",isFullscreen:!1});(0,i.useEffect)((()=>{e.visible&&!h.cropperInited&&(window.Cropper=o||window.Cropper,l.current.onchange=()=>{if(!window.Cropper)return void Jo.emit(a,"errorCatcher",{name:"Cropper",message:"Cropper is undefined"});const e=l.current.files||[];if((null==e?void 0:e.length)>0){const t=new FileReader;t.onload=e=>{f((t=>Zo(Xo({},t),{imgSelected:!0,imgSrc:e.target.result})))},t.readAsDataURL(e[0])}})}),[e.visible,h.cropperInited]),(0,i.useEffect)((()=>{h.imgSrc&&(Ml=new window.Cropper(c.current,{viewMode:2,preview:".md-clip-preview-target"}))}),[h.imgSrc]),(0,i.useEffect)((()=>{var e;null==(e=u.current)||e.setAttribute("style","")}),[h.imgSelected]),(0,i.useEffect)((()=>{var e;null==Ml||Ml.destroy(),null==(e=u.current)||e.setAttribute("style",""),c.current&&(Ml=new window.Cropper(c.current,{viewMode:2,preview:".md-clip-preview-target"}))}),[h.isFullscreen]);const p=(0,i.useMemo)((()=>h.isFullscreen?{width:"100%",height:"100%"}:{width:"668px",height:"392px"}),[h.isFullscreen]),d=()=>{Ml.destroy(),l.current.value="",f((e=>Zo(Xo({},e),{imgSrc:"",imgSelected:!1})))},m=(0,i.useCallback)((e=>{f((t=>Zo(Xo({},t),{isFullscreen:e})))}),[]);return(0,i.useMemo)((()=>{var t,n;return i.createElement(Al,Xo({title:null==(t=s.clipModalTips)?void 0:t.title,visible:e.visible,onClose:e.onCancel,showAdjust:!0,isFullscreen:h.isFullscreen,onAdjust:m},p),i.createElement("div",{className:"md-form-item md-clip"},i.createElement("div",{className:"md-clip-main"},h.imgSelected?i.createElement("div",{className:"md-clip-cropper"},i.createElement("img",{src:h.imgSrc,ref:c,style:{display:"none"}}),i.createElement("div",{className:"md-clip-delete",onClick:d},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-delete"})))):i.createElement("div",{className:"md-clip-upload",onClick:()=>{l.current.click()}},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-upload"})))),i.createElement("div",{className:"md-clip-preview"},i.createElement("div",{className:"md-clip-preview-target",ref:u}))),i.createElement("div",{className:"md-form-item"},i.createElement("button",{className:"md-btn",type:"button",onClick:()=>{const t=Ml.getCroppedCanvas();Jo.emit(a,"uploadImage",[vl(t.toDataURL("image/png"))],e.onOk),d()}},null==(n=s.linkModalTips)?void 0:n.buttonOK)),i.createElement("input",{ref:l,accept:"image/*",type:"file",multiple:!1,style:{display:"none"}}))}),[s,e.visible,h.imgSrc,h.imgSelected,h.isFullscreen])},Il=e=>i.createElement(i.Fragment,null,i.createElement(Fl,{type:e.type,visible:e.linkVisible,onOk:e.onOk,onCancel:e.onCancel}),i.createElement(Dl,{visible:e.clipVisible,onOk:e.onOk,onCancel:e.onCancel})),Rl=e=>{const[t,n]=(0,i.useState)({x:-1,y:-1});return i.createElement("div",{className:"md-table-shape",onMouseLeave:()=>{n({x:-1,y:-1})}},new Array(e.tableShape[1]).fill("").map(((r,a)=>i.createElement("div",{className:"md-table-shape-row",key:`table-shape-row-${a}`},new Array(e.tableShape[0]).fill("").map(((r,s)=>i.createElement("div",{className:"md-table-shape-col",key:`table-shape-col-${s}`,onMouseEnter:()=>{n({x:a,y:s})},onClick:()=>{e.onSelected(t)}},i.createElement("div",{className:["md-table-shape-col-default",a<=t.x&&s<=t.y&&"md-table-shape-col-include"].filter((e=>!!e)).join(" ")}))))))))};let Nl=0;var Ll=i.memo((e=>{const{toolbars:t,toolbarsExclude:n,setting:r,updateSetting:a}=e,{editorId:s,usedLanguageText:o}=(0,i.useContext)(Gc),l=o,[c]=(0,i.useState)((()=>`${s}-toolbar-wrapper`)),u=(0,i.useRef)(null),h=(0,i.useCallback)(((e,t)=>{Jo.emit(s,"replace",e,t)}),[]),{fullScreenHandler:f}=(e=>{var t;const{previewOnly:n,editorId:r}=(0,i.useContext)(Gc),a=null==(t=dl.editorExtensions)?void 0:t.screenfull;let s=null==a?void 0:a.instance;const o=(0,i.useRef)(!1),l=(0,i.useCallback)((()=>{s?s.isEnabled?(o.current=!0,s.isFullscreen?s.exit():s.request()):console.error("browser does not support screenfull!"):Jo.emit(r,"errorCatcher",{name:"fullScreen",message:"fullScreen is undefined"})}),[s]),c=()=>{s=window.screenfull,s&&s.isEnabled&&s.on("change",(()=>{e.updateSetting("fullscreen",o.current),o.current&&(o.current=!1)}))};return(0,i.useEffect)((()=>{let t;n||s||(t=document.createElement("script"),t.src=(null==a?void 0:a.js)||sl,t.onload=c,t.id="md-screenfull",wl(t,"screenfull")),!n&&s&&s.isEnabled&&s.on("change",(()=>{e.updateSetting("fullscreen",o.current),o.current&&(o.current=!1)}))}),[]),{fullScreenHandler:l}})(e),{modalData:p,setModalData:d,onCancel:m,onOk:g}=((e,t)=>{const{editorId:n}=(0,i.useContext)(Gc),[r,a]=(0,i.useState)({type:"link",linkVisible:!1,clipVisible:!1}),s=(0,i.useCallback)((()=>{a((e=>Zo(Xo({},e),{linkVisible:!1,clipVisible:!1})))}),[]),o=(0,i.useCallback)((e=>{e&&t(r.type,{desc:e.desc,url:e.url}),s()}),[r.type]);return(0,i.useEffect)((()=>{Jo.on(n,{name:"openModals",callback(e){a(Zo(Xo({},r),{type:e,linkVisible:!0}))}}),e.current.addEventListener("change",(()=>{Jo.emit(n,"uploadImage",Array.from(e.current.files||[])),e.current.value=""}))}),[]),{modalData:r,setModalData:a,onCancel:s,onOk:o}})(u,h),{visible:y,onTitleChange:v,onTitleClose:b,onImageChange:k,onImageClose:E,onTableChange:x,onTableSelected:w,onMermaidChange:S,onMermaidClose:C,onKatexChange:P,onKatexClose:_}=(e=>{const[t,n]=(0,i.useState)({title:!1,catalog:!1,image:!1,table:!1,mermaid:!1,katex:!1});return{visible:t,onTitleChange:(0,i.useCallback)((e=>{n((t=>Zo(Xo({},t),{title:e})))}),[]),onTitleClose:(0,i.useCallback)((()=>{n((e=>Zo(Xo({},e),{title:!1})))}),[]),onImageChange:(0,i.useCallback)((e=>{n((t=>Zo(Xo({},t),{image:e})))}),[]),onImageClose:(0,i.useCallback)((()=>{n((e=>Zo(Xo({},e),{image:!1})))}),[]),onTableChange:(0,i.useCallback)((e=>{n((t=>Zo(Xo({},t),{table:e})))}),[]),onTableSelected:(0,i.useCallback)((t=>{e("table",{selectedShape:t})}),[]),onMermaidChange:(0,i.useCallback)((e=>{n((t=>Zo(Xo({},t),{mermaid:e})))}),[]),onMermaidClose:(0,i.useCallback)((()=>{n((e=>Zo(Xo({},e),{mermaid:!1})))}),[]),onKatexChange:(0,i.useCallback)((e=>{n((t=>Zo(Xo({},t),{katex:e})))}),[]),onKatexClose:(0,i.useCallback)((()=>{n((e=>Zo(Xo({},e),{katex:!1})))}),[])}})(h),T=(0,i.useMemo)((()=>{var e,t,n,r,a,s,o;return i.createElement(Tl,{relative:`#${c}`,visible:y.title,onChange:v,overlay:i.createElement("ul",{className:"md-menu",onClick:b},i.createElement("li",{className:"md-menu-item",onClick:()=>{h("h1")}},null==(e=l.titleItem)?void 0:e.h1),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("h2")}},null==(t=l.titleItem)?void 0:t.h2),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("h3")}},null==(n=l.titleItem)?void 0:n.h3),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("h4")}},null==(r=l.titleItem)?void 0:r.h4),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("h5")}},null==(a=l.titleItem)?void 0:a.h5),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("h6")}},null==(s=l.titleItem)?void 0:s.h6)),key:"bar-title"},i.createElement("div",{className:"md-toolbar-item",title:null==(o=l.toolbarTips)?void 0:o.title},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-title"}))))}),[l,y.title,v,b]),A=(0,i.useMemo)((()=>{var e,t,n,r;return i.createElement(Tl,{relative:`#${c}`,visible:y.image,onChange:k,overlay:i.createElement("ul",{className:"md-menu",onClick:E},i.createElement("li",{className:"md-menu-item",onClick:()=>{d((e=>Zo(Xo({},e),{type:"image",linkVisible:!0})))}},null==(e=l.imgTitleItem)?void 0:e.link),i.createElement("li",{className:"md-menu-item",onClick:()=>{u.current.click()}},null==(t=l.imgTitleItem)?void 0:t.upload),i.createElement("li",{className:"md-menu-item",onClick:()=>{d(Zo(Xo({},p),{type:"image",clipVisible:!0}))}},null==(n=l.imgTitleItem)?void 0:n.clip2upload)),key:"bar-image"},i.createElement("div",{className:"md-toolbar-item",title:null==(r=l.toolbarTips)?void 0:r.image},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-image"}))))}),[l,y.image,k,E]),F=(0,i.useMemo)((()=>{var t;return i.createElement(Tl,{relative:`#${c}`,visible:y.table,onChange:x,key:"bar-table",overlay:i.createElement(Rl,{tableShape:e.tableShape,onSelected:w})},i.createElement("div",{className:"md-toolbar-item",title:null==(t=l.toolbarTips)?void 0:t.table},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-table"}))))}),[l,y.table,e.tableShape,x,w]),M=(0,i.useMemo)((()=>{var e,t,n,r,a,s,o,u,f;return i.createElement(Tl,{relative:`#${c}`,visible:y.mermaid,onChange:S,overlay:i.createElement("ul",{className:"md-menu",onClick:C},i.createElement("li",{className:"md-menu-item",onClick:()=>{h("flow")}},null==(e=l.mermaid)?void 0:e.flow),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("sequence")}},null==(t=l.mermaid)?void 0:t.sequence),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("gantt")}},null==(n=l.mermaid)?void 0:n.gantt),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("class")}},null==(r=l.mermaid)?void 0:r.class),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("state")}},null==(a=l.mermaid)?void 0:a.state),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("pie")}},null==(s=l.mermaid)?void 0:s.pie),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("relationship")}},null==(o=l.mermaid)?void 0:o.relationship),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("journey")}},null==(u=l.mermaid)?void 0:u.journey)),key:"bar-mermaid"},i.createElement("div",{className:"md-toolbar-item",title:null==(f=l.toolbarTips)?void 0:f.mermaid},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-mermaid"}))))}),[l,y.mermaid,S,C]),D=(0,i.useMemo)((()=>{var e,t,n;return i.createElement(Tl,{relative:`#${c}`,visible:y.katex,onChange:P,overlay:i.createElement("ul",{className:"md-menu",onClick:_},i.createElement("li",{className:"md-menu-item",onClick:()=>{h("katexInline")}},null==(e=l.katex)?void 0:e.inline),i.createElement("li",{className:"md-menu-item",onClick:()=>{h("katexBlock")}},null==(t=l.katex)?void 0:t.block)),key:"bar-katex"},i.createElement("div",{className:"md-toolbar-item",title:null==(n=l.toolbarTips)?void 0:n.katex},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-formula"}))))}),[l,y.katex,P,_]),I=(0,i.useCallback)((t=>{var n,o,c,u,m,g,y,v,b,k,E,x,w,S,C,P,_,I,R,N,L,O;if(!ol.includes(t))return e.defToolbars&&e.defToolbars instanceof Array&&e.defToolbars[t]||"";switch(t){case"-":return i.createElement(Pl,{key:"bar-"+Nl++});case"bold":return i.createElement("div",{className:"md-toolbar-item",title:null==(n=l.toolbarTips)?void 0:n.bold,onClick:()=>{h("bold")},key:"bar-bold"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-bold"})));case"underline":return i.createElement("div",{className:"md-toolbar-item",title:null==(o=l.toolbarTips)?void 0:o.underline,onClick:()=>{h("underline")},key:"bar-underline"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-underline"})));case"italic":return i.createElement("div",{className:"md-toolbar-item",title:null==(c=l.toolbarTips)?void 0:c.italic,onClick:()=>{h("italic")},key:"bar-italic"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-italic"})));case"strikeThrough":return i.createElement("div",{className:"md-toolbar-item",title:null==(u=l.toolbarTips)?void 0:u.strikeThrough,onClick:()=>{h("strikeThrough")},key:"bar-strikeThrough"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-strike-through"})));case"title":return T;case"sub":return i.createElement("div",{className:"md-toolbar-item",title:null==(m=l.toolbarTips)?void 0:m.sub,onClick:()=>{h("sub")},key:"bar-sub"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-sub"})));case"sup":return i.createElement("div",{className:"md-toolbar-item",title:null==(g=l.toolbarTips)?void 0:g.sup,onClick:()=>{h("sup")},key:"bar-sup"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-sup"})));case"quote":return i.createElement("div",{className:"md-toolbar-item",title:null==(y=l.toolbarTips)?void 0:y.quote,onClick:()=>{h("quote")},key:"bar-quote"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-quote"})));case"unorderedList":return i.createElement("div",{className:"md-toolbar-item",title:null==(v=l.toolbarTips)?void 0:v.unorderedList,onClick:()=>{h("unorderedList")},key:"bar-unorderedList"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-unordered-list"})));case"orderedList":return i.createElement("div",{className:"md-toolbar-item",title:null==(b=l.toolbarTips)?void 0:b.orderedList,onClick:()=>{h("orderedList")},key:"bar-orderedList"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-ordered-list"})));case"codeRow":return i.createElement("div",{className:"md-toolbar-item",title:null==(k=l.toolbarTips)?void 0:k.codeRow,onClick:()=>{h("codeRow")},key:"bar-codeRow"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-code-row"})));case"code":return i.createElement("div",{className:"md-toolbar-item",title:null==(E=l.toolbarTips)?void 0:E.code,onClick:()=>{h("code")},key:"bar-code"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-code"})));case"link":return i.createElement("div",{className:"md-toolbar-item",title:null==(x=l.toolbarTips)?void 0:x.link,onClick:()=>{d(Zo(Xo({},p),{type:"link",linkVisible:!0}))},key:"bar-link"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-link"})));case"image":return A;case"table":return F;case"revoke":return i.createElement("div",{className:"md-toolbar-item",title:null==(w=l.toolbarTips)?void 0:w.revoke,onClick:()=>{Jo.emit(s,"ctrlZ")},key:"bar-revoke"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-revoke"})));case"next":return i.createElement("div",{className:"md-toolbar-item",title:null==(S=l.toolbarTips)?void 0:S.next,onClick:()=>{Jo.emit(s,"ctrlShiftZ")},key:"bar-next"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-next"})));case"save":return i.createElement("div",{className:"md-toolbar-item",title:null==(C=l.toolbarTips)?void 0:C.save,onClick:()=>{Jo.emit(s,"onSave")},key:"bar-save"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-baocun"})));case"prettier":return e.noPrettier?"":i.createElement("div",{className:"md-toolbar-item",title:null==(P=l.toolbarTips)?void 0:P.prettier,onClick:()=>{h("prettier")},key:"bar-prettier"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-prettier"})));case"pageFullscreen":return!r.fullscreen&&i.createElement("div",{className:"md-toolbar-item",title:null==(_=l.toolbarTips)?void 0:_.pageFullscreen,onClick:()=>{a("pageFullScreen")},key:"bar-pageFullscreen"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-"+(r.pageFullScreen?"suoxiao":"fangda")})));case"fullscreen":return i.createElement("div",{className:"md-toolbar-item",title:null==(I=l.toolbarTips)?void 0:I.fullscreen,onClick:f,key:"bar-fullscreen"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-"+(r.fullscreen?"fullScreen-exit":"fullScreen")})));case"catalog":return i.createElement("div",{className:"md-toolbar-item",title:null==(R=l.toolbarTips)?void 0:R.catalog,onClick:()=>{Jo.emit(s,"catalogShow")},key:"bar-catalog"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-catalog"})));case"preview":return i.createElement("div",{className:"md-toolbar-item",title:null==(N=l.toolbarTips)?void 0:N.preview,onClick:()=>{a("preview")},key:"bar-preview"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-preview"})));case"htmlPreview":return i.createElement("div",{className:"md-toolbar-item",title:null==(L=l.toolbarTips)?void 0:L.htmlPreview,onClick:()=>{a("htmlPreview")},key:"bar-htmlPreview"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-coding"})));case"github":return i.createElement("div",{className:"md-toolbar-item",title:null==(O=l.toolbarTips)?void 0:O.github,onClick:()=>((e,t={newWindow:!0,nofollow:!0})=>{e||console.warn("Invalid link！");const n=document.createElement("a");n.href=e,n.style.display="none",t.newWindow&&(n.target="_blank"),t.nofollow&&(n.rel="noopener noreferrer"),document.body.appendChild(n),n.click(),n.remove()})("https://github.com/imzbf/md-editor-rt"),key:"bar-github"},i.createElement("svg",{className:"md-icon","aria-hidden":"true"},i.createElement("use",{xlinkHref:"#icon-github"})));case"mermaid":return M;case"katex":return D}}),[e.defToolbars,l,y,r.pageFullScreen,r.fullscreen]),R=(0,i.useMemo)((()=>{const e=t.filter((e=>!n.includes(e))),r=e.indexOf("="),i=-1===r?e:e.slice(0,r+1),a=-1===r?[]:e.slice(r,Number.MAX_SAFE_INTEGER);return[i.map((e=>I(e))),a.map((e=>I(e)))]}),[t,n,I]);return i.createElement("div",{className:"md-toolbar-wrapper",id:c},i.createElement("div",{className:"md-toolbar",onMouseEnter:()=>{Jo.emit(s,"selectTextChange")}},i.createElement("div",{className:"md-toolbar-left"},R[0]),i.createElement("div",{className:"md-toolbar-right"},R[1])),i.createElement("input",{ref:u,accept:"image/*",type:"file",multiple:!0,style:{display:"none"}}),i.createElement(Il,{linkVisible:p.linkVisible,clipVisible:p.clipVisible,type:p.type,onCancel:m,onOk:g}))})),Ol={"text/plain":"Text","text/html":"Url",default:"Text"},zl=function(e,t){var n,r,i,a,s,o,l=!1;t||(t={}),n=t.debug||!1;try{if(i=function(){var e=document.getSelection();if(!e.rangeCount)return function(){};for(var t=document.activeElement,n=[],r=0;r<e.rangeCount;r++)n.push(e.getRangeAt(r));switch(t.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":t.blur();break;default:t=null}return e.removeAllRanges(),function(){"Caret"===e.type&&e.removeAllRanges(),e.rangeCount||n.forEach((function(t){e.addRange(t)})),t&&t.focus()}}(),a=document.createRange(),s=document.getSelection(),(o=document.createElement("span")).textContent=e,o.style.all="unset",o.style.position="fixed",o.style.top=0,o.style.clip="rect(0, 0, 0, 0)",o.style.whiteSpace="pre",o.style.webkitUserSelect="text",o.style.MozUserSelect="text",o.style.msUserSelect="text",o.style.userSelect="text",o.addEventListener("copy",(function(r){if(r.stopPropagation(),t.format)if(r.preventDefault(),void 0===r.clipboardData){n&&console.warn("unable to use e.clipboardData"),n&&console.warn("trying IE specific stuff"),window.clipboardData.clearData();var i=Ol[t.format]||Ol.default;window.clipboardData.setData(i,e)}else r.clipboardData.clearData(),r.clipboardData.setData(t.format,e);t.onCopy&&(r.preventDefault(),t.onCopy(r.clipboardData))})),document.body.appendChild(o),a.selectNodeContents(o),s.addRange(a),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");l=!0}catch(i){n&&console.error("unable to copy using execCommand: ",i),n&&console.warn("trying IE specific stuff");try{window.clipboardData.setData(t.format||"text",e),t.onCopy&&t.onCopy(window.clipboardData),l=!0}catch(i){n&&console.error("unable to copy using clipboardData: ",i),n&&console.error("falling back to prompt"),r=function(e){var t=(/mac os x/i.test(navigator.userAgent)?"⌘":"Ctrl")+"+C";return e.replace(/#{\s*key\s*}/g,t)}("message"in t?t.message:"Copy to clipboard: #{key}, Enter"),window.prompt(r,e)}}finally{s&&("function"==typeof s.removeRange?s.removeRange(a):s.removeAllRanges()),o&&document.body.removeChild(o),i()}return l},Vl=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Bl=function(e){return"IMG"===e.tagName},$l=function(e){return e&&1===e.nodeType},jl=function(e){return".svg"===(e.currentSrc||e.src).substr(-4).toLowerCase()},Hl=function(e){try{return Array.isArray(e)?e.filter(Bl):function(e){return NodeList.prototype.isPrototypeOf(e)}(e)?[].slice.call(e).filter(Bl):$l(e)?[e].filter(Bl):"string"==typeof e?[].slice.call(document.querySelectorAll(e)).filter(Bl):[]}catch(e){throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom")}},Gl=function(e){var t=document.createElement("div");return t.classList.add("medium-zoom-overlay"),t.style.background=e,t},ql=function(e){var t=e.getBoundingClientRect(),n=t.top,r=t.left,i=t.width,a=t.height,s=e.cloneNode(),o=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,l=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;return s.removeAttribute("id"),s.style.position="absolute",s.style.top=n+o+"px",s.style.left=r+l+"px",s.style.width=i+"px",s.style.height=a+"px",s.style.transform="",s},Ul=function(e,t){var n=Vl({bubbles:!1,cancelable:!1,detail:void 0},t);if("function"==typeof window.CustomEvent)return new CustomEvent(e,n);var r=document.createEvent("CustomEvent");return r.initCustomEvent(e,n.bubbles,n.cancelable,n.detail),r};!function(e,t){void 0===t&&(t={});var n=t.insertAt;if("undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===n&&r.firstChild?r.insertBefore(i,r.firstChild):r.appendChild(i),i.styleSheet?i.styleSheet.cssText=e:i.appendChild(document.createTextNode(e))}}(".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}");var Wl=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=window.Promise||function(e){function t(){}e(t,t)},i=function(e){var t=e.target;t!==C?-1!==b.indexOf(t)&&m({target:t}):d()},a=function(){if(!E&&S.original){var e=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;Math.abs(x-e)>w.scrollOffset&&setTimeout(d,150)}},s=function(e){var t=e.key||e.keyCode;"Escape"!==t&&"Esc"!==t&&27!==t||d()},o=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e;if(e.background&&(C.style.background=e.background),e.container&&e.container instanceof Object&&(t.container=Vl({},w.container,e.container)),e.template){var n=$l(e.template)?e.template:document.querySelector(e.template);t.template=n}return w=Vl({},w,t),b.forEach((function(e){e.dispatchEvent(Ul("medium-zoom:update",{detail:{zoom:P}}))})),P},l=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e(Vl({},w,t))},c=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t.reduce((function(e,t){return[].concat(e,Hl(t))}),[]);return r.filter((function(e){return-1===b.indexOf(e)})).forEach((function(e){b.push(e),e.classList.add("medium-zoom-image")})),k.forEach((function(e){var t=e.type,n=e.listener,i=e.options;r.forEach((function(e){e.addEventListener(t,n,i)}))})),P},u=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];S.zoomed&&d();var r=t.length>0?t.reduce((function(e,t){return[].concat(e,Hl(t))}),[]):b;return r.forEach((function(e){e.classList.remove("medium-zoom-image"),e.dispatchEvent(Ul("medium-zoom:detach",{detail:{zoom:P}}))})),b=b.filter((function(e){return-1===r.indexOf(e)})),P},h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return b.forEach((function(r){r.addEventListener("medium-zoom:"+e,t,n)})),k.push({type:"medium-zoom:"+e,listener:t,options:n}),P},f=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return b.forEach((function(r){r.removeEventListener("medium-zoom:"+e,t,n)})),k=k.filter((function(n){return!(n.type==="medium-zoom:"+e&&n.listener.toString()===t.toString())})),P},p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.target,n=function(){var e={width:document.documentElement.clientWidth,height:document.documentElement.clientHeight,left:0,top:0,right:0,bottom:0},t=void 0,n=void 0;if(w.container)if(w.container instanceof Object)t=(e=Vl({},e,w.container)).width-e.left-e.right-2*w.margin,n=e.height-e.top-e.bottom-2*w.margin;else{var r=($l(w.container)?w.container:document.querySelector(w.container)).getBoundingClientRect(),i=r.width,a=r.height,s=r.left,o=r.top;e=Vl({},e,{width:i,height:a,left:s,top:o})}t=t||e.width-2*w.margin,n=n||e.height-2*w.margin;var l=S.zoomedHd||S.original,c=jl(l)?t:l.naturalWidth||t,u=jl(l)?n:l.naturalHeight||n,h=l.getBoundingClientRect(),f=h.top,p=h.left,d=h.width,m=h.height,g=Math.min(c,t)/d,y=Math.min(u,n)/m,v=Math.min(g,y),b="scale("+v+") translate3d("+((t-d)/2-p+w.margin+e.left)/v+"px, "+((n-m)/2-f+w.margin+e.top)/v+"px, 0)";S.zoomed.style.transform=b,S.zoomedHd&&(S.zoomedHd.style.transform=b)};return new r((function(e){if(t&&-1===b.indexOf(t))e(P);else if(S.zoomed)e(P);else{if(t)S.original=t;else{if(!(b.length>0))return void e(P);var r=b;S.original=r[0]}if(S.original.dispatchEvent(Ul("medium-zoom:open",{detail:{zoom:P}})),x=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0,E=!0,S.zoomed=ql(S.original),document.body.appendChild(C),w.template){var i=$l(w.template)?w.template:document.querySelector(w.template);S.template=document.createElement("div"),S.template.appendChild(i.content.cloneNode(!0)),document.body.appendChild(S.template)}if(document.body.appendChild(S.zoomed),window.requestAnimationFrame((function(){document.body.classList.add("medium-zoom--opened")})),S.original.classList.add("medium-zoom-image--hidden"),S.zoomed.classList.add("medium-zoom-image--opened"),S.zoomed.addEventListener("click",d),S.zoomed.addEventListener("transitionend",(function t(){E=!1,S.zoomed.removeEventListener("transitionend",t),S.original.dispatchEvent(Ul("medium-zoom:opened",{detail:{zoom:P}})),e(P)})),S.original.getAttribute("data-zoom-src")){S.zoomedHd=S.zoomed.cloneNode(),S.zoomedHd.removeAttribute("srcset"),S.zoomedHd.removeAttribute("sizes"),S.zoomedHd.src=S.zoomed.getAttribute("data-zoom-src"),S.zoomedHd.onerror=function(){clearInterval(a),console.warn("Unable to reach the zoom image target "+S.zoomedHd.src),S.zoomedHd=null,n()};var a=setInterval((function(){S.zoomedHd.complete&&(clearInterval(a),S.zoomedHd.classList.add("medium-zoom-image--opened"),S.zoomedHd.addEventListener("click",d),document.body.appendChild(S.zoomedHd),n())}),10)}else if(S.original.hasAttribute("srcset")){S.zoomedHd=S.zoomed.cloneNode(),S.zoomedHd.removeAttribute("sizes"),S.zoomedHd.removeAttribute("loading");var s=S.zoomedHd.addEventListener("load",(function(){S.zoomedHd.removeEventListener("load",s),S.zoomedHd.classList.add("medium-zoom-image--opened"),S.zoomedHd.addEventListener("click",d),document.body.appendChild(S.zoomedHd),n()}))}else n()}}))},d=function(){return new r((function(e){!E&&S.original?(E=!0,document.body.classList.remove("medium-zoom--opened"),S.zoomed.style.transform="",S.zoomedHd&&(S.zoomedHd.style.transform=""),S.template&&(S.template.style.transition="opacity 150ms",S.template.style.opacity=0),S.original.dispatchEvent(Ul("medium-zoom:close",{detail:{zoom:P}})),S.zoomed.addEventListener("transitionend",(function t(){S.original.classList.remove("medium-zoom-image--hidden"),document.body.removeChild(S.zoomed),S.zoomedHd&&document.body.removeChild(S.zoomedHd),document.body.removeChild(C),S.zoomed.classList.remove("medium-zoom-image--opened"),S.template&&document.body.removeChild(S.template),E=!1,S.zoomed.removeEventListener("transitionend",t),S.original.dispatchEvent(Ul("medium-zoom:closed",{detail:{zoom:P}})),S.original=null,S.zoomed=null,S.zoomedHd=null,S.template=null,e(P)}))):e(P)}))},m=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.target;return S.original?d():p({target:t})},g=function(){return w},y=function(){return b},v=function(){return S.original},b=[],k=[],E=!1,x=0,w=n,S={original:null,zoomed:null,zoomedHd:null,template:null};"[object Object]"===Object.prototype.toString.call(t)?w=t:(t||"string"==typeof t)&&c(t),w=Vl({margin:0,background:"#fff",scrollOffset:40,container:null,template:null},w);var C=Gl(w.background);document.addEventListener("click",i),document.addEventListener("keyup",s),document.addEventListener("scroll",a),window.addEventListener("resize",d);var P={open:p,close:d,toggle:m,update:o,clone:l,attach:c,detach:u,on:h,off:f,getOptions:g,getImages:y,getZoomedImage:v};return P};let Kl={baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1};const Yl=/[&<>"']/,Ql=/[&<>"']/g,Xl=/[<>"']|&(?!#?\w+;)/,Zl=/[<>"']|&(?!#?\w+;)/g,Jl={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},ec=e=>Jl[e];function tc(e,t){if(t){if(Yl.test(e))return e.replace(Ql,ec)}else if(Xl.test(e))return e.replace(Zl,ec);return e}const nc=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function rc(e){return e.replace(nc,((e,t)=>"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""))}const ic=/(^|[^\[])\^/g;function ac(e,t){e="string"==typeof e?e:e.source,t=t||"";const n={replace:(t,r)=>(r=(r=r.source||r).replace(ic,"$1"),e=e.replace(t,r),n),getRegex:()=>new RegExp(e,t)};return n}const sc=/[^\w:]/g,oc=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function lc(e,t,n){if(e){let e;try{e=decodeURIComponent(rc(n)).replace(sc,"").toLowerCase()}catch(e){return null}if(0===e.indexOf("javascript:")||0===e.indexOf("vbscript:")||0===e.indexOf("data:"))return null}t&&!oc.test(n)&&(n=function(e,t){cc[" "+e]||(uc.test(e)?cc[" "+e]=e+"/":cc[" "+e]=gc(e,"/",!0));const n=-1===(e=cc[" "+e]).indexOf(":");return"//"===t.substring(0,2)?n?t:e.replace(hc,"$1")+t:"/"===t.charAt(0)?n?t:e.replace(fc,"$1")+t:e+t}(t,n));try{n=encodeURI(n).replace(/%25/g,"%")}catch(e){return null}return n}const cc={},uc=/^[^:]+:\/*[^/]*$/,hc=/^([^:]+:)[\s\S]*$/,fc=/^([^:]+:\/*[^/]*)[\s\S]*$/,pc={exec:function(){}};function dc(e){let t,n,r=1;for(;r<arguments.length;r++)for(n in t=arguments[r],t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}function mc(e,t){const n=e.replace(/\|/g,((e,t,n)=>{let r=!1,i=t;for(;--i>=0&&"\\"===n[i];)r=!r;return r?"|":" |"})).split(/ \|/);let r=0;if(n[0].trim()||n.shift(),n.length>0&&!n[n.length-1].trim()&&n.pop(),n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;r<n.length;r++)n[r]=n[r].trim().replace(/\\\|/g,"|");return n}function gc(e,t,n){const r=e.length;if(0===r)return"";let i=0;for(;i<r;){const a=e.charAt(r-i-1);if(a!==t||n){if(a===t||!n)break;i++}else i++}return e.slice(0,r-i)}function yc(e){e&&e.sanitize&&!e.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")}function vc(e,t){if(t<1)return"";let n="";for(;t>1;)1&t&&(n+=e),t>>=1,e+=e;return n+e}function bc(e,t,n,r){const i=t.href,a=t.title?tc(t.title):null,s=e[1].replace(/\\([\[\]])/g,"$1");if("!"!==e[0].charAt(0)){r.state.inLink=!0;const e={type:"link",raw:n,href:i,title:a,text:s,tokens:r.inlineTokens(s,[])};return r.state.inLink=!1,e}return{type:"image",raw:n,href:i,title:a,text:tc(s)}}class kc{constructor(e){this.options=e||Kl}space(e){const t=this.rules.block.newline.exec(e);if(t&&t[0].length>0)return{type:"space",raw:t[0]}}code(e){const t=this.rules.block.code.exec(e);if(t){const e=t[0].replace(/^ {1,4}/gm,"");return{type:"code",raw:t[0],codeBlockStyle:"indented",text:this.options.pedantic?e:gc(e,"\n")}}}fences(e){const t=this.rules.block.fences.exec(e);if(t){const e=t[0],n=function(e,t){const n=e.match(/^(\s+)(?:```)/);if(null===n)return t;const r=n[1];return t.split("\n").map((e=>{const t=e.match(/^\s+/);if(null===t)return e;const[n]=t;return n.length>=r.length?e.slice(r.length):e})).join("\n")}(e,t[3]||"");return{type:"code",raw:e,lang:t[2]?t[2].trim():t[2],text:n}}}heading(e){const t=this.rules.block.heading.exec(e);if(t){let e=t[2].trim();if(/#$/.test(e)){const t=gc(e,"#");this.options.pedantic?e=t.trim():t&&!/ $/.test(t)||(e=t.trim())}const n={type:"heading",raw:t[0],depth:t[1].length,text:e,tokens:[]};return this.lexer.inline(n.text,n.tokens),n}}hr(e){const t=this.rules.block.hr.exec(e);if(t)return{type:"hr",raw:t[0]}}blockquote(e){const t=this.rules.block.blockquote.exec(e);if(t){const e=t[0].replace(/^ *>[ \t]?/gm,"");return{type:"blockquote",raw:t[0],tokens:this.lexer.blockTokens(e,[]),text:e}}}list(e){let t=this.rules.block.list.exec(e);if(t){let n,r,i,a,s,o,l,c,u,h,f,p,d=t[1].trim();const m=d.length>1,g={type:"list",raw:"",ordered:m,start:m?+d.slice(0,-1):"",loose:!1,items:[]};d=m?`\\d{1,9}\\${d.slice(-1)}`:`\\${d}`,this.options.pedantic&&(d=m?d:"[*+-]");const y=new RegExp(`^( {0,3}${d})((?:[\t ][^\\n]*)?(?:\\n|$))`);for(;e&&(p=!1,t=y.exec(e))&&!this.rules.block.hr.test(e);){if(n=t[0],e=e.substring(n.length),c=t[2].split("\n",1)[0],u=e.split("\n",1)[0],this.options.pedantic?(a=2,f=c.trimLeft()):(a=t[2].search(/[^ ]/),a=a>4?1:a,f=c.slice(a),a+=t[1].length),o=!1,!c&&/^ *$/.test(u)&&(n+=u+"\n",e=e.substring(u.length+1),p=!0),!p){const t=new RegExp(`^ {0,${Math.min(3,a-1)}}(?:[*+-]|\\d{1,9}[.)])((?: [^\\n]*)?(?:\\n|$))`),r=new RegExp(`^ {0,${Math.min(3,a-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);for(;e&&(h=e.split("\n",1)[0],c=h,this.options.pedantic&&(c=c.replace(/^ {1,4}(?=( {4})*[^ ])/g,"  ")),!t.test(c))&&!r.test(e);){if(c.search(/[^ ]/)>=a||!c.trim())f+="\n"+c.slice(a);else{if(o)break;f+="\n"+c}o||c.trim()||(o=!0),n+=h+"\n",e=e.substring(h.length+1)}}g.loose||(l?g.loose=!0:/\n *\n *$/.test(n)&&(l=!0)),this.options.gfm&&(r=/^\[[ xX]\] /.exec(f),r&&(i="[ ] "!==r[0],f=f.replace(/^\[[ xX]\] +/,""))),g.items.push({type:"list_item",raw:n,task:!!r,checked:i,loose:!1,text:f}),g.raw+=n}g.items[g.items.length-1].raw=n.trimRight(),g.items[g.items.length-1].text=f.trimRight(),g.raw=g.raw.trimRight();const v=g.items.length;for(s=0;s<v;s++){this.lexer.state.top=!1,g.items[s].tokens=this.lexer.blockTokens(g.items[s].text,[]);const e=g.items[s].tokens.filter((e=>"space"===e.type)),t=e.every((e=>{const t=e.raw.split("");let n=0;for(const e of t)if("\n"===e&&(n+=1),n>1)return!0;return!1}));!g.loose&&e.length&&t&&(g.loose=!0,g.items[s].loose=!0)}return g}}html(e){const t=this.rules.block.html.exec(e);if(t){const e={type:"html",raw:t[0],pre:!this.options.sanitizer&&("pre"===t[1]||"script"===t[1]||"style"===t[1]),text:t[0]};return this.options.sanitize&&(e.type="paragraph",e.text=this.options.sanitizer?this.options.sanitizer(t[0]):tc(t[0]),e.tokens=[],this.lexer.inline(e.text,e.tokens)),e}}def(e){const t=this.rules.block.def.exec(e);if(t)return t[3]&&(t[3]=t[3].substring(1,t[3].length-1)),{type:"def",tag:t[1].toLowerCase().replace(/\s+/g," "),raw:t[0],href:t[2],title:t[3]}}table(e){const t=this.rules.block.table.exec(e);if(t){const e={type:"table",header:mc(t[1]).map((e=>({text:e}))),align:t[2].replace(/^ *|\| *$/g,"").split(/ *\| */),rows:t[3]&&t[3].trim()?t[3].replace(/\n[ \t]*$/,"").split("\n"):[]};if(e.header.length===e.align.length){e.raw=t[0];let n,r,i,a,s=e.align.length;for(n=0;n<s;n++)/^ *-+: *$/.test(e.align[n])?e.align[n]="right":/^ *:-+: *$/.test(e.align[n])?e.align[n]="center":/^ *:-+ *$/.test(e.align[n])?e.align[n]="left":e.align[n]=null;for(s=e.rows.length,n=0;n<s;n++)e.rows[n]=mc(e.rows[n],e.header.length).map((e=>({text:e})));for(s=e.header.length,r=0;r<s;r++)e.header[r].tokens=[],this.lexer.inline(e.header[r].text,e.header[r].tokens);for(s=e.rows.length,r=0;r<s;r++)for(a=e.rows[r],i=0;i<a.length;i++)a[i].tokens=[],this.lexer.inline(a[i].text,a[i].tokens);return e}}}lheading(e){const t=this.rules.block.lheading.exec(e);if(t){const e={type:"heading",raw:t[0],depth:"="===t[2].charAt(0)?1:2,text:t[1],tokens:[]};return this.lexer.inline(e.text,e.tokens),e}}paragraph(e){const t=this.rules.block.paragraph.exec(e);if(t){const e={type:"paragraph",raw:t[0],text:"\n"===t[1].charAt(t[1].length-1)?t[1].slice(0,-1):t[1],tokens:[]};return this.lexer.inline(e.text,e.tokens),e}}text(e){const t=this.rules.block.text.exec(e);if(t){const e={type:"text",raw:t[0],text:t[0],tokens:[]};return this.lexer.inline(e.text,e.tokens),e}}escape(e){const t=this.rules.inline.escape.exec(e);if(t)return{type:"escape",raw:t[0],text:tc(t[1])}}tag(e){const t=this.rules.inline.tag.exec(e);if(t)return!this.lexer.state.inLink&&/^<a /i.test(t[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\/a>/i.test(t[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(t[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(t[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?"text":"html",raw:t[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(t[0]):tc(t[0]):t[0]}}link(e){const t=this.rules.inline.link.exec(e);if(t){const e=t[2].trim();if(!this.options.pedantic&&/^</.test(e)){if(!/>$/.test(e))return;const t=gc(e.slice(0,-1),"\\");if((e.length-t.length)%2==0)return}else{const e=function(e,t){if(-1===e.indexOf(t[1]))return-1;const n=e.length;let r=0,i=0;for(;i<n;i++)if("\\"===e[i])i++;else if(e[i]===t[0])r++;else if(e[i]===t[1]&&(r--,r<0))return i;return-1}(t[2],"()");if(e>-1){const n=(0===t[0].indexOf("!")?5:4)+t[1].length+e;t[2]=t[2].substring(0,e),t[0]=t[0].substring(0,n).trim(),t[3]=""}}let n=t[2],r="";if(this.options.pedantic){const e=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(n);e&&(n=e[1],r=e[3])}else r=t[3]?t[3].slice(1,-1):"";return n=n.trim(),/^</.test(n)&&(n=this.options.pedantic&&!/>$/.test(e)?n.slice(1):n.slice(1,-1)),bc(t,{href:n?n.replace(this.rules.inline._escapes,"$1"):n,title:r?r.replace(this.rules.inline._escapes,"$1"):r},t[0],this.lexer)}}reflink(e,t){let n;if((n=this.rules.inline.reflink.exec(e))||(n=this.rules.inline.nolink.exec(e))){let e=(n[2]||n[1]).replace(/\s+/g," ");if(e=t[e.toLowerCase()],!e||!e.href){const e=n[0].charAt(0);return{type:"text",raw:e,text:e}}return bc(n,e,n[0],this.lexer)}}emStrong(e,t,n=""){let r=this.rules.inline.emStrong.lDelim.exec(e);if(!r)return;if(r[3]&&n.match(/[\p{L}\p{N}]/u))return;const i=r[1]||r[2]||"";if(!i||i&&(""===n||this.rules.inline.punctuation.exec(n))){const n=r[0].length-1;let i,a,s=n,o=0;const l="*"===r[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(l.lastIndex=0,t=t.slice(-1*e.length+n);null!=(r=l.exec(t));){if(i=r[1]||r[2]||r[3]||r[4]||r[5]||r[6],!i)continue;if(a=i.length,r[3]||r[4]){s+=a;continue}if((r[5]||r[6])&&n%3&&!((n+a)%3)){o+=a;continue}if(s-=a,s>0)continue;if(a=Math.min(a,a+s+o),Math.min(n,a)%2){const t=e.slice(1,n+r.index+a);return{type:"em",raw:e.slice(0,n+r.index+a+1),text:t,tokens:this.lexer.inlineTokens(t,[])}}const t=e.slice(2,n+r.index+a-1);return{type:"strong",raw:e.slice(0,n+r.index+a+1),text:t,tokens:this.lexer.inlineTokens(t,[])}}}}codespan(e){const t=this.rules.inline.code.exec(e);if(t){let e=t[2].replace(/\n/g," ");const n=/[^ ]/.test(e),r=/^ /.test(e)&&/ $/.test(e);return n&&r&&(e=e.substring(1,e.length-1)),e=tc(e,!0),{type:"codespan",raw:t[0],text:e}}}br(e){const t=this.rules.inline.br.exec(e);if(t)return{type:"br",raw:t[0]}}del(e){const t=this.rules.inline.del.exec(e);if(t)return{type:"del",raw:t[0],text:t[2],tokens:this.lexer.inlineTokens(t[2],[])}}autolink(e,t){const n=this.rules.inline.autolink.exec(e);if(n){let e,r;return"@"===n[2]?(e=tc(this.options.mangle?t(n[1]):n[1]),r="mailto:"+e):(e=tc(n[1]),r=e),{type:"link",raw:n[0],text:e,href:r,tokens:[{type:"text",raw:e,text:e}]}}}url(e,t){let n;if(n=this.rules.inline.url.exec(e)){let e,r;if("@"===n[2])e=tc(this.options.mangle?t(n[0]):n[0]),r="mailto:"+e;else{let t;do{t=n[0],n[0]=this.rules.inline._backpedal.exec(n[0])[0]}while(t!==n[0]);e=tc(n[0]),r="www."===n[1]?"http://"+e:e}return{type:"link",raw:n[0],text:e,href:r,tokens:[{type:"text",raw:e,text:e}]}}}inlineText(e,t){const n=this.rules.inline.text.exec(e);if(n){let e;return e=this.lexer.state.inRawBlock?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(n[0]):tc(n[0]):n[0]:tc(this.options.smartypants?t(n[0]):n[0]),{type:"text",raw:n[0],text:e}}}}const Ec={newline:/^(?: *(?:\n|$))+/,code:/^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,hr:/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,html:"^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",def:/^ {0,3}\[(label)\]: *(?:\n *)?<?([^\s>]+)>?(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,table:pc,lheading:/^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,text:/^[^\n]+/,_label:/(?!\s*\])(?:\\.|[^\[\]\\])+/,_title:/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/};Ec.def=ac(Ec.def).replace("label",Ec._label).replace("title",Ec._title).getRegex(),Ec.bullet=/(?:[*+-]|\d{1,9}[.)])/,Ec.listItemStart=ac(/^( *)(bull) */).replace("bull",Ec.bullet).getRegex(),Ec.list=ac(Ec.list).replace(/bull/g,Ec.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+Ec.def.source+")").getRegex(),Ec._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",Ec._comment=/<!--(?!-?>)[\s\S]*?(?:-->|$)/,Ec.html=ac(Ec.html,"i").replace("comment",Ec._comment).replace("tag",Ec._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),Ec.paragraph=ac(Ec._paragraph).replace("hr",Ec.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",Ec._tag).getRegex(),Ec.blockquote=ac(Ec.blockquote).replace("paragraph",Ec.paragraph).getRegex(),Ec.normal=dc({},Ec),Ec.gfm=dc({},Ec.normal,{table:"^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"}),Ec.gfm.table=ac(Ec.gfm.table).replace("hr",Ec.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",Ec._tag).getRegex(),Ec.gfm.paragraph=ac(Ec._paragraph).replace("hr",Ec.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("table",Ec.gfm.table).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",Ec._tag).getRegex(),Ec.pedantic=dc({},Ec.normal,{html:ac("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",Ec._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:pc,paragraph:ac(Ec.normal._paragraph).replace("hr",Ec.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",Ec.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()});const xc={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:pc,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(ref)\]/,nolink:/^!?\[(ref)\](?:\[\])?/,reflinkSearch:"reflink|nolink(?!\\()",emStrong:{lDelim:/^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,rDelimAst:/^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[^*]+(?=[^*])|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,rDelimUnd:/^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/},code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:pc,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,punctuation:/^([\spunctuation])/};function wc(e){return e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")}function Sc(e){let t,n,r="";const i=e.length;for(t=0;t<i;t++)n=e.charCodeAt(t),Math.random()>.5&&(n="x"+n.toString(16)),r+="&#"+n+";";return r}xc._punctuation="!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~",xc.punctuation=ac(xc.punctuation).replace(/punctuation/g,xc._punctuation).getRegex(),xc.blockSkip=/\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g,xc.escapedEmSt=/\\\*|\\_/g,xc._comment=ac(Ec._comment).replace("(?:--\x3e|$)","--\x3e").getRegex(),xc.emStrong.lDelim=ac(xc.emStrong.lDelim).replace(/punct/g,xc._punctuation).getRegex(),xc.emStrong.rDelimAst=ac(xc.emStrong.rDelimAst,"g").replace(/punct/g,xc._punctuation).getRegex(),xc.emStrong.rDelimUnd=ac(xc.emStrong.rDelimUnd,"g").replace(/punct/g,xc._punctuation).getRegex(),xc._escapes=/\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g,xc._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,xc._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,xc.autolink=ac(xc.autolink).replace("scheme",xc._scheme).replace("email",xc._email).getRegex(),xc._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,xc.tag=ac(xc.tag).replace("comment",xc._comment).replace("attribute",xc._attribute).getRegex(),xc._label=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,xc._href=/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/,xc._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,xc.link=ac(xc.link).replace("label",xc._label).replace("href",xc._href).replace("title",xc._title).getRegex(),xc.reflink=ac(xc.reflink).replace("label",xc._label).replace("ref",Ec._label).getRegex(),xc.nolink=ac(xc.nolink).replace("ref",Ec._label).getRegex(),xc.reflinkSearch=ac(xc.reflinkSearch,"g").replace("reflink",xc.reflink).replace("nolink",xc.nolink).getRegex(),xc.normal=dc({},xc),xc.pedantic=dc({},xc.normal,{strong:{start:/^__|\*\*/,middle:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,endAst:/\*\*(?!\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\*/,middle:/^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,endAst:/\*(?!\*)/g,endUnd:/_(?!_)/g},link:ac(/^!?\[(label)\]\((.*?)\)/).replace("label",xc._label).getRegex(),reflink:ac(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",xc._label).getRegex()}),xc.gfm=dc({},xc.normal,{escape:ac(xc.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/}),xc.gfm.url=ac(xc.gfm.url,"i").replace("email",xc.gfm._extended_email).getRegex(),xc.breaks=dc({},xc.gfm,{br:ac(xc.br).replace("{2,}","*").getRegex(),text:ac(xc.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()});class Cc{constructor(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||Kl,this.options.tokenizer=this.options.tokenizer||new kc,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const t={block:Ec.normal,inline:xc.normal};this.options.pedantic?(t.block=Ec.pedantic,t.inline=xc.pedantic):this.options.gfm&&(t.block=Ec.gfm,this.options.breaks?t.inline=xc.breaks:t.inline=xc.gfm),this.tokenizer.rules=t}static get rules(){return{block:Ec,inline:xc}}static lex(e,t){return new Cc(t).lex(e)}static lexInline(e,t){return new Cc(t).inlineTokens(e)}lex(e){let t;for(e=e.replace(/\r\n|\r/g,"\n"),this.blockTokens(e,this.tokens);t=this.inlineQueue.shift();)this.inlineTokens(t.src,t.tokens);return this.tokens}blockTokens(e,t=[]){let n,r,i,a;for(e=this.options.pedantic?e.replace(/\t/g,"    ").replace(/^ +$/gm,""):e.replace(/^( *)(\t+)/gm,((e,t,n)=>t+"    ".repeat(n.length)));e;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some((r=>!!(n=r.call({lexer:this},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)))))if(n=this.tokenizer.space(e))e=e.substring(n.raw.length),1===n.raw.length&&t.length>0?t[t.length-1].raw+="\n":t.push(n);else if(n=this.tokenizer.code(e))e=e.substring(n.raw.length),r=t[t.length-1],!r||"paragraph"!==r.type&&"text"!==r.type?t.push(n):(r.raw+="\n"+n.raw,r.text+="\n"+n.text,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(n=this.tokenizer.fences(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.heading(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.hr(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.blockquote(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.list(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.html(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.def(e))e=e.substring(n.raw.length),r=t[t.length-1],!r||"paragraph"!==r.type&&"text"!==r.type?this.tokens.links[n.tag]||(this.tokens.links[n.tag]={href:n.href,title:n.title}):(r.raw+="\n"+n.raw,r.text+="\n"+n.raw,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(n=this.tokenizer.table(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.lheading(e))e=e.substring(n.raw.length),t.push(n);else{if(i=e,this.options.extensions&&this.options.extensions.startBlock){let t=1/0;const n=e.slice(1);let r;this.options.extensions.startBlock.forEach((function(e){r=e.call({lexer:this},n),"number"==typeof r&&r>=0&&(t=Math.min(t,r))})),t<1/0&&t>=0&&(i=e.substring(0,t+1))}if(this.state.top&&(n=this.tokenizer.paragraph(i)))r=t[t.length-1],a&&"paragraph"===r.type?(r.raw+="\n"+n.raw,r.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):t.push(n),a=i.length!==e.length,e=e.substring(n.raw.length);else if(n=this.tokenizer.text(e))e=e.substring(n.raw.length),r=t[t.length-1],r&&"text"===r.type?(r.raw+="\n"+n.raw,r.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):t.push(n);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}return this.state.top=!0,t}inline(e,t){this.inlineQueue.push({src:e,tokens:t})}inlineTokens(e,t=[]){let n,r,i,a,s,o,l=e;if(this.tokens.links){const e=Object.keys(this.tokens.links);if(e.length>0)for(;null!=(a=this.tokenizer.rules.inline.reflinkSearch.exec(l));)e.includes(a[0].slice(a[0].lastIndexOf("[")+1,-1))&&(l=l.slice(0,a.index)+"["+vc("a",a[0].length-2)+"]"+l.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(a=this.tokenizer.rules.inline.blockSkip.exec(l));)l=l.slice(0,a.index)+"["+vc("a",a[0].length-2)+"]"+l.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(a=this.tokenizer.rules.inline.escapedEmSt.exec(l));)l=l.slice(0,a.index)+"++"+l.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);for(;e;)if(s||(o=""),s=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some((r=>!!(n=r.call({lexer:this},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)))))if(n=this.tokenizer.escape(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.tag(e))e=e.substring(n.raw.length),r=t[t.length-1],r&&"text"===n.type&&"text"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(n=this.tokenizer.link(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.reflink(e,this.tokens.links))e=e.substring(n.raw.length),r=t[t.length-1],r&&"text"===n.type&&"text"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(n=this.tokenizer.emStrong(e,l,o))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.codespan(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.br(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.del(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.autolink(e,Sc))e=e.substring(n.raw.length),t.push(n);else if(this.state.inLink||!(n=this.tokenizer.url(e,Sc))){if(i=e,this.options.extensions&&this.options.extensions.startInline){let t=1/0;const n=e.slice(1);let r;this.options.extensions.startInline.forEach((function(e){r=e.call({lexer:this},n),"number"==typeof r&&r>=0&&(t=Math.min(t,r))})),t<1/0&&t>=0&&(i=e.substring(0,t+1))}if(n=this.tokenizer.inlineText(i,wc))e=e.substring(n.raw.length),"_"!==n.raw.slice(-1)&&(o=n.raw.slice(-1)),s=!0,r=t[t.length-1],r&&"text"===r.type?(r.raw+=n.raw,r.text+=n.text):t.push(n);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}else e=e.substring(n.raw.length),t.push(n);return t}}class Pc{constructor(e){this.options=e||Kl}code(e,t,n){const r=(t||"").match(/\S*/)[0];if(this.options.highlight){const t=this.options.highlight(e,r);null!=t&&t!==e&&(n=!0,e=t)}return e=e.replace(/\n$/,"")+"\n",r?'<pre><code class="'+this.options.langPrefix+tc(r,!0)+'">'+(n?e:tc(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:tc(e,!0))+"</code></pre>\n"}blockquote(e){return`<blockquote>\n${e}</blockquote>\n`}html(e){return e}heading(e,t,n,r){return this.options.headerIds?`<h${t} id="${this.options.headerPrefix+r.slug(n)}">${e}</h${t}>\n`:`<h${t}>${e}</h${t}>\n`}hr(){return this.options.xhtml?"<hr/>\n":"<hr>\n"}list(e,t,n){const r=t?"ol":"ul";return"<"+r+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+r+">\n"}listitem(e){return`<li>${e}</li>\n`}checkbox(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "}paragraph(e){return`<p>${e}</p>\n`}table(e,t){return t&&(t=`<tbody>${t}</tbody>`),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"}tablerow(e){return`<tr>\n${e}</tr>\n`}tablecell(e,t){const n=t.header?"th":"td";return(t.align?`<${n} align="${t.align}">`:`<${n}>`)+e+`</${n}>\n`}strong(e){return`<strong>${e}</strong>`}em(e){return`<em>${e}</em>`}codespan(e){return`<code>${e}</code>`}br(){return this.options.xhtml?"<br/>":"<br>"}del(e){return`<del>${e}</del>`}link(e,t,n){if(null===(e=lc(this.options.sanitize,this.options.baseUrl,e)))return n;let r='<a href="'+tc(e)+'"';return t&&(r+=' title="'+t+'"'),r+=">"+n+"</a>",r}image(e,t,n){if(null===(e=lc(this.options.sanitize,this.options.baseUrl,e)))return n;let r=`<img src="${e}" alt="${n}"`;return t&&(r+=` title="${t}"`),r+=this.options.xhtml?"/>":">",r}text(e){return e}}class _c{strong(e){return e}em(e){return e}codespan(e){return e}del(e){return e}html(e){return e}text(e){return e}link(e,t,n){return""+n}image(e,t,n){return""+n}br(){return""}}class Tc{constructor(){this.seen={}}serialize(e){return e.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi,"").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-")}getNextSafeSlug(e,t){let n=e,r=0;if(this.seen.hasOwnProperty(n)){r=this.seen[e];do{r++,n=e+"-"+r}while(this.seen.hasOwnProperty(n))}return t||(this.seen[e]=r,this.seen[n]=0),n}slug(e,t={}){const n=this.serialize(e);return this.getNextSafeSlug(n,t.dryrun)}}class Ac{constructor(e){this.options=e||Kl,this.options.renderer=this.options.renderer||new Pc,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new _c,this.slugger=new Tc}static parse(e,t){return new Ac(t).parse(e)}static parseInline(e,t){return new Ac(t).parseInline(e)}parse(e,t=!0){let n,r,i,a,s,o,l,c,u,h,f,p,d,m,g,y,v,b,k,E="";const x=e.length;for(n=0;n<x;n++)if(h=e[n],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[h.type]&&(k=this.options.extensions.renderers[h.type].call({parser:this},h),!1!==k||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(h.type)))E+=k||"";else switch(h.type){case"space":continue;case"hr":E+=this.renderer.hr();continue;case"heading":E+=this.renderer.heading(this.parseInline(h.tokens),h.depth,rc(this.parseInline(h.tokens,this.textRenderer)),this.slugger);continue;case"code":E+=this.renderer.code(h.text,h.lang,h.escaped);continue;case"table":for(c="",l="",a=h.header.length,r=0;r<a;r++)l+=this.renderer.tablecell(this.parseInline(h.header[r].tokens),{header:!0,align:h.align[r]});for(c+=this.renderer.tablerow(l),u="",a=h.rows.length,r=0;r<a;r++){for(o=h.rows[r],l="",s=o.length,i=0;i<s;i++)l+=this.renderer.tablecell(this.parseInline(o[i].tokens),{header:!1,align:h.align[i]});u+=this.renderer.tablerow(l)}E+=this.renderer.table(c,u);continue;case"blockquote":u=this.parse(h.tokens),E+=this.renderer.blockquote(u);continue;case"list":for(f=h.ordered,p=h.start,d=h.loose,a=h.items.length,u="",r=0;r<a;r++)g=h.items[r],y=g.checked,v=g.task,m="",g.task&&(b=this.renderer.checkbox(y),d?g.tokens.length>0&&"paragraph"===g.tokens[0].type?(g.tokens[0].text=b+" "+g.tokens[0].text,g.tokens[0].tokens&&g.tokens[0].tokens.length>0&&"text"===g.tokens[0].tokens[0].type&&(g.tokens[0].tokens[0].text=b+" "+g.tokens[0].tokens[0].text)):g.tokens.unshift({type:"text",text:b}):m+=b),m+=this.parse(g.tokens,d),u+=this.renderer.listitem(m,v,y);E+=this.renderer.list(u,f,p);continue;case"html":E+=this.renderer.html(h.text);continue;case"paragraph":E+=this.renderer.paragraph(this.parseInline(h.tokens));continue;case"text":for(u=h.tokens?this.parseInline(h.tokens):h.text;n+1<x&&"text"===e[n+1].type;)h=e[++n],u+="\n"+(h.tokens?this.parseInline(h.tokens):h.text);E+=t?this.renderer.paragraph(u):u;continue;default:{const e='Token with "'+h.type+'" type was not found.';if(this.options.silent)return void console.error(e);throw new Error(e)}}return E}parseInline(e,t){t=t||this.renderer;let n,r,i,a="";const s=e.length;for(n=0;n<s;n++)if(r=e[n],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[r.type]&&(i=this.options.extensions.renderers[r.type].call({parser:this},r),!1!==i||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(r.type)))a+=i||"";else switch(r.type){case"escape":case"text":a+=t.text(r.text);break;case"html":a+=t.html(r.text);break;case"link":a+=t.link(r.href,r.title,this.parseInline(r.tokens,t));break;case"image":a+=t.image(r.href,r.title,r.text);break;case"strong":a+=t.strong(this.parseInline(r.tokens,t));break;case"em":a+=t.em(this.parseInline(r.tokens,t));break;case"codespan":a+=t.codespan(r.text);break;case"br":a+=t.br();break;case"del":a+=t.del(this.parseInline(r.tokens,t));break;default:{const e='Token with "'+r.type+'" type was not found.';if(this.options.silent)return void console.error(e);throw new Error(e)}}return a}}function Fc(e,t,n){if(null==e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if("function"==typeof t&&(n=t,t=null),yc(t=dc({},Fc.defaults,t||{})),n){const r=t.highlight;let i;try{i=Cc.lex(e,t)}catch(e){return n(e)}const a=function(e){let a;if(!e)try{t.walkTokens&&Fc.walkTokens(i,t.walkTokens),a=Ac.parse(i,t)}catch(t){e=t}return t.highlight=r,e?n(e):n(null,a)};if(!r||r.length<3)return a();if(delete t.highlight,!i.length)return a();let s=0;return Fc.walkTokens(i,(function(e){"code"===e.type&&(s++,setTimeout((()=>{r(e.text,e.lang,(function(t,n){if(t)return a(t);null!=n&&n!==e.text&&(e.text=n,e.escaped=!0),s--,0===s&&a()}))}),0))})),void(0===s&&a())}try{const n=Cc.lex(e,t);return t.walkTokens&&Fc.walkTokens(n,t.walkTokens),Ac.parse(n,t)}catch(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",t.silent)return"<p>An error occurred:</p><pre>"+tc(e.message+"",!0)+"</pre>";throw e}}Fc.options=Fc.setOptions=function(e){var t;return dc(Fc.defaults,e),t=Fc.defaults,Kl=t,Fc},Fc.getDefaults=function(){return{baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}},Fc.defaults=Kl,Fc.use=function(...e){const t=dc({},...e),n=Fc.defaults.extensions||{renderers:{},childTokens:{}};let r;e.forEach((e=>{if(e.extensions&&(r=!0,e.extensions.forEach((e=>{if(!e.name)throw new Error("extension name required");if(e.renderer){const t=n.renderers?n.renderers[e.name]:null;n.renderers[e.name]=t?function(...n){let r=e.renderer.apply(this,n);return!1===r&&(r=t.apply(this,n)),r}:e.renderer}if(e.tokenizer){if(!e.level||"block"!==e.level&&"inline"!==e.level)throw new Error("extension level must be 'block' or 'inline'");n[e.level]?n[e.level].unshift(e.tokenizer):n[e.level]=[e.tokenizer],e.start&&("block"===e.level?n.startBlock?n.startBlock.push(e.start):n.startBlock=[e.start]:"inline"===e.level&&(n.startInline?n.startInline.push(e.start):n.startInline=[e.start]))}e.childTokens&&(n.childTokens[e.name]=e.childTokens)}))),e.renderer){const n=Fc.defaults.renderer||new Pc;for(const t in e.renderer){const r=n[t];n[t]=(...i)=>{let a=e.renderer[t].apply(n,i);return!1===a&&(a=r.apply(n,i)),a}}t.renderer=n}if(e.tokenizer){const n=Fc.defaults.tokenizer||new kc;for(const t in e.tokenizer){const r=n[t];n[t]=(...i)=>{let a=e.tokenizer[t].apply(n,i);return!1===a&&(a=r.apply(n,i)),a}}t.tokenizer=n}if(e.walkTokens){const n=Fc.defaults.walkTokens;t.walkTokens=function(t){e.walkTokens.call(this,t),n&&n.call(this,t)}}r&&(t.extensions=n),Fc.setOptions(t)}))},Fc.walkTokens=function(e,t){for(const n of e)switch(t.call(Fc,n),n.type){case"table":for(const e of n.header)Fc.walkTokens(e.tokens,t);for(const e of n.rows)for(const n of e)Fc.walkTokens(n.tokens,t);break;case"list":Fc.walkTokens(n.items,t);break;default:Fc.defaults.extensions&&Fc.defaults.extensions.childTokens&&Fc.defaults.extensions.childTokens[n.type]?Fc.defaults.extensions.childTokens[n.type].forEach((function(e){Fc.walkTokens(n[e],t)})):n.tokens&&Fc.walkTokens(n.tokens,t)}},Fc.parseInline=function(e,t){if(null==e)throw new Error("marked.parseInline(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked.parseInline(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");yc(t=dc({},Fc.defaults,t||{}));try{const n=Cc.lexInline(e,t);return t.walkTokens&&Fc.walkTokens(n,t.walkTokens),Ac.parseInline(n,t)}catch(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",t.silent)return"<p>An error occurred:</p><pre>"+tc(e.message+"",!0)+"</pre>";throw e}},Fc.Parser=Ac,Fc.parser=Ac.parse,Fc.Renderer=Pc,Fc.TextRenderer=_c,Fc.Lexer=Cc,Fc.lexer=Cc.lex,Fc.Tokenizer=kc,Fc.Slugger=Tc,Fc.parse=Fc,Ac.parse,Cc.lex;const Mc=e=>{const t=e.value,n=t.substring(0,e.selectionStart),r=t.substring(e.selectionEnd,t.length),i=n.lastIndexOf("\n"),a=n.substring(0,i+1),s=r.indexOf("\n"),o=r.substring(-1===s?r.length:s,r.length),l=n.substring(i+1,n.length),c=r.substring(0,s);return{prefixStr:n,subfixStr:r,prefixStrEndRow:a,subfixStrEndRow:o,prefixSupply:l,subfixSupply:c}};var Dc={block(e,t){return{name:"KaTexBlockExtension",level:"block",start:e=>{var t;return null==(t=e.match(/\n\$\$\n/))?void 0:t.index},tokenizer(e){if(/^\$\$\n/.test(e)&&e.split("$$").length>2){const t=El(e,"$$");return{type:"KaTexBlockExtension",raw:t[0],text:t[1].trim(),tokens:[]}}},renderer(n){const r=t||"undefined"!=typeof window&&window.katex;if(r){const t=r.renderToString(n.text,{throwOnError:!1,displayMode:!0});return`<span class="${e}-katex-block" data-processed>${t}</span>`}return`<span class="${e}-katex-block">${n.text}</span>`}}},inline(e,t){return{name:"KaTexInlineExtension",level:"inline",start:e=>{var t;return null==(t=e.match(/\$[^\n]*/))?void 0:t.index},tokenizer(e){if(/^\$[^\n]*\$/.test(e)){const t=El(e);return{type:"KaTexInlineExtension",raw:t[0],text:t[1].trim(),tokens:[]}}},renderer(n){const r=t||"undefined"!=typeof window&&window.katex;if(r){const t=r.renderToString(n.text,{throwOnError:!1});return`<span class="${e}-katex-inline" data-processed>${t}</span>`}return`<span class="${e}-katex-inline">${n.text}</span>`}}}};let Ic=-1;const Rc=[0,0],Nc=e=>{var t;const{theme:n}=(0,i.useContext)(Gc),r=null==(t=dl.editorExtensions)?void 0:t.mermaid,[a,s]=(0,i.useState)(!1),[o,l]=(0,i.useState)(!!(null==r?void 0:r.instance));return(0,i.useEffect)((()=>{e.noMermaid||((null==r?void 0:r.instance)?null==r||r.instance.initialize({theme:"dark"===n?"dark":"default"}):window.mermaid&&window.mermaid.initialize({theme:"dark"===n?"dark":"default"}),s((e=>!e)))}),[n]),(0,i.useEffect)((()=>{let t;e.noMermaid||(null==r?void 0:r.instance)||(t=document.createElement("script"),t.src=(null==r?void 0:r.js)||ul,t.onload=()=>{window.mermaid.initialize({theme:"dark"===n?"dark":"default",logLevel:"Fatal"}),l(!0)},t.id="md-mermaid",wl(t,"mermaid"))}),[]),{reRender:a,mermaidInited:o}},Lc=(e,t)=>{var n;const r=null==(n=dl.editorExtensions)?void 0:n.katex,a=null==r?void 0:r.instance,[s,o]=(0,i.useState)(!1);return e.noKatex||t.use({extensions:[Dc.inline(el,a),Dc.block(el,a)]}),(0,i.useEffect)((()=>{let t,n;e.noKatex||a||(t=document.createElement("script"),t.src=(null==r?void 0:r.js)||hl.js,t.onload=()=>{o(!0)},t.id="md-katex",n=document.createElement("link"),n.rel="stylesheet",n.href=(null==r?void 0:r.css)||hl.css,n.id="md-katexCss",wl(t,"katex"),wl(n))}),[]),s};var Oc=i.memo((e=>{const{onChange:t}=e,{editorId:n,previewOnly:r,previewTheme:a,showCodeRowNumber:s}=(0,i.useContext)(Gc),o=(0,i.useRef)(!0),l=(0,i.useRef)(null),c=(0,i.useRef)(null),u=(0,i.useRef)(null),{html:h}=(e=>{var t,n,r,a;const{onHtmlChanged:s=(()=>{}),onGetCatalog:o=(()=>{})}=e,{editorId:l,usedLanguageText:c,showCodeRowNumber:u,highlight:h,previewOnly:f}=(0,i.useContext)(Gc),{markedRenderer:p,markedOptions:d,markedExtensions:m,editorConfig:g}=dl,y=null==(n=null==(t=dl.editorExtensions)?void 0:t.highlight)?void 0:n.instance,v=null==(a=null==(r=dl.editorExtensions)?void 0:r.mermaid)?void 0:a.instance,[b,k]=(0,i.useState)((()=>!!y)),E=(0,i.useRef)([]),[x]=(0,i.useState)((()=>{let t=new Fc.Renderer;const n=t.code;t.code=(r,i,a)=>{var s;if(!e.noMermaid&&"mermaid"===i){const e=`md-mermaid-${Date.now().toString(36)}`;try{let t="";return t=v?v.mermaidAPI.render(e,r):"undefined"!=typeof window&&window.mermaid?window.mermaid.mermaidAPI.render(e,r):`<div class="mermaid">${r}</div>`,`<div class="md-mermaid">${t}</div>`}catch(t){if("undefined"!=typeof document){const t=document.querySelector(`#${e}`);if(t){const e=t.outerHTML;return null==(s=t.parentElement)||s.remove(),e}}return""}}return n.call(t,r,i,a)},t.image=(e,t,n)=>`<span class="figure"><img src="${e}" title="${t||""}" alt="${n||""}" zoom><span class="figcaption">${n||""}</span></span>`,t.listitem=(e,t)=>t?`<li class="li-task">${e}</li>`:`<li>${e}</li>`;const r=t.heading;p instanceof Function&&(t=p(t));const i=t.heading,a=r!==i;return t.heading=(n,r,s,o)=>{if(E.current.push({text:s,level:r}),a)return i.call(t,n,r,s,o,E.current.length);const l=e.markedHeadingId(s,r,E.current.length);return n!==s?`<h${r} id="${l}">${n}</h${r}>`:`<h${r} id="${l}"><a href="#${l}">${s}</a></h${r}>`},Fc.setOptions(Xo({breaks:!0},d)),y&&Fc.setOptions({highlight:(e,t)=>{let n="";const r=y.getLanguage(t);return n=t&&r?y.highlight(e,{language:t,ignoreIllegals:!0}).value:y.highlightAuto(e).value,u?bl(n):`<span class="code-block">${n}</span>`}}),m instanceof Array&&m.length>0&&Fc.use({extensions:m}),t})),w=Lc(e,Fc),{reRender:S,mermaidInited:C}=Nc(e),P=()=>{Fc.setOptions({highlight:(e,t)=>{let n="";const r=window.hljs.getLanguage(t);return n=t&&r?window.hljs.highlight(e,{language:t,ignoreIllegals:!0}).value:window.hljs.highlightAuto(e).value,u?bl(n):`<span class="code-block">${n}</span>`}}),k(!0)};(0,i.useEffect)((()=>{let e,t;y||(e=document.createElement("link"),e.rel="stylesheet",e.href=h.css,e.id="md-hlCss",t=document.createElement("script"),t.src=h.js,t.onload=P,t.id="md-hljs",wl(e),wl(t,"hljs"))}),[]),(0,i.useEffect)((()=>{Sl("md-hlCss","href",h.css)}),[h.css]);const[_,T]=(0,i.useState)((()=>e.sanitize(Fc(e.value||"",{renderer:x}))));return(0,i.useEffect)((()=>{const t=setTimeout((()=>{E.current=[];const t=e.sanitize(Fc(e.value||"",{renderer:x}));s(t),T(t),o(E.current),Jo.emit(l,"catalogChanged",E.current)}),void 0!==(null==g?void 0:g.renderDelay)?null==g?void 0:g.renderDelay:f?0:500);return()=>{clearTimeout(t)}}),[e.value,b,C,S,w]),(0,i.useEffect)((()=>{Jo.on(l,{name:"pushCatalog",callback(){Jo.emit(l,"catalogChanged",E.current)}})}),[]),(0,i.useEffect)((()=>{document.querySelectorAll(`#${l} .md-preview pre`).forEach((e=>{var t;const n=(null==(t=c.copyCode)?void 0:t.text)||"复制代码",r=document.createElement("span");r.setAttribute("class","copy-button"),r.innerText=n,r.addEventListener("click",(()=>{var t,i;const a=zl(e.querySelector("code").innerText),s=(null==(t=c.copyCode)?void 0:t.successTips)||"已复制！",o=(null==(i=c.copyCode)?void 0:i.failTips)||"已复制！";r.innerText=a?s:o,setTimeout((()=>{r.innerText=n}),1500)})),e.appendChild(r)}))}),[_]),{html:_}})(e);return((e,t,n,r,a)=>{const{previewOnly:s}=(0,i.useContext)(Gc),[o,l]=(0,i.useState)({clear(){},init(){}});(0,i.useEffect)((()=>{if(!s&&(r.current||a.current)){const[e,t]=yl(n.current,r.current||a.current);l({init:e,clear:t})}}),[]),(0,i.useEffect)((()=>{e.setting.preview&&!s&&e.scrollAuto&&setTimeout((()=>{o.clear(),o.init()}),0)}),[t]),(0,i.useEffect)((()=>{if((e.setting.preview||e.setting.htmlPreview)&&!s&&e.scrollAuto){o.clear();const[e,t]=yl(n.current,r.current||a.current);l({init:e,clear:t}),e()}}),[e.setting.preview,e.setting.htmlPreview]),(0,i.useEffect)((()=>{e.scrollAuto?o.init():o.clear()}),[e.scrollAuto])})(e,h,l,c,u),((e,t,n)=>{var r,a;const{historyLength:s,editorId:o}=(0,i.useContext)(Gc),l=(0,i.useRef)({list:[{content:e.value,startPos:(null==(r=t.current)?void 0:r.selectionStart)||0,endPos:(null==(a=t.current)?void 0:a.selectionEnd)||0}],userUpdated:!0,curr:0}),c=(0,i.useRef)(Rc),u=n=>{var r,i;const a=(null==(r=t.current)?void 0:r.selectionStart)||0,s=(null==(i=t.current)?void 0:i.selectionEnd)||0;l.current.list[l.current.curr].startPos=a,l.current.list[l.current.curr].endPos=s,l.current.userUpdated=!1,l.current.curr=n;const u=l.current.list[l.current.curr];c.current=[u.startPos,u.endPos],e.onChange(u.content),ml(t.current,u.startPos,u.endPos).then((()=>{Jo.emit(o,"selectTextChange")}))},h=e=>{var n,r;(c.current===Rc||e)&&(c.current=[(null==(n=t.current)?void 0:n.selectionStart)||0,(null==(r=t.current)?void 0:r.selectionEnd)||0])};(0,i.useEffect)((()=>{n&&(e=>{var n,r;clearTimeout(Ic);const i=(null==(n=t.current)?void 0:n.selectionStart)||0,a=(null==(r=t.current)?void 0:r.selectionEnd)||0;Ic=setTimeout((()=>{if(l.current.userUpdated){l.current.curr<l.current.list.length-1&&(l.current.list=l.current.list.slice(0,l.current.curr+1)),l.current.list.length>s&&l.current.list.shift();const t=l.current.list.pop()||{startPos:0,endPos:0,content:e};t.startPos=c.current[0],t.endPos=c.current[1],c.current=Rc,Array.prototype.push.call(l.current.list,t,{content:e,startPos:i,endPos:a}),l.current.curr=l.current.list.length-1}else l.current.userUpdated=!0}),150)})(e.value)}),[e.value,n]),(0,i.useEffect)((()=>{Jo.emit(o,"selectTextChange")}),[e.value]),(0,i.useEffect)((()=>{Jo.on(o,{name:"ctrlZ",callback(){u(l.current.curr-1<0?0:l.current.curr-1)}}),Jo.on(o,{name:"ctrlShiftZ",callback(){u(l.current.curr+1===l.current.list.length?l.current.curr:l.current.curr+1)}}),Jo.on(o,{name:"saveHistoryPos",callback:h})}),[])})(e,l,o),((e,t)=>{const n=(0,i.useRef)(""),{previewOnly:r,tabWidth:a,editorId:s}=(0,i.useContext)(Gc);(0,i.useEffect)((()=>{var i;r||(null==(i=t.current)||i.addEventListener("keypress",(n=>{var r,i,a;if("Enter"===n.key){const s=null==(r=t.current)?void 0:r.selectionStart,o=null==(i=t.current)?void 0:i.value.substring(0,s),l=null==(a=t.current)?void 0:a.value.substring(s),c=null==o?void 0:o.lastIndexOf("\n"),u=null==o?void 0:o.substring(c+1,s);if(/^\d+\.\s|^-\s/.test(u))if(n.cancelBubble=!0,n.preventDefault(),n.stopPropagation(),/^\d+\.\s+$|^-\s+$/.test(u)){const n=null==o?void 0:o.replace(new RegExp(u+"$"),"");e.onChange(n+l),ml(t.current,null==n?void 0:n.length)}else if(/^-\s+.+/.test(u))e.onChange(gl(t.current,"\n- ",{}));else{const n=null==u?void 0:u.match(/\d+(?=\.)/),r=n&&Number(n[0])+1||1;e.onChange(gl(t.current,`\n${r}. `,{}))}}})),Jo.on(s,{name:"selectTextChange",callback(){n.current=(e=>{var t;return navigator.userAgent.indexOf("Firefox")>-1?e.value.substring(e.selectionStart,e.selectionEnd):(null==(t=window.getSelection())?void 0:t.toString())||""})(t.current)}}))}),[]);const o=(r,i={})=>{e.onChange(((e,t="",n,r={})=>{var i,a,s,o,l;let c,u,h="",f=0,p=0,d=!1;const m=null==(i=dl.editorConfig)?void 0:i.mermaidTemplate;if(/^h[1-6]{1}$/.test(e)){const n=e.replace(/^h(\d)/,((e,t)=>new Array(Number(t)).fill("#",0,t).join("")));h=`${n} ${t}`,f=n.length+1}else{if("prettier"===e){const e=window.prettier||(null==(s=null==(a=dl.editorExtensions)?void 0:a.prettier)?void 0:s.prettierInstance),t=window.prettierPlugins||[null==(l=null==(o=dl.editorExtensions)?void 0:o.prettier)?void 0:l.parserMarkdownInstance];return e&&void 0!==t[0]?e.format(n.value,{parser:"markdown",plugins:t}):(Jo.emit(r.editorId,"errorCatcher",{name:"prettier",message:"prettier is undefined"}),n.value)}switch(e){case"bold":h=`**${t}**`,f=2,p=-2;break;case"underline":h=`<u>${t}</u>`,f=3,p=-4;break;case"italic":h=`*${t}*`,f=1,p=-1;break;case"strikeThrough":h=`~${t}~`,f=1,p=-1;break;case"sub":h=`<sub>${t}</sub>`,f=5,p=-6;break;case"sup":h=`<sup>${t}</sup>`,f=5,p=-6;break;case"codeRow":h="`"+t+"`",f=1,p=-1;break;case"quote":h=`> ${t}`,f=2;break;case"orderedList":h=`1. ${t}`,f=3;break;case"unorderedList":h=`- ${t}`,f=2;break;case"code":h="```language\n"+t+"\n```\n",f=3,p=11-h.length,d=!0;break;case"table":{h="|";const{selectedShape:e={x:1,y:1}}=r,{x:t,y:n}=e;for(let e=0;e<=n;e++)h+=" col |";h+="\n|";for(let e=0;e<=n;e++)h+=" - |";for(let e=0;e<=t;e++){h+="\n|";for(let e=0;e<=n;e++)h+=" content |"}f=2,p=5-h.length,d=!0;break}case"link":{const{desc:e,url:t}=r;h=`[${e}](${t})`;break}case"image":{const{desc:e,url:t,urls:n}=r;h=n instanceof Array?n.reduce(((t,n)=>t+`![${e}](${n})\n`),""):`![${e}](${t})\n`;break}case"tab":{const{tabWidth:e=2}=r,i=new Array(e).fill(" ").join("");if(""===t)h=i;else if(/\n/.test(t)){const{prefixStr:r,subfixStr:a,prefixSupply:s,subfixSupply:o}=Mc(n),l=`${s}${t}${o}`.split("\n");h=l.map((e=>`${i}${e}`)).join("\n"),c=r.substring(0,r.length-s.length),u=a.substring(o.length,a.length),d=!0,f=e,p=-s.length-o.length}else{const e=n.value.substring(0,n.selectionStart);/\n$/.test(e)||""===e?(h=`${i}${t}`,d=!0):h=i}break}case"shiftTab":{const{tabWidth:e=2}=r,{prefixStr:i,prefixStrEndRow:a,subfixStrEndRow:s,prefixSupply:o,subfixSupply:l}=Mc(n),c=new RegExp(`^\\s{${e}}`),u=(r=!1,u=!1)=>{const f=`${o}${t}${l}`;if(c.test(f)){const o=i.length-(u?0:e),l=r?o+t.length-e:o;return ml(n,o,l),`${a}${f.replace(c,"")}${s}`}if(/^\s/.test(f)){const e=f.replace(/^\s/,""),i=f.length-e.length,o=n.selectionStart-(u?0:i),l=r?o+t.length-i:o;return ml(n,o,l),`${a}${e}${s}`}h=t};if(""===t){const e=u();if(e)return e}else{if(/\n/.test(t)){const r=`${o}${t}${l}`.split("\n");let[i,u]=[0,0];const h=r.map(((t,n)=>{if(c.test(t))return 0===n&&(i=e),u+=e,t.replace(c,"");if(/^\s/.test(t)){const e=t.replace(/^\s/,"");return u+=t.length-e.length,e}return t})).join("\n");return ml(n,n.selectionStart-i,n.selectionEnd-u),`${a}${h}${s}`}{const e=u(!0,!0);if(e)return e}}break}case"ctrlC":{const{prefixSupply:e,subfixSupply:r}=Mc(n);return zl(""===t?`${e}${r}`:t),n.value}case"ctrlX":{const{prefixStrEndRow:e,subfixStrEndRow:r,prefixStr:i,subfixStr:a,prefixSupply:s,subfixSupply:o}=Mc(n);return""===t?(zl(`${s}${o}`),ml(n,e.length),`${e}${r.replace(/^\n/,"")}`):(zl(t),ml(n,i.length),`${i}${a}`)}case"ctrlD":{const{prefixStrEndRow:e,subfixStrEndRow:t}=Mc(n);return ml(n,e.length),`${e}${t.replace(/^\n/,"")}`}case"flow":h=`\`\`\`mermaid\n${(null==m?void 0:m.flow)||"flowchart TD \n  Start --\x3e Stop"}\n\`\`\`\n`,f=2;break;case"sequence":h=`\`\`\`mermaid\n${(null==m?void 0:m.sequence)||"sequenceDiagram\n  A->>B: hello!\n  B--\x3e>A: hi!\n  A-)B: bye!"}\n\`\`\`\n`,f=2;break;case"gantt":h=`\`\`\`mermaid\n${(null==m?void 0:m.gantt)||"gantt\ntitle A Gantt Diagram\ndateFormat  YYYY-MM-DD\nsection Section\nA task  :a1, 2014-01-01, 30d\nAnother task  :after a1, 20d"}\n\`\`\`\n`,f=2;break;case"class":h=`\`\`\`mermaid\n${(null==m?void 0:m.class)||"classDiagram\n  class Animal\n  Vehicle <|-- Car"}\n\`\`\`\n`,f=2;break;case"state":h=`\`\`\`mermaid\n${(null==m?void 0:m.state)||"stateDiagram-v2\n  s1 --\x3e s2"}\n\`\`\`\n`,f=2;break;case"pie":h=`\`\`\`mermaid\n${(null==m?void 0:m.pie)||'pie title Pets adopted by volunteers\n  "Dogs" : 386\n  "Cats" : 85\n  "Rats" : 15'}\n\`\`\`\n`,f=2;break;case"relationship":h=`\`\`\`mermaid\n${(null==m?void 0:m.relationship)||"erDiagram\n  CAR ||--o{ NAMED-DRIVER : allows\n  PERSON ||--o{ NAMED-DRIVER : is"}\n\`\`\`\n`,f=2;break;case"journey":h=`\`\`\`mermaid\n${(null==m?void 0:m.journey)||"journey\n  title My working day\n  section Go to work\n    Make tea: 5: Me\n    Go upstairs: 3: Me\n    Do work: 1: Me, Cat\n  section Go home\n    Go downstairs: 5: Me\n    Sit down: 5: Me"}\n\`\`\`\n`,f=2;break;case"katexInline":h="$$",f=1,p=-1;break;case"katexBlock":h="$$\n\n$$\n",f=1,p=-4}}return gl(n,h,{deviationStart:f,deviationEnd:p,select:d,prefixVal:c,subfixVal:u})})(r,n.current,t.current,Zo(Xo({},i),{tabWidth:a,editorId:s})))};(0,i.useEffect)((()=>{r||(Jo.remove(s,"replace",o),Jo.on(s,{name:"replace",callback:o}))}),[t])})(e,l),(e=>{const{editorId:t,previewOnly:n}=(0,i.useContext)(Gc),r=e=>{if(e.clipboardData&&e.clipboardData.files.length>0){const{files:n}=e.clipboardData;Jo.emit(t,"uploadImage",Array.from(n).filter((e=>/image\/.*/.test(e.type)))),e.preventDefault()}};(0,i.useEffect)((()=>{var t;return n||null==(t=e.current)||t.addEventListener("paste",r),()=>{var t;n||null==(t=e.current)||t.removeEventListener("paste",r)}}),[])})(l),(e=>{const{editorId:t}=(0,i.useContext)(Gc);let n=()=>{};(0,i.useEffect)((()=>{n=kl((()=>{const e=document.querySelectorAll(`#${t}-preview img[zoom]`);0!==e.length&&Wl(e,{background:"#00000073"})})),n()}),[e])})(h),i.createElement(i.Fragment,null,i.createElement("div",{className:"md-content"},!r&&i.createElement("div",{className:"md-input-wrapper"},i.createElement("textarea",{id:`${n}-textarea`,ref:l,value:e.value,onKeyDown:()=>{Jo.emit(n,"saveHistoryPos",!0)},onCompositionStart:()=>{o.current=!1},onInput:e=>{t(e.target.value)},onCompositionEnd:()=>{o.current=!0},className:e.setting.preview||e.setting.htmlPreview?"":"textarea-only",placeholder:e.placeholder})),e.setting.preview&&i.createElement("div",{id:`${n}-preview-wrapper`,className:"md-preview-wrapper",ref:c,key:"content-preview-wrapper"},i.createElement("div",{id:`${n}-preview`,className:xl(["md-preview",`${a}-theme`,s&&"md-scrn"]),dangerouslySetInnerHTML:{__html:h}})),e.setting.htmlPreview&&i.createElement("div",{className:"md-preview-wrapper",ref:u,key:"html-preview-wrapper"},i.createElement("div",{className:"md-html"},h))))})),zc=({modelValue:e})=>{const{usedLanguageText:t}=(0,i.useContext)(Gc);return(0,i.useMemo)((()=>{var n;return i.createElement("div",{className:"md-footer-item"},i.createElement("label",{className:"md-footer-label"},null==(n=t.footer)?void 0:n.markdownTotal,":"),i.createElement("span",null,e.length))}),[t,e])},Vc=e=>i.createElement("div",{className:xl(["md-checkbox",e.checked&&"md-checkbox-checked"]),onClick:()=>{e.onChange(!e.checked)}}),Bc=e=>{const{usedLanguageText:t}=(0,i.useContext)(Gc);return(0,i.useMemo)((()=>{var n;return i.createElement("div",{className:"md-footer-item"},i.createElement("label",{className:"md-footer-label",onClick:()=>{e.onScrollAutoChange(!e.scrollAuto)}},null==(n=t.footer)?void 0:n.scrollAuto),i.createElement(Vc,{checked:e.scrollAuto,onChange:e.onScrollAutoChange}))}),[e.scrollAuto,e.onScrollAutoChange,t])},$c=i.memo((e=>{const t=(0,i.useCallback)((t=>{if(!ll.includes(t))return e.defFooters instanceof Array&&e.defFooters[t]||"";switch(t){case"markdownTotal":return i.createElement(zc,{modelValue:e.modelValue,key:"markdown-total"});case"scrollSwitch":return i.createElement(Bc,{scrollAuto:e.scrollAuto,onScrollAutoChange:e.onScrollAutoChange,key:"scroll-auto"})}}),[e.modelValue,e.scrollAuto,e.onScrollAutoChange,e.defFooters]),[n,r]=(0,i.useMemo)((()=>{const n=e.footers.indexOf("="),r=-1===n?e.footers:e.footers.slice(0,n),i=-1===n?[]:e.footers.slice(n,Number.MAX_SAFE_INTEGER);return[r.map((e=>t(e))),i.map((e=>t(e)))]}),[e.footers,t]);return i.createElement("div",{className:"md-footer"},i.createElement("div",{className:"md-footer-left"},n),i.createElement("div",{className:"md-footer-right"},r))}));const jc=({tocItem:e,markedHeadingId:t,scrollElement:n,onClick:r})=>i.createElement("div",{className:"md-catalog-link",onClick:i=>{r&&r(i,e),i.stopPropagation();const a=t(e.text,e.level,e.index),s=document.getElementById(a),o=n instanceof Element?n:document.querySelector(n);if(s&&o){let e=s.offsetParent,t=s.offsetTop;if(o.contains(e))for(;e&&o!=e;)t+=null==e?void 0:e.offsetTop,e=null==e?void 0:e.offsetParent;null==o||o.scrollTo({top:t,behavior:"smooth"})}}},i.createElement("span",{title:e.text},e.text),i.createElement("div",{className:"md-catalog-wrapper"},e.children&&e.children.map((e=>i.createElement(jc,{markedHeadingId:t,key:e.text,tocItem:e,scrollElement:n,onClick:r})))));var Hc=i.memo((e=>{const{editorId:t,markedHeadingId:n=pl.markedHeadingId,theme:r="light"}=e,[a,s]=(0,i.useState)([]),o=(0,i.useMemo)((()=>{const e=[];return a.forEach((({text:t,level:n},r)=>{const i={level:n,text:t,index:r+1};if(0===e.length)e.push(i);else{let t=e[e.length-1];if(i.level>t.level)for(let e=t.level+1;e<=6;e++){const{children:e}=t;if(!e){t.children=[i];break}if(t=e[e.length-1],i.level<=t.level){e.push(i);break}}else e.push(i)}})),e}),[a]),[l]=(0,i.useState)((()=>e.scrollElement||`#${t}-preview-wrapper`));return(0,i.useEffect)((()=>{Jo.on(t,{name:"catalogChanged",callback:e=>{s(e)}}),Jo.emit(t,"pushCatalog")}),[]),i.createElement("div",{className:`md-catalog${"dark"===r?"-dark":""} ${e.className||""} `,style:e.style},o.map((t=>i.createElement(jc,{markedHeadingId:n,tocItem:t,key:t.text,scrollElement:l,onClick:e.onClick}))))}));const Gc=(0,i.createContext)({editorId:"",tabWidth:2,theme:"light",highlight:{css:"",js:""},historyLength:10,previewOnly:!1,showCodeRowNumber:!1,usedLanguageText:cl["zh-CN"],previewTheme:"default"}),qc=e=>{const{modelValue:t=pl.modelValue,theme:n=pl.theme,className:r=pl.className,toolbars:a=pl.toolbars,toolbarsExclude:s=pl.toolbarsExclude,defToolbars:o=pl.defToolbars,previewOnly:l=pl.previewOnly,editorId:c=pl.editorId,tabWidth:u=pl.tabWidth,historyLength:h=pl.historyLength,showCodeRowNumber:f=pl.showCodeRowNumber,previewTheme:p=pl.previewTheme,noPrettier:d=pl.noPrettier,tableShape:m=pl.tableShape,noMermaid:g=pl.noMermaid,noKatex:y=pl.noKatex,placeholder:v=pl.placeholder,onChange:b=pl.onChange,onHtmlChanged:k=pl.onHtmlChanged,onGetCatalog:E=pl.onGetCatalog,sanitize:x=pl.sanitize,onError:w=pl.onError,markedHeadingId:S=pl.markedHeadingId,footers:C=pl.footers,defFooters:P=pl.defFooters}=e,[_,T]=(0,i.useState)((()=>({scrollAuto:void 0===e.scrollAuto||!!e.scrollAuto}))),A=(0,i.useCallback)((e=>{T((t=>Zo(Xo({},t),{scrollAuto:e})))}),[T]),F=(0,i.useCallback)((e=>{Jo.emit(c,"saveHistoryPos"),b(e)}),[b]);(e=>{const{editorId:t=tl,noPrettier:n}=e,r=t=>{var r,i;return(null==(r=e.toolbars)?void 0:r.includes(t))&&!(null==(i=e.toolbarsExclude)?void 0:i.includes(t))&&!n},a=n=>{if(n.target===document.querySelector(`#${t}-textarea`))if(Jo.emit(t,"selectTextChange"),n.ctrlKey||n.metaKey)switch(n.code){case"KeyS":n.shiftKey?r("strikeThrough")&&Jo.emit(t,"replace","strikeThrough"):r("save")&&(Jo.emit(t,"onSave",e.modelValue),n.preventDefault());break;case"KeyB":r("bold")&&(Jo.emit(t,"replace","bold"),n.preventDefault());break;case"KeyU":n.shiftKey?r("unorderedList")&&(Jo.emit(t,"replace","unorderedList"),n.preventDefault()):r("underline")&&(Jo.emit(t,"replace","underline"),n.preventDefault());break;case"KeyI":n.shiftKey?r("image")&&(Jo.emit(t,"openModals","image"),n.preventDefault()):r("italic")&&(Jo.emit(t,"replace","italic"),n.preventDefault());break;case"Digit1":r("title")&&(Jo.emit(t,"replace","h1"),n.preventDefault());break;case"Digit2":r("title")&&(Jo.emit(t,"replace","h2"),n.preventDefault());break;case"Digit3":r("title")&&(Jo.emit(t,"replace","h3"),n.preventDefault());break;case"Digit4":r("title")&&(Jo.emit(t,"replace","h4"),n.preventDefault());break;case"Digit5":r("title")&&(Jo.emit(t,"replace","h5"),n.preventDefault());break;case"Digit6":r("title")&&(Jo.emit(t,"replace","h6"),n.preventDefault());break;case"ArrowUp":r("sup")&&(Jo.emit(t,"replace","sup"),n.preventDefault());break;case"ArrowDown":r("sub")&&(Jo.emit(t,"replace","sub"),n.preventDefault());break;case"KeyQ":if("a"===n.key)return void n.target.select();Jo.emit(t,"replace","quote"),n.preventDefault();break;case"KeyA":if("q"===n.key){Jo.emit(t,"replace","quote"),n.preventDefault();break}return;case"KeyO":r("orderedList")&&(Jo.emit(t,"replace","orderedList"),n.preventDefault());break;case"KeyC":if(n.shiftKey)r("code")&&(Jo.emit(t,"replace","code"),n.preventDefault());else{if(!n.altKey){n.preventDefault(),Jo.emit(t,"replace","ctrlC");break}r("codeRow")&&(Jo.emit(t,"replace","codeRow"),n.preventDefault())}break;case"KeyL":r("link")&&(Jo.emit(t,"openModals","link"),n.preventDefault());break;case"KeyZ":if("w"===n.key)return;n.shiftKey?r("next")&&(Jo.emit(t,"ctrlShiftZ"),n.preventDefault()):r("revoke")&&(Jo.emit(t,"ctrlZ"),n.preventDefault());break;case"KeyW":if("z"===n.key){n.shiftKey?r("next")&&(Jo.emit(t,"ctrlShiftZ"),n.preventDefault()):r("revoke")&&(Jo.emit(t,"ctrlZ"),n.preventDefault());break}return;case"KeyF":n.shiftKey&&r("prettier")&&(Jo.emit(t,"replace","prettier"),n.preventDefault());break;case"KeyT":n.altKey&&n.shiftKey&&r("table")&&(Jo.emit(t,"replace","table"),n.preventDefault());break;case"KeyX":Jo.emit(t,"replace","ctrlX"),n.preventDefault();break;case"KeyD":n.preventDefault(),Jo.emit(t,"replace","ctrlD")}else"Tab"===n.code&&(n.preventDefault(),n.shiftKey?Jo.emit(t,"replace","shiftTab"):Jo.emit(t,"replace","tab"))};(0,i.useEffect)((()=>(e.previewOnly||window.addEventListener("keydown",a),()=>{e.previewOnly||window.removeEventListener("keydown",a)})),[]),(0,i.useEffect)((()=>{if(e.previewOnly)return;const n=()=>{e.onSave&&e.onSave(e.modelValue)};Jo.remove(t,"onSave",n),Jo.on(t,{name:"onSave",callback:n})}),[e.modelValue])})(e),(e=>{var t,n,r,a,s,o;const{noPrettier:l,previewOnly:c,noIconfont:u}=e,{editorExtensions:h}=dl,f=l||!!(null==(n=null==(t=dl.editorExtensions)?void 0:t.prettier)?void 0:n.prettierInstance),p=l||!!(null==(a=null==(r=dl.editorExtensions)?void 0:r.prettier)?void 0:a.parserMarkdownInstance),d=!!(null==(o=null==(s=dl.editorExtensions)?void 0:s.cropper)?void 0:o.instance);(0,i.useEffect)((()=>{var e,t,n,r;const i=document.createElement("script");i.src=(null==h?void 0:h.iconfont)||"https://at.alicdn.com/t/font_2605852_pqekijay2ij.js",i.id="md-icon";const a=document.createElement("script"),s=document.createElement("script");a.src=(null==(e=null==h?void 0:h.prettier)?void 0:e.standaloneJs)||il.main,a.id="md-prettier",s.src=(null==(t=null==h?void 0:h.prettier)?void 0:t.parserMarkdownJs)||il.markdown,s.id="md-prettierMD";const o=document.createElement("link");o.rel="stylesheet",o.href=(null==(n=null==h?void 0:h.cropper)?void 0:n.css)||al.css,o.id="md-cropperCss";const l=document.createElement("script");l.src=(null==(r=null==h?void 0:h.cropper)?void 0:r.js)||al.js,l.id="md-cropper",c||(u||wl(i),d||(wl(o),wl(l)),f||wl(a),p||wl(s))}),[])})(e),(e=>{const{editorId:t=tl,previewOnly:n=!1}=e,r=(n,r)=>{e.onUploadImg&&e.onUploadImg(n,(e=>{Jo.emit(t,"replace","image",{desc:"",urls:e}),r&&r()}))};(0,i.useEffect)((()=>(n||(Jo.remove(t,"uploadImage",r),Jo.on(t,{name:"uploadImage",callback:r})),()=>{Jo.clear(t)})),[])})(e),((e,t)=>{(0,i.useEffect)((()=>{Jo.on(e,{name:"errorCatcher",callback:e=>{t instanceof Function&&t(e)}})}),[])})(c,w);const{catalogShow:M,catalogStyle:D}=(e=>{const{editorId:t=tl,toolbars:n=ol,toolbarsExclude:r=[]}=e,[a,s]=(0,i.useState)(!1);return(0,i.useEffect)((()=>{Jo.on(t,{name:"catalogShow",callback:()=>{s((e=>!e))}})}),[]),{catalogShow:(0,i.useMemo)((()=>!r.includes("catalog")&&n.includes("catalog")),[n,r]),catalogStyle:(0,i.useMemo)((()=>({display:a?"block":"none"})),[a])}})(e),[I,R,N,L]=(e=>{const{theme:t="light",codeTheme:n="atom",language:r="zh-CN"}=e,a=(0,i.useMemo)((()=>{var e;const r=null==(e=null==dl?void 0:dl.editorExtensions)?void 0:e.highlight,i=Xo(Xo({},fl),null==r?void 0:r.css);return{js:(null==r?void 0:r.js)||rl,css:i[n]?i[n][t]:fl.atom[t]}}),[t,n]),s=(0,i.useMemo)((()=>{var e;const t=Xo(Xo({},cl),null==(e=null==dl?void 0:dl.editorConfig)?void 0:e.languageUserDefined);return t[r]?t[r]:cl["zh-CN"]}),[r]),{preview:o=!0,htmlPreview:l=!1,pageFullScreen:c=!1}=e,[u,h]=(0,i.useState)({pageFullScreen:c,fullscreen:!1,preview:o,htmlPreview:!o&&l}),f=(0,i.useCallback)(((e,t)=>{h((n=>{const r=Zo(Xo({},n),{[e]:!n[e]});return"fullscreen"===e&&(t||n.fullscreen?r.fullscreen=!n[e]:r.fullscreen=n[e]),"preview"===e&&r.preview?r.htmlPreview=!1:"htmlPreview"===e&&r.htmlPreview&&(r.preview=!1),r}))}),[]);return(0,i.useEffect)((()=>{Cl=document.body.style.overflow}),[]),(0,i.useEffect)((()=>{u.pageFullScreen||u.fullscreen?document.body.style.overflow="hidden":document.body.style.overflow=Cl}),[u.pageFullScreen,u.fullscreen]),[a,s,u,f]})(e);return i.createElement(Gc.Provider,{value:{editorId:c,tabWidth:u,theme:n,highlight:I,historyLength:h,previewOnly:l,showCodeRowNumber:f,usedLanguageText:R,previewTheme:p}},i.createElement("div",{id:c,className:xl([el,r,"dark"===n&&"md-dark",N.fullscreen||N.pageFullScreen?"md-fullscreen":"",l&&"md-previewOnly"]),style:e.style},!l&&i.createElement(Ll,{noPrettier:d,toolbars:a,toolbarsExclude:s,setting:N,updateSetting:L,tableShape:m,defToolbars:o}),i.createElement(Oc,{value:t,onChange:F,setting:N,onHtmlChanged:k,onGetCatalog:E,sanitize:x,noMermaid:g,placeholder:v,noKatex:y,markedHeadingId:S,scrollAuto:_.scrollAuto}),!l&&(null==C?void 0:C.length)>0&&i.createElement($c,{modelValue:t,footers:C,defFooters:P,scrollAuto:_.scrollAuto,onScrollAutoChange:A}),M&&i.createElement(Hc,{theme:n,style:D,className:"md-catalog-editor",editorId:c,markedHeadingId:S})))};qc.DropdownToolbar=e=>{const{editorId:t}=(0,i.useContext)(Gc);return i.createElement(Tl,{relative:`#${t}-toolbar-wrapper`,visible:e.visible,onChange:e.onChange,overlay:e.overlay},i.createElement("div",{className:"md-toolbar-item",title:e.title||""},e.trigger))},qc.NormalToolbar=e=>i.createElement("div",{className:"md-toolbar-item",title:e.title,onClick:e.onClick},e.trigger),qc.MdCatalog=Hc,qc.ModalToolbar=e=>{const{width:t="auto",height:n="auto"}=e;return i.createElement(i.Fragment,null,i.createElement("div",{className:"md-toolbar-item",title:e.title,onClick:()=>{e.onClick instanceof Function&&e.onClick()}},e.trigger),i.createElement(Al,{width:t,height:n,title:e.modalTitle,visible:e.visible,onClose:()=>{e.onClose instanceof Function&&e.onClose()},showAdjust:e.showAdjust,isFullscreen:e.isFullscreen,onAdjust:t=>{e.onAdjust instanceof Function&&e.onAdjust(t)}},e.children))},qc.config=e=>{if(e)for(const t in e){const n=e[t];n&&(dl[t]=n)}},qc.extension={};var Uc=function(){A();const e=function(){let{matches:e}=(0,i.useContext)(p),t=e[e.length-1];return t?t.params:{}}(),[t,n]=(0,i.useState)({});return(0,i.useEffect)((()=>{Bo({id:e.id}).then((e=>{n(e.res[0]),console.log(e.res[0])}))}),[]),i.createElement("div",{className:"md-box-cc"},i.createElement("div",{className:"md-img",style:{background:"url(https://www.splitshire.com/wp-content/uploads/2021/10/SplitShire-20-4896.jpg)",backgroundSize:"cover"}}),i.createElement("div",{className:"md-box"},i.createElement(qc,{modelValue:t.text,previewOnly:!0}),";"))},Wc=n(248),Kc=n.n(Wc),Yc=function(){const e=(0,i.useRef)(null),[,t]=(0,i.useState)(),n=(0,i.useRef)(null),r=(0,i.useRef)([]),[a,s]=(0,i.useState)([]);(0,i.useRef)({}),(0,i.useEffect)((()=>{var t;Kc().loadAnimation({container:e.current,renderer:"svg",loop:!0,path:"https://assets2.lottiefiles.com/packages/lf20_ch1qp0yv.json"}),(t={},new Promise(((e,n)=>{zo("get","/getmessage",t).then((t=>{e(t)}),(e=>{console.log("网络异常~",e),n(e)}))}))).then((e=>{200===e.status&&(s(e.res),r.current=e.res)}))}),[]);return i.createElement("div",{className:"message-box"},i.createElement("div",{className:"message-list"},i.createElement("div",{className:"title"},"评论"),i.createElement("div",{className:"list"},a.map(((e,t)=>i.createElement("div",{className:"list-con",key:t},i.createElement("img",{src:e.pic?e.pic:"https://cdn.jim-nielsen.com/ios/512/dislyte-2022-06-08.png",alt:""}),i.createElement("div",{className:"list-text-box"},i.createElement("div",{className:e.name==N()("id")?"list-name color":"list-name"},e.name),i.createElement("div",{className:"list-text"},e.value),i.createElement("div",{className:"list-time"},$o(e.time))),e.name==N()("id")?i.createElement("button",{className:"delet",onClick:()=>((e,t)=>{var n;console.log(e),n={id:t,status:1},new Promise(((e,t)=>{zo("get","/delmessage",n).then((t=>{e(t)}),(e=>{console.log("网络异常~",e),t(e)}))})),s((()=>(a.splice(e,1),console.log(a),[...a])))})(t,e.id)},"删除"):""))))),i.createElement("div",{className:"message-img",ref:e}),i.createElement("div",{className:"message-text"},i.createElement("img",{src:"https://cdn.jim-nielsen.com/ios/512/dislyte-2022-06-08.png",alt:""}),i.createElement("input",{type:"text",placeholder:"请发送您的意见",ref:n}),i.createElement("button",{className:"msgpost",onClick:()=>{const e=N()("id");var t;n.current.value&&e&&((t={name:e,value:n.current.value,time:+new Date,pic:""},new Promise(((e,n)=>{zo("post","/message",t).then((t=>{e(t)}),(e=>{console.log("网络异常~",e),n(e)}))}))).then((e=>{200===e.status&&(Va.success("发送成功"),n.current.value="")})),s([{name:e,value:n.current.value,time:+new Date},...a]))}},"发送")))},Qc=function(){const[e,t]=(0,i.useState)("# hello md-editor-rt！"),n=(0,i.useRef)(null),r=(0,i.useRef)(null),a=(0,i.useRef)(null);return i.createElement("div",{className:"md"},i.createElement("div",{className:"md-box"},i.createElement(qc,{modelValue:e,onChange:t}),";"),i.createElement("div",null,i.createElement("input",{type:"text",ref:n,placeholder:"title"}),i.createElement("input",{type:"text",ref:r,placeholder:"tag"}),i.createElement("input",{type:"text",ref:a,placeholder:"img"}),i.createElement("button",{onClick:()=>{var t;console.log(n.current,r.current,a.current),n.current&&r.current&&a.current&&e&&(t={title:n.current.value,text:e,time:+new Date,tag:r.current.value,img:a.current.value},new Promise(((e,n)=>{zo("post","/postmd",t).then((t=>{e(t)}),(e=>{console.log("网络异常~",e),n(e)}))}))).then((e=>{console.log(e),200===e.status&&(Va.success("发送成功"),r.current.value="",a.current.value="",n.current.value="")}))}},"提交")))},Xc=()=>i.createElement("div",null,i.createElement(i.Suspense,{fallback:i.createElement("div",null,"Loading...")},i.createElement(D,null,i.createElement(F,{path:"/",element:i.createElement(Ho,null)}),i.createElement(F,{path:"/:id",element:i.createElement(Uc,null)}),i.createElement(F,{path:"/message",element:i.createElement(Yc,null)}),i.createElement(F,{path:"/post",element:i.createElement(Qc,null)}))));function Zc(e){let{basename:t,children:n,window:a}=e,h=(0,i.useRef)();null==h.current&&(h.current=function(e){void 0===e&&(e={});var t=e.window,n=void 0===t?document.defaultView:t,i=n.history;function a(){var e=n.location,t=e.pathname,r=e.search,a=e.hash,s=i.state||{};return[s.idx,{pathname:t,search:r,hash:a,state:s.usr||null,key:s.key||"default"}]}var h=null;n.addEventListener("popstate",(function(){if(h)y.call(h),h=null;else{var e=r.Pop,t=a(),n=t[0],i=t[1];if(y.length){if(null!=n){var s=d-n;s&&(h={action:e,location:i,retry:function(){w(-1*s)}},w(s))}}else x(e)}}));var f=r.Pop,p=a(),d=p[0],m=p[1],g=c(),y=c();function v(e){return"string"==typeof e?e:function(e){var t=e.pathname,n=void 0===t?"/":t,r=e.search,i=void 0===r?"":r,a=e.hash,s=void 0===a?"":a;return i&&"?"!==i&&(n+="?"===i.charAt(0)?i:"?"+i),s&&"#"!==s&&(n+="#"===s.charAt(0)?s:"#"+s),n}(e)}function b(e,t){return void 0===t&&(t=null),s({pathname:m.pathname,hash:"",search:""},"string"==typeof e?u(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function k(e,t){return[{usr:e.state,key:e.key,idx:t},v(e)]}function E(e,t,n){return!y.length||(y.call({action:e,location:t,retry:n}),!1)}function x(e){f=e;var t=a();d=t[0],m=t[1],g.call({action:f,location:m})}function w(e){i.go(e)}null==d&&(d=0,i.replaceState(s({},i.state,{idx:d}),""));var S={get action(){return f},get location(){return m},createHref:v,push:function e(t,a){var s=r.Push,o=b(t,a);if(E(s,o,(function(){e(t,a)}))){var l=k(o,d+1),c=l[0],u=l[1];try{i.pushState(c,"",u)}catch(e){n.location.assign(u)}x(s)}},replace:function e(t,n){var a=r.Replace,s=b(t,n);if(E(a,s,(function(){e(t,n)}))){var o=k(s,d),l=o[0],c=o[1];i.replaceState(l,"",c),x(a)}},go:w,back:function(){w(-1)},forward:function(){w(1)},listen:function(e){return g.push(e)},block:function(e){var t=y.push(e);return 1===y.length&&n.addEventListener(o,l),function(){t(),y.length||n.removeEventListener(o,l)}}};return S}({window:a}));let f=h.current,[p,d]=(0,i.useState)({action:f.action,location:f.location});return(0,i.useLayoutEffect)((()=>f.listen(d)),[f]),(0,i.createElement)(M,{basename:t,children:n,location:p.location,navigationType:p.action,navigator:f})}var Jc=n(495),eu=n.n(Jc),tu=function(e){const[t,n]=(0,i.useState)("block"),r=(0,i.useRef)(null),a=(0,i.useRef)(null);return i.createElement("div",{className:"login-box"},i.createElement("div",{className:"login"},i.createElement("div",{className:"title"},"登陆即注册"),i.createElement("div",{className:"name"},"账号:",i.createElement("input",{type:"text",placeholder:"请输入您的账号",ref:r})),i.createElement("div",{className:"password"},"密码:",i.createElement("input",{type:"password",placeholder:"请输入您的密码",ref:a})),i.createElement("button",{onClick:()=>{var t;console.log(r.current.value),console.log(a.current.value),(t={name:r.current.value,password:a.current.value},new Promise(((e,n)=>{zo("get","/login",t).then((t=>{e(t)}),(e=>{console.log("网络异常~",e),n(e)}))}))).then((t=>{console.log(t),"登陆成功"==t.msg?(Va.success("登陆成功"),eu()("id",r.current.value),e.ccc(!1),document.querySelector("html").style.overflow="auto"):"注册成功"==t.msg?(Va.success("注册成功"),eu()("id",r.current.value),e.ccc(!1),document.querySelector("html").style.overflow="auto"):Va.error("账号或者密码错误")}))}},"登陆/注册"),i.createElement("button",{onClick:()=>{e.ccc(!1),document.querySelector("html").style.overflow="auto"}},"关闭"),";"))},nu=function(){const[e,t]=(0,i.useState)(!1),[n,r]=(0,i.useState)("hello md-editor-rt！"),[a,s]=(0,i.useState)("");return(0,i.useEffect)((()=>{s(N()("id"))}),[]),i.createElement(i.Fragment,null,e?i.createElement(tu,{ccc:e=>{t(e),s(N()("id"))}}):"",i.createElement("div",null,i.createElement("div",{className:"header"},i.createElement("div",{className:"header-title"},i.createElement("div",null,"欢迎")),i.createElement("div",{className:"header-img"},i.createElement("img",{src:"https://cdn.jim-nielsen.com/ios/512/dislyte-2022-06-08.png",alt:""}),i.createElement("div",null,a||i.createElement("span",{onClick:()=>{t(!0)}},"登陆")))),i.createElement(Zc,null,i.createElement(Xc,null))))};(e=n.hmd(e))&&e.hot,a.createRoot(document.getElementById("root")).render(i.createElement(nu,null))},158:function(e){e.exports=function(e){const t=document.cookie.split(";");let n="";return t.forEach((t=>{t.split("=")[0].trim()===e&&(n=t.split("=")[1])})),n}},495:function(e){e.exports=function(e,t){var n=new Date;n.setTime(n.getTime()-288e5+108e5),document.cookie=`${e} = ${t};expires = ${n};path=/`}},184:function(e,t){var n;!function(){"use strict";var r={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var a=typeof n;if("string"===a||"number"===a)e.push(n);else if(Array.isArray(n)){if(n.length){var s=i.apply(null,n);s&&e.push(s)}}else if("object"===a)if(n.toString===Object.prototype.toString)for(var o in n)r.call(n,o)&&n[o]&&e.push(o);else e.push(n.toString())}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(n=function(){return i}.apply(t,[]))||(e.exports=n)}()},230:function(e){e.exports="object"==typeof self?self.FormData:window.FormData},248:function(module,exports,__webpack_require__){var factory;"undefined"!=typeof navigator&&(factory=function(){"use strict";var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(e){_useWebWorker=!!e},getWebWorker=function(){return _useWebWorker},setLocationHref=function(e){locationHref=e},getLocationHref=function(){return locationHref};function createTag(e){return document.createElement(e)}function extendPrototype(e,t){var n,r,i=e.length;for(n=0;n<i;n+=1)for(var a in r=e[n].prototype)Object.prototype.hasOwnProperty.call(r,a)&&(t.prototype[a]=r[a])}function getDescriptor(e,t){return Object.getOwnPropertyDescriptor(e,t)}function createProxyFunction(e){function t(){}return t.prototype=e,t}var audioControllerFactory=function(){function e(e){this.audios=[],this.audioFactory=e,this._volume=1,this._isMuted=!1}return e.prototype={addAudio:function(e){this.audios.push(e)},pause:function(){var e,t=this.audios.length;for(e=0;e<t;e+=1)this.audios[e].pause()},resume:function(){var e,t=this.audios.length;for(e=0;e<t;e+=1)this.audios[e].resume()},setRate:function(e){var t,n=this.audios.length;for(t=0;t<n;t+=1)this.audios[t].setRate(e)},createAudio:function(e){return this.audioFactory?this.audioFactory(e):window.Howl?new window.Howl({src:[e]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(e){this.audioFactory=e},setVolume:function(e){this._volume=e,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var e,t=this.audios.length;for(e=0;e<t;e+=1)this.audios[e].volume(this._volume*(this._isMuted?0:1))}},function(){return new e}}(),createTypedArray=function(){function e(e,t){var n,r=0,i=[];switch(e){case"int16":case"uint8c":n=1;break;default:n=1.1}for(r=0;r<t;r+=1)i.push(n);return i}return"function"==typeof Uint8ClampedArray&&"function"==typeof Float32Array?function(t,n){return"float32"===t?new Float32Array(n):"int16"===t?new Int16Array(n):"uint8c"===t?new Uint8ClampedArray(n):e(t,n)}:e}();function createSizedArray(e){return Array.apply(null,{length:e})}function _typeof$6(e){return _typeof$6="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$6(e)}var subframeEnabled=!0,expressionsPlugin=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),_shouldRoundValues=!1,bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};function ProjectInterface$1(){return{}}!function(){var e,t=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],n=t.length;for(e=0;e<n;e+=1)BMMath[t[e]]=Math[t[e]]}(),BMMath.random=Math.random,BMMath.abs=function(e){if("object"===_typeof$6(e)&&e.length){var t,n=createSizedArray(e.length),r=e.length;for(t=0;t<r;t+=1)n[t]=Math.abs(e[t]);return n}return Math.abs(e)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function roundValues(e){_shouldRoundValues=!!e}function bmRnd(e){return _shouldRoundValues?Math.round(e):e}function styleDiv(e){e.style.position="absolute",e.style.top=0,e.style.left=0,e.style.display="block",e.style.transformOrigin="0 0",e.style.webkitTransformOrigin="0 0",e.style.backfaceVisibility="visible",e.style.webkitBackfaceVisibility="visible",e.style.transformStyle="preserve-3d",e.style.webkitTransformStyle="preserve-3d",e.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(e,t,n,r){this.type=e,this.currentTime=t,this.totalTime=n,this.direction=r<0?-1:1}function BMCompleteEvent(e,t){this.type=e,this.direction=t<0?-1:1}function BMCompleteLoopEvent(e,t,n,r){this.type=e,this.currentLoop=n,this.totalLoops=t,this.direction=r<0?-1:1}function BMSegmentStartEvent(e,t,n){this.type=e,this.firstFrame=t,this.totalFrames=n}function BMDestroyEvent(e,t){this.type=e,this.target=t}function BMRenderFrameErrorEvent(e,t){this.type="renderFrameError",this.nativeError=e,this.currentTime=t}function BMConfigErrorEvent(e){this.type="configError",this.nativeError=e}function BMAnimationConfigErrorEvent(e,t){this.type=e,this.nativeError=t}var createElementID=(_count=0,function(){return idPrefix$1+"__lottie_element_"+(_count+=1)}),_count;function HSVtoRGB(e,t,n){var r,i,a,s,o,l,c,u;switch(l=n*(1-t),c=n*(1-(o=6*e-(s=Math.floor(6*e)))*t),u=n*(1-(1-o)*t),s%6){case 0:r=n,i=u,a=l;break;case 1:r=c,i=n,a=l;break;case 2:r=l,i=n,a=u;break;case 3:r=l,i=c,a=n;break;case 4:r=u,i=l,a=n;break;case 5:r=n,i=l,a=c}return[r,i,a]}function RGBtoHSV(e,t,n){var r,i=Math.max(e,t,n),a=Math.min(e,t,n),s=i-a,o=0===i?0:s/i,l=i/255;switch(i){case a:r=0;break;case e:r=t-n+s*(t<n?6:0),r/=6*s;break;case t:r=n-e+2*s,r/=6*s;break;case n:r=e-t+4*s,r/=6*s}return[r,o,l]}function addSaturationToRGB(e,t){var n=RGBtoHSV(255*e[0],255*e[1],255*e[2]);return n[1]+=t,n[1]>1?n[1]=1:n[1]<=0&&(n[1]=0),HSVtoRGB(n[0],n[1],n[2])}function addBrightnessToRGB(e,t){var n=RGBtoHSV(255*e[0],255*e[1],255*e[2]);return n[2]+=t,n[2]>1?n[2]=1:n[2]<0&&(n[2]=0),HSVtoRGB(n[0],n[1],n[2])}function addHueToRGB(e,t){var n=RGBtoHSV(255*e[0],255*e[1],255*e[2]);return n[0]+=t/360,n[0]>1?n[0]-=1:n[0]<0&&(n[0]+=1),HSVtoRGB(n[0],n[1],n[2])}var rgbToHex=function(){var e,t,n=[];for(e=0;e<256;e+=1)t=e.toString(16),n[e]=1===t.length?"0"+t:t;return function(e,t,r){return e<0&&(e=0),t<0&&(t=0),r<0&&(r=0),"#"+n[e]+n[t]+n[r]}}(),setSubframeEnabled=function(e){subframeEnabled=!!e},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(e){expressionsPlugin=e},getExpressionsPlugin=function(){return expressionsPlugin},setDefaultCurveSegments=function(e){defaultCurveSegments=e},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(e){idPrefix$1=e},getIdPrefix=function(){return idPrefix$1};function createNS(e){return document.createElementNS(svgNS,e)}function _typeof$5(e){return _typeof$5="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$5(e)}var dataManager=function(){var e,t,n=1,r=[],i={onmessage:function(){},postMessage:function(t){e({data:t})}},a={postMessage:function(e){i.onmessage({data:e})}};function s(){t||(t=function(t){if(window.Worker&&window.Blob&&getWebWorker()){var n=new Blob(["var _workerSelf = self; self.onmessage = ",t.toString()],{type:"text/javascript"}),r=URL.createObjectURL(n);return new Worker(r)}return e=t,i}((function(e){if(a.dataManager||(a.dataManager=function(){function e(i,a){var s,o,l,c,u,h,f,p=i.length;for(o=0;o<p;o+=1)if("ks"in(s=i[o])&&!s.completed){if(s.completed=!0,s.tt&&(i[o-1].td=s.tt),s.hasMask){var d=s.masksProperties;for(c=d.length,l=0;l<c;l+=1)if(d[l].pt.k.i)r(d[l].pt.k);else for(h=d[l].pt.k.length,u=0;u<h;u+=1)d[l].pt.k[u].s&&r(d[l].pt.k[u].s[0]),d[l].pt.k[u].e&&r(d[l].pt.k[u].e[0])}0===s.ty?(s.layers=t(s.refId,a),e(s.layers,a)):4===s.ty?n(s.shapes):5===s.ty&&(0===(f=s).t.a.length&&f.t.p)}}function t(e,t){var n=function(e,t){for(var n=0,r=t.length;n<r;){if(t[n].id===e)return t[n];n+=1}return null}(e,t);return n?n.layers.__used?JSON.parse(JSON.stringify(n.layers)):(n.layers.__used=!0,n.layers):null}function n(e){var t,i,a;for(t=e.length-1;t>=0;t-=1)if("sh"===e[t].ty)if(e[t].ks.k.i)r(e[t].ks.k);else for(a=e[t].ks.k.length,i=0;i<a;i+=1)e[t].ks.k[i].s&&r(e[t].ks.k[i].s[0]),e[t].ks.k[i].e&&r(e[t].ks.k[i].e[0]);else"gr"===e[t].ty&&n(e[t].it)}function r(e){var t,n=e.i.length;for(t=0;t<n;t+=1)e.i[t][0]+=e.v[t][0],e.i[t][1]+=e.v[t][1],e.o[t][0]+=e.v[t][0],e.o[t][1]+=e.v[t][1]}function i(e,t){var n=t?t.split("."):[100,100,100];return e[0]>n[0]||!(n[0]>e[0])&&(e[1]>n[1]||!(n[1]>e[1])&&(e[2]>n[2]||!(n[2]>e[2])&&null))}var a,s=function(){var e=[4,4,14];function t(e){var t,n,r,i=e.length;for(t=0;t<i;t+=1)5===e[t].ty&&(void 0,r=(n=e[t]).t.d,n.t.d={k:[{s:r,t:0}]})}return function(n){if(i(e,n.v)&&(t(n.layers),n.assets)){var r,a=n.assets.length;for(r=0;r<a;r+=1)n.assets[r].layers&&t(n.assets[r].layers)}}}(),o=(a=[4,7,99],function(e){if(e.chars&&!i(a,e.v)){var t,r=e.chars.length;for(t=0;t<r;t+=1){var s=e.chars[t];s.data&&s.data.shapes&&(n(s.data.shapes),s.data.ip=0,s.data.op=99999,s.data.st=0,s.data.sr=1,s.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},e.chars[t].t||(s.data.shapes.push({ty:"no"}),s.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}),l=function(){var e=[5,7,15];function t(e){var t,n,r=e.length;for(t=0;t<r;t+=1)5===e[t].ty&&(n=void 0,"number"==typeof(n=e[t].t.p).a&&(n.a={a:0,k:n.a}),"number"==typeof n.p&&(n.p={a:0,k:n.p}),"number"==typeof n.r&&(n.r={a:0,k:n.r}))}return function(n){if(i(e,n.v)&&(t(n.layers),n.assets)){var r,a=n.assets.length;for(r=0;r<a;r+=1)n.assets[r].layers&&t(n.assets[r].layers)}}}(),c=function(){var e=[4,1,9];function t(e){var n,r,i,a=e.length;for(n=0;n<a;n+=1)if("gr"===e[n].ty)t(e[n].it);else if("fl"===e[n].ty||"st"===e[n].ty)if(e[n].c.k&&e[n].c.k[0].i)for(i=e[n].c.k.length,r=0;r<i;r+=1)e[n].c.k[r].s&&(e[n].c.k[r].s[0]/=255,e[n].c.k[r].s[1]/=255,e[n].c.k[r].s[2]/=255,e[n].c.k[r].s[3]/=255),e[n].c.k[r].e&&(e[n].c.k[r].e[0]/=255,e[n].c.k[r].e[1]/=255,e[n].c.k[r].e[2]/=255,e[n].c.k[r].e[3]/=255);else e[n].c.k[0]/=255,e[n].c.k[1]/=255,e[n].c.k[2]/=255,e[n].c.k[3]/=255}function n(e){var n,r=e.length;for(n=0;n<r;n+=1)4===e[n].ty&&t(e[n].shapes)}return function(t){if(i(e,t.v)&&(n(t.layers),t.assets)){var r,a=t.assets.length;for(r=0;r<a;r+=1)t.assets[r].layers&&n(t.assets[r].layers)}}}(),u=function(){var e=[4,4,18];function t(e){var n,r,i;for(n=e.length-1;n>=0;n-=1)if("sh"===e[n].ty)if(e[n].ks.k.i)e[n].ks.k.c=e[n].closed;else for(i=e[n].ks.k.length,r=0;r<i;r+=1)e[n].ks.k[r].s&&(e[n].ks.k[r].s[0].c=e[n].closed),e[n].ks.k[r].e&&(e[n].ks.k[r].e[0].c=e[n].closed);else"gr"===e[n].ty&&t(e[n].it)}function n(e){var n,r,i,a,s,o,l=e.length;for(r=0;r<l;r+=1){if((n=e[r]).hasMask){var c=n.masksProperties;for(a=c.length,i=0;i<a;i+=1)if(c[i].pt.k.i)c[i].pt.k.c=c[i].cl;else for(o=c[i].pt.k.length,s=0;s<o;s+=1)c[i].pt.k[s].s&&(c[i].pt.k[s].s[0].c=c[i].cl),c[i].pt.k[s].e&&(c[i].pt.k[s].e[0].c=c[i].cl)}4===n.ty&&t(n.shapes)}}return function(t){if(i(e,t.v)&&(n(t.layers),t.assets)){var r,a=t.assets.length;for(r=0;r<a;r+=1)t.assets[r].layers&&n(t.assets[r].layers)}}}();var h={completeData:function(n){n.__complete||(c(n),s(n),o(n),l(n),u(n),e(n.layers,n.assets),function(n,r){if(n){var i=0,a=n.length;for(i=0;i<a;i+=1)1===n[i].t&&(n[i].data.layers=t(n[i].data.refId,r),e(n[i].data.layers,r))}}(n.chars,n.assets),n.__complete=!0)}};return h.checkColors=c,h.checkChars=o,h.checkPathProperties=l,h.checkShapes=u,h.completeLayers=e,h}()),a.assetLoader||(a.assetLoader=function(){function e(e){var t=e.getResponseHeader("content-type");return t&&"json"===e.responseType&&-1!==t.indexOf("json")||e.response&&"object"===_typeof$5(e.response)?e.response:e.response&&"string"==typeof e.response?JSON.parse(e.response):e.responseText?JSON.parse(e.responseText):null}return{load:function(t,n,r,i){var a,s=new XMLHttpRequest;try{s.responseType="json"}catch(e){}s.onreadystatechange=function(){if(4===s.readyState)if(200===s.status)a=e(s),r(a);else try{a=e(s),r(a)}catch(e){i&&i(e)}};try{s.open("GET",t,!0)}catch(e){s.open("GET",n+"/"+t,!0)}s.send()}}}()),"loadAnimation"===e.data.type)a.assetLoader.load(e.data.path,e.data.fullPath,(function(t){a.dataManager.completeData(t),a.postMessage({id:e.data.id,payload:t,status:"success"})}),(function(){a.postMessage({id:e.data.id,status:"error"})}));else if("complete"===e.data.type){var t=e.data.animation;a.dataManager.completeData(t),a.postMessage({id:e.data.id,payload:t,status:"success"})}else"loadData"===e.data.type&&a.assetLoader.load(e.data.path,e.data.fullPath,(function(t){a.postMessage({id:e.data.id,payload:t,status:"success"})}),(function(){a.postMessage({id:e.data.id,status:"error"})}))})),t.onmessage=function(e){var t=e.data,n=t.id,i=r[n];r[n]=null,"success"===t.status?i.onComplete(t.payload):i.onError&&i.onError()})}function o(e,t){var i="processId_"+(n+=1);return r[i]={onComplete:e,onError:t},i}return{loadAnimation:function(e,n,r){s();var i=o(n,r);t.postMessage({type:"loadAnimation",path:e,fullPath:window.location.origin+window.location.pathname,id:i})},loadData:function(e,n,r){s();var i=o(n,r);t.postMessage({type:"loadData",path:e,fullPath:window.location.origin+window.location.pathname,id:i})},completeAnimation:function(e,n,r){s();var i=o(n,r);t.postMessage({type:"complete",animation:e,id:i})}}}(),ImagePreloader=function(){var e=function(){var e=createTag("canvas");e.width=1,e.height=1;var t=e.getContext("2d");return t.fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),e}();function t(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function n(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(e,t,n){var r="";if(e.e)r=e.p;else if(t){var i=e.p;-1!==i.indexOf("images/")&&(i=i.split("/")[1]),r=t+i}else r=n,r+=e.u?e.u:"",r+=e.p;return r}function i(e){var t=0,n=setInterval(function(){(e.getBBox().width||t>500)&&(this._imageLoaded(),clearInterval(n)),t+=1}.bind(this),50)}function a(e){var t={assetData:e},n=r(e,this.assetsPath,this.path);return dataManager.loadData(n,function(e){t.img=e,this._footageLoaded()}.bind(this),function(){t.img={},this._footageLoaded()}.bind(this)),t}function s(){this._imageLoaded=t.bind(this),this._footageLoaded=n.bind(this),this.testImageLoaded=i.bind(this),this.createFootageData=a.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return s.prototype={loadAssets:function(e,t){var n;this.imagesLoadedCb=t;var r=e.length;for(n=0;n<r;n+=1)e[n].layers||(e[n].t&&"seq"!==e[n].t?3===e[n].t&&(this.totalFootages+=1,this.images.push(this.createFootageData(e[n]))):(this.totalImages+=1,this.images.push(this._createImageData(e[n]))))},setAssetsPath:function(e){this.assetsPath=e||""},setPath:function(e){this.path=e||""},loadedImages:function(){return this.totalImages===this.loadedAssets},loadedFootages:function(){return this.totalFootages===this.loadedFootagesCount},destroy:function(){this.imagesLoadedCb=null,this.images.length=0},getAsset:function(e){for(var t=0,n=this.images.length;t<n;){if(this.images[t].assetData===e)return this.images[t].img;t+=1}return null},createImgData:function(t){var n=r(t,this.assetsPath,this.path),i=createTag("img");i.crossOrigin="anonymous",i.addEventListener("load",this._imageLoaded,!1),i.addEventListener("error",function(){a.img=e,this._imageLoaded()}.bind(this),!1),i.src=n;var a={img:i,assetData:t};return a},createImageData:function(t){var n=r(t,this.assetsPath,this.path),i=createNS("image");isSafari?this.testImageLoaded(i):i.addEventListener("load",this._imageLoaded,!1),i.addEventListener("error",function(){a.img=e,this._imageLoaded()}.bind(this),!1),i.setAttributeNS("http://www.w3.org/1999/xlink","href",n),this._elementHelper.append?this._elementHelper.append(i):this._elementHelper.appendChild(i);var a={img:i,assetData:t};return a},imageLoaded:t,footageLoaded:n,setCacheType:function(e,t){"svg"===e?(this._elementHelper=t,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}},s}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(e,t){if(this._cbs[e])for(var n=this._cbs[e],r=0;r<n.length;r+=1)n[r](t)},addEventListener:function(e,t){return this._cbs[e]||(this._cbs[e]=[]),this._cbs[e].push(t),function(){this.removeEventListener(e,t)}.bind(this)},removeEventListener:function(e,t){if(t){if(this._cbs[e]){for(var n=0,r=this._cbs[e].length;n<r;)this._cbs[e][n]===t&&(this._cbs[e].splice(n,1),n-=1,r-=1),n+=1;this._cbs[e].length||(this._cbs[e]=null)}}else this._cbs[e]=null}};var markerParser=function(){function e(e){for(var t,n=e.split("\r\n"),r={},i=0,a=0;a<n.length;a+=1)2===(t=n[a].split(":")).length&&(r[t[0]]=t[1].trim(),i+=1);if(0===i)throw new Error;return r}return function(t){for(var n=[],r=0;r<t.length;r+=1){var i=t[r],a={time:i.tm,duration:i.dr};try{a.payload=JSON.parse(t[r].cm)}catch(n){try{a.payload=e(t[r].cm)}catch(e){a.payload={name:t[r].cm}}}n.push(a)}return n}}(),ProjectInterface=function(){function e(e){this.compositions.push(e)}return function(){function t(e){for(var t=0,n=this.compositions.length;t<n;){if(this.compositions[t].data&&this.compositions[t].data.nm===e)return this.compositions[t].prepareFrame&&this.compositions[t].data.xt&&this.compositions[t].prepareFrame(this.currentFrame),this.compositions[t].compInterface;t+=1}return null}return t.compositions=[],t.currentFrame=0,t.registerComposition=e,t}}(),renderers={},registerRenderer=function(e,t){renderers[e]=t};function getRenderer(e){return renderers[e]}function _typeof$4(e){return _typeof$4="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$4(e)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0)};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(e){(e.wrapper||e.container)&&(this.wrapper=e.wrapper||e.container);var t="svg";e.animType?t=e.animType:e.renderer&&(t=e.renderer);var n=getRenderer(t);this.renderer=new n(this,e.rendererSettings),this.imagePreloader.setCacheType(t,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=t,""===e.loop||null===e.loop||void 0===e.loop||!0===e.loop?this.loop=!0:!1===e.loop?this.loop=!1:this.loop=parseInt(e.loop,10),this.autoplay=!("autoplay"in e)||e.autoplay,this.name=e.name?e.name:"",this.autoloadSegments=!Object.prototype.hasOwnProperty.call(e,"autoloadSegments")||e.autoloadSegments,this.assetsPath=e.assetsPath,this.initialSegment=e.initialSegment,e.audioFactory&&this.audioController.setAudioFactory(e.audioFactory),e.animationData?this.setupAnimation(e.animationData):e.path&&(-1!==e.path.lastIndexOf("\\")?this.path=e.path.substr(0,e.path.lastIndexOf("\\")+1):this.path=e.path.substr(0,e.path.lastIndexOf("/")+1),this.fileName=e.path.substr(e.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(e.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(e){dataManager.completeAnimation(e,this.configAnimation)},AnimationItem.prototype.setData=function(e,t){t&&"object"!==_typeof$4(t)&&(t=JSON.parse(t));var n={wrapper:e,animationData:t},r=e.attributes;n.path=r.getNamedItem("data-animation-path")?r.getNamedItem("data-animation-path").value:r.getNamedItem("data-bm-path")?r.getNamedItem("data-bm-path").value:r.getNamedItem("bm-path")?r.getNamedItem("bm-path").value:"",n.animType=r.getNamedItem("data-anim-type")?r.getNamedItem("data-anim-type").value:r.getNamedItem("data-bm-type")?r.getNamedItem("data-bm-type").value:r.getNamedItem("bm-type")?r.getNamedItem("bm-type").value:r.getNamedItem("data-bm-renderer")?r.getNamedItem("data-bm-renderer").value:r.getNamedItem("bm-renderer")?r.getNamedItem("bm-renderer").value:"canvas";var i=r.getNamedItem("data-anim-loop")?r.getNamedItem("data-anim-loop").value:r.getNamedItem("data-bm-loop")?r.getNamedItem("data-bm-loop").value:r.getNamedItem("bm-loop")?r.getNamedItem("bm-loop").value:"";"false"===i?n.loop=!1:"true"===i?n.loop=!0:""!==i&&(n.loop=parseInt(i,10));var a=r.getNamedItem("data-anim-autoplay")?r.getNamedItem("data-anim-autoplay").value:r.getNamedItem("data-bm-autoplay")?r.getNamedItem("data-bm-autoplay").value:!r.getNamedItem("bm-autoplay")||r.getNamedItem("bm-autoplay").value;n.autoplay="false"!==a,n.name=r.getNamedItem("data-name")?r.getNamedItem("data-name").value:r.getNamedItem("data-bm-name")?r.getNamedItem("data-bm-name").value:r.getNamedItem("bm-name")?r.getNamedItem("bm-name").value:"","false"===(r.getNamedItem("data-anim-prerender")?r.getNamedItem("data-anim-prerender").value:r.getNamedItem("data-bm-prerender")?r.getNamedItem("data-bm-prerender").value:r.getNamedItem("bm-prerender")?r.getNamedItem("bm-prerender").value:"")&&(n.prerender=!1),this.setParams(n)},AnimationItem.prototype.includeLayers=function(e){e.op>this.animationData.op&&(this.animationData.op=e.op,this.totalFrames=Math.floor(e.op-this.animationData.ip));var t,n,r=this.animationData.layers,i=r.length,a=e.layers,s=a.length;for(n=0;n<s;n+=1)for(t=0;t<i;){if(r[t].id===a[n].id){r[t]=a[n];break}t+=1}if((e.chars||e.fonts)&&(this.renderer.globalData.fontManager.addChars(e.chars),this.renderer.globalData.fontManager.addFonts(e.fonts,this.renderer.globalData.defs)),e.assets)for(i=e.assets.length,t=0;t<i;t+=1)this.animationData.assets.push(e.assets[t]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(e){this.animationData=e;var t=getExpressionsPlugin();t&&t.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var e=this.animationData.segments;if(!e||0===e.length||!this.autoloadSegments)return this.trigger("data_ready"),void(this.timeCompleted=this.totalFrames);var t=e.shift();this.timeCompleted=t.time*this.frameRate;var n=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(n,this.includeLayers.bind(this),function(){this.trigger("data_failed")}.bind(this))},AnimationItem.prototype.loadSegments=function(){this.animationData.segments||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(e){if(this.renderer)try{this.animationData=e,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(e),e.assets||(e.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(e.assets),this.markers=markerParser(e.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(e){this.triggerConfigError(e)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||"canvas"!==this.renderer.rendererType)&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.renderer.initItems(),setTimeout(function(){this.trigger("DOMLoaded")}.bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(){this.renderer.updateContainerSize()},AnimationItem.prototype.setSubframe=function(e){this.isSubframeEnabled=!!e},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!1!==this.isLoaded&&this.renderer)try{this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(e){this.triggerRenderFrameError(e)}},AnimationItem.prototype.play=function(e){e&&this.name!==e||!0===this.isPaused&&(this.isPaused=!1,this.trigger("_pause"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(e){e&&this.name!==e||!1===this.isPaused&&(this.isPaused=!0,this.trigger("_play"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(e){e&&this.name!==e||(!0===this.isPaused?this.play():this.pause())},AnimationItem.prototype.stop=function(e){e&&this.name!==e||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(e){for(var t,n=0;n<this.markers.length;n+=1)if((t=this.markers[n]).payload&&t.payload.name===e)return t;return null},AnimationItem.prototype.goToAndStop=function(e,t,n){if(!n||this.name===n){var r=Number(e);if(isNaN(r)){var i=this.getMarkerData(e);i&&this.goToAndStop(i.time,!0)}else t?this.setCurrentRawFrameValue(e):this.setCurrentRawFrameValue(e*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(e,t,n){if(!n||this.name===n){var r=Number(e);if(isNaN(r)){var i=this.getMarkerData(e);i&&(i.duration?this.playSegments([i.time,i.time+i.duration],!0):this.goToAndStop(i.time,!0))}else this.goToAndStop(r,t,n);this.play()}},AnimationItem.prototype.advanceTime=function(e){if(!0!==this.isPaused&&!1!==this.isLoaded){var t=this.currentRawFrame+e*this.frameModifier,n=!1;t>=this.totalFrames-1&&this.frameModifier>0?this.loop&&this.playCount!==this.loop?t>=this.totalFrames?(this.playCount+=1,this.checkSegments(t%this.totalFrames)||(this.setCurrentRawFrameValue(t%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(t):this.checkSegments(t>this.totalFrames?t%this.totalFrames:0)||(n=!0,t=this.totalFrames-1):t<0?this.checkSegments(t%this.totalFrames)||(!this.loop||this.playCount--<=0&&!0!==this.loop?(n=!0,t=0):(this.setCurrentRawFrameValue(this.totalFrames+t%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0)):this.setCurrentRawFrameValue(t),n&&(this.setCurrentRawFrameValue(t),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(e,t){this.playCount=0,e[1]<e[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=e[0]-e[1],this.timeCompleted=this.totalFrames,this.firstFrame=e[1],this.setCurrentRawFrameValue(this.totalFrames-.001-t)):e[1]>e[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=e[1]-e[0],this.timeCompleted=this.totalFrames,this.firstFrame=e[0],this.setCurrentRawFrameValue(.001+t)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(e,t){var n=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<e?n=e:this.currentRawFrame+this.firstFrame>t&&(n=t-e)),this.firstFrame=e,this.totalFrames=t-e,this.timeCompleted=this.totalFrames,-1!==n&&this.goToAndStop(n,!0)},AnimationItem.prototype.playSegments=function(e,t){if(t&&(this.segments.length=0),"object"===_typeof$4(e[0])){var n,r=e.length;for(n=0;n<r;n+=1)this.segments.push(e[n])}else this.segments.push(e);this.segments.length&&t&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(e){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),e&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(e){return!!this.segments.length&&(this.adjustSegment(this.segments.shift(),e),!0)},AnimationItem.prototype.destroy=function(e){e&&this.name!==e||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.renderer=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(e){this.currentRawFrame=e,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(e){this.playSpeed=e,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(e){this.playDirection=e<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setVolume=function(e,t){t&&this.name!==t||this.audioController.setVolume(e)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(e){e&&this.name!==e||this.audioController.mute()},AnimationItem.prototype.unmute=function(e){e&&this.name!==e||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(e){var t="";if(e.e)t=e.p;else if(this.assetsPath){var n=e.p;-1!==n.indexOf("images/")&&(n=n.split("/")[1]),t=this.assetsPath+n}else t=this.path,t+=e.u?e.u:"",t+=e.p;return t},AnimationItem.prototype.getAssetData=function(e){for(var t=0,n=this.assets.length;t<n;){if(e===this.assets[t].id)return this.assets[t];t+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(e){return e?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(e,t,n){try{this.renderer.getElementByPath(e).updateDocumentData(t,n)}catch(e){}},AnimationItem.prototype.trigger=function(e){if(this._cbs&&this._cbs[e])switch(e){case"enterFrame":this.triggerEvent(e,new BMEnterFrameEvent(e,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(e,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(e,new BMCompleteLoopEvent(e,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(e,new BMCompleteEvent(e,this.frameMult));break;case"segmentStart":this.triggerEvent(e,new BMSegmentStartEvent(e,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(e,new BMDestroyEvent(e,this));break;default:this.triggerEvent(e)}"enterFrame"===e&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(e,this.currentFrame,this.totalFrames,this.frameMult)),"loopComplete"===e&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(e,this.loop,this.playCount,this.frameMult)),"complete"===e&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(e,this.frameMult)),"segmentStart"===e&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(e,this.firstFrame,this.totalFrames)),"destroy"===e&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(e,this))},AnimationItem.prototype.triggerRenderFrameError=function(e){var t=new BMRenderFrameErrorEvent(e,this.currentFrame);this.triggerEvent("error",t),this.onError&&this.onError.call(this,t)},AnimationItem.prototype.triggerConfigError=function(e){var t=new BMConfigErrorEvent(e,this.currentFrame);this.triggerEvent("error",t),this.onError&&this.onError.call(this,t)};var animationManager=function(){var e={},t=[],n=0,r=0,i=0,a=!0,s=!1;function o(e){for(var n=0,i=e.target;n<r;)t[n].animation===i&&(t.splice(n,1),n-=1,r-=1,i.isPaused||u()),n+=1}function l(e,n){if(!e)return null;for(var i=0;i<r;){if(t[i].elem===e&&null!==t[i].elem)return t[i].animation;i+=1}var a=new AnimationItem;return h(a,e),a.setData(e,n),a}function c(){i+=1,d()}function u(){i-=1}function h(e,n){e.addEventListener("destroy",o),e.addEventListener("_active",c),e.addEventListener("_idle",u),t.push({elem:n,animation:e}),r+=1}function f(e){var o,l=e-n;for(o=0;o<r;o+=1)t[o].animation.advanceTime(l);n=e,i&&!s?window.requestAnimationFrame(f):a=!0}function p(e){n=e,window.requestAnimationFrame(f)}function d(){!s&&i&&a&&(window.requestAnimationFrame(p),a=!1)}return e.registerAnimation=l,e.loadAnimation=function(e){var t=new AnimationItem;return h(t,null),t.setParams(e),t},e.setSpeed=function(e,n){var i;for(i=0;i<r;i+=1)t[i].animation.setSpeed(e,n)},e.setDirection=function(e,n){var i;for(i=0;i<r;i+=1)t[i].animation.setDirection(e,n)},e.play=function(e){var n;for(n=0;n<r;n+=1)t[n].animation.play(e)},e.pause=function(e){var n;for(n=0;n<r;n+=1)t[n].animation.pause(e)},e.stop=function(e){var n;for(n=0;n<r;n+=1)t[n].animation.stop(e)},e.togglePause=function(e){var n;for(n=0;n<r;n+=1)t[n].animation.togglePause(e)},e.searchAnimations=function(e,t,n){var r,i=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),a=i.length;for(r=0;r<a;r+=1)n&&i[r].setAttribute("data-bm-type",n),l(i[r],e);if(t&&0===a){n||(n="svg");var s=document.getElementsByTagName("body")[0];s.innerText="";var o=createTag("div");o.style.width="100%",o.style.height="100%",o.setAttribute("data-bm-type",n),s.appendChild(o),l(o,e)}},e.resize=function(){var e;for(e=0;e<r;e+=1)t[e].animation.resize()},e.goToAndStop=function(e,n,i){var a;for(a=0;a<r;a+=1)t[a].animation.goToAndStop(e,n,i)},e.destroy=function(e){var n;for(n=r-1;n>=0;n-=1)t[n].animation.destroy(e)},e.freeze=function(){s=!0},e.unfreeze=function(){s=!1,d()},e.setVolume=function(e,n){var i;for(i=0;i<r;i+=1)t[i].animation.setVolume(e,n)},e.mute=function(e){var n;for(n=0;n<r;n+=1)t[n].animation.mute(e)},e.unmute=function(e){var n;for(n=0;n<r;n+=1)t[n].animation.unmute(e)},e.getRegisteredAnimations=function(){var e,n=t.length,r=[];for(e=0;e<n;e+=1)r.push(t[e].animation);return r},e}(),BezierFactory=function(){var e={getBezierEasing:function(e,n,r,i,a){var s=a||("bez_"+e+"_"+n+"_"+r+"_"+i).replace(/\./g,"p");if(t[s])return t[s];var o=new c([e,n,r,i]);return t[s]=o,o}},t={},n=.1,r="function"==typeof Float32Array;function i(e,t){return 1-3*t+3*e}function a(e,t){return 3*t-6*e}function s(e){return 3*e}function o(e,t,n){return((i(t,n)*e+a(t,n))*e+s(t))*e}function l(e,t,n){return 3*i(t,n)*e*e+2*a(t,n)*e+s(t)}function c(e){this._p=e,this._mSampleValues=r?new Float32Array(11):new Array(11),this._precomputed=!1,this.get=this.get.bind(this)}return c.prototype={get:function(e){var t=this._p[0],n=this._p[1],r=this._p[2],i=this._p[3];return this._precomputed||this._precompute(),t===n&&r===i?e:0===e?0:1===e?1:o(this._getTForX(e),n,i)},_precompute:function(){var e=this._p[0],t=this._p[1],n=this._p[2],r=this._p[3];this._precomputed=!0,e===t&&n===r||this._calcSampleValues()},_calcSampleValues:function(){for(var e=this._p[0],t=this._p[2],r=0;r<11;++r)this._mSampleValues[r]=o(r*n,e,t)},_getTForX:function(e){for(var t=this._p[0],r=this._p[2],i=this._mSampleValues,a=0,s=1;10!==s&&i[s]<=e;++s)a+=n;var c=a+(e-i[--s])/(i[s+1]-i[s])*n,u=l(c,t,r);return u>=.001?function(e,t,n,r){for(var i=0;i<4;++i){var a=l(t,n,r);if(0===a)return t;t-=(o(t,n,r)-e)/a}return t}(e,c,t,r):0===u?c:function(e,t,n,r,i){var a,s,l=0;do{(a=o(s=t+(n-t)/2,r,i)-e)>0?n=s:t=s}while(Math.abs(a)>1e-7&&++l<10);return s}(e,a,a+n,t,r)}},e}(),pooling={double:function(e){return e.concat(createSizedArray(e.length))}},poolFactory=function(e,t,n){var r=0,i=e,a=createSizedArray(i);return{newElement:function(){return r?a[r-=1]:t()},release:function(e){r===i&&(a=pooling.double(a),i*=2),n&&n(e),a[r]=e,r+=1}}},bezierLengthPool=poolFactory(8,(function(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}})),segmentsLengthPool=poolFactory(8,(function(){return{lengths:[],totalLength:0}}),(function(e){var t,n=e.lengths.length;for(t=0;t<n;t+=1)bezierLengthPool.release(e.lengths[t]);e.lengths.length=0}));function bezFunction(){var e=Math;function t(e,t,n,r,i,a){var s=e*r+t*i+n*a-i*r-a*e-n*t;return s>-.001&&s<.001}var n=function(e,t,n,r){var i,a,s,o,l,c,u=getDefaultCurveSegments(),h=0,f=[],p=[],d=bezierLengthPool.newElement();for(s=n.length,i=0;i<u;i+=1){for(l=i/(u-1),c=0,a=0;a<s;a+=1)o=bmPow(1-l,3)*e[a]+3*bmPow(1-l,2)*l*n[a]+3*(1-l)*bmPow(l,2)*r[a]+bmPow(l,3)*t[a],f[a]=o,null!==p[a]&&(c+=bmPow(f[a]-p[a],2)),p[a]=f[a];c&&(h+=c=bmSqrt(c)),d.percents[i]=l,d.lengths[i]=h}return d.addedLength=h,d};function r(e){this.segmentLength=0,this.points=new Array(e)}function i(e,t){this.partialLength=e,this.point=t}var a,s=(a={},function(e,n,s,o){var l=(e[0]+"_"+e[1]+"_"+n[0]+"_"+n[1]+"_"+s[0]+"_"+s[1]+"_"+o[0]+"_"+o[1]).replace(/\./g,"p");if(!a[l]){var c,u,h,f,p,d,m,g=getDefaultCurveSegments(),y=0,v=null;2===e.length&&(e[0]!==n[0]||e[1]!==n[1])&&t(e[0],e[1],n[0],n[1],e[0]+s[0],e[1]+s[1])&&t(e[0],e[1],n[0],n[1],n[0]+o[0],n[1]+o[1])&&(g=2);var b=new r(g);for(h=s.length,c=0;c<g;c+=1){for(m=createSizedArray(h),p=c/(g-1),d=0,u=0;u<h;u+=1)f=bmPow(1-p,3)*e[u]+3*bmPow(1-p,2)*p*(e[u]+s[u])+3*(1-p)*bmPow(p,2)*(n[u]+o[u])+bmPow(p,3)*n[u],m[u]=f,null!==v&&(d+=bmPow(m[u]-v[u],2));y+=d=bmSqrt(d),b.points[c]=new i(d,m),v=m}b.segmentLength=y,a[l]=b}return a[l]});function o(e,t){var n=t.percents,r=t.lengths,i=n.length,a=bmFloor((i-1)*e),s=e*t.addedLength,o=0;if(a===i-1||0===a||s===r[a])return n[a];for(var l=r[a]>s?-1:1,c=!0;c;)if(r[a]<=s&&r[a+1]>s?(o=(s-r[a])/(r[a+1]-r[a]),c=!1):a+=l,a<0||a>=i-1){if(a===i-1)return n[a];c=!1}return n[a]+(n[a+1]-n[a])*o}var l=createTypedArray("float32",8);return{getSegmentsLength:function(e){var t,r=segmentsLengthPool.newElement(),i=e.c,a=e.v,s=e.o,o=e.i,l=e._length,c=r.lengths,u=0;for(t=0;t<l-1;t+=1)c[t]=n(a[t],a[t+1],s[t],o[t+1]),u+=c[t].addedLength;return i&&l&&(c[t]=n(a[t],a[0],s[t],o[0]),u+=c[t].addedLength),r.totalLength=u,r},getNewSegment:function(t,n,r,i,a,s,c){a<0?a=0:a>1&&(a=1);var u,h=o(a,c),f=o(s=s>1?1:s,c),p=t.length,d=1-h,m=1-f,g=d*d*d,y=h*d*d*3,v=h*h*d*3,b=h*h*h,k=d*d*m,E=h*d*m+d*h*m+d*d*f,x=h*h*m+d*h*f+h*d*f,w=h*h*f,S=d*m*m,C=h*m*m+d*f*m+d*m*f,P=h*f*m+d*f*f+h*m*f,_=h*f*f,T=m*m*m,A=f*m*m+m*f*m+m*m*f,F=f*f*m+m*f*f+f*m*f,M=f*f*f;for(u=0;u<p;u+=1)l[4*u]=e.round(1e3*(g*t[u]+y*r[u]+v*i[u]+b*n[u]))/1e3,l[4*u+1]=e.round(1e3*(k*t[u]+E*r[u]+x*i[u]+w*n[u]))/1e3,l[4*u+2]=e.round(1e3*(S*t[u]+C*r[u]+P*i[u]+_*n[u]))/1e3,l[4*u+3]=e.round(1e3*(T*t[u]+A*r[u]+F*i[u]+M*n[u]))/1e3;return l},getPointInSegment:function(t,n,r,i,a,s){var l=o(a,s),c=1-l;return[e.round(1e3*(c*c*c*t[0]+(l*c*c+c*l*c+c*c*l)*r[0]+(l*l*c+c*l*l+l*c*l)*i[0]+l*l*l*n[0]))/1e3,e.round(1e3*(c*c*c*t[1]+(l*c*c+c*l*c+c*c*l)*r[1]+(l*l*c+c*l*l+l*c*l)*i[1]+l*l*l*n[1]))/1e3]},buildBezierData:s,pointOnLine2D:t,pointOnLine3D:function(n,r,i,a,s,o,l,c,u){if(0===i&&0===o&&0===u)return t(n,r,a,s,l,c);var h,f=e.sqrt(e.pow(a-n,2)+e.pow(s-r,2)+e.pow(o-i,2)),p=e.sqrt(e.pow(l-n,2)+e.pow(c-r,2)+e.pow(u-i,2)),d=e.sqrt(e.pow(l-a,2)+e.pow(c-s,2)+e.pow(u-o,2));return(h=f>p?f>d?f-p-d:d-p-f:d>p?d-p-f:p-f-d)>-1e-4&&h<1e-4}}}var bez=bezFunction(),PropertyFactory=function(){var e=initialDefaultFrame,t=Math.abs;function n(e,t){var n,i=this.offsetTime;"multidimensional"===this.propType&&(n=createTypedArray("float32",this.pv.length));for(var a,s,o,l,c,u,h,f,p,d=t.lastIndex,m=d,g=this.keyframes.length-1,y=!0;y;){if(a=this.keyframes[m],s=this.keyframes[m+1],m===g-1&&e>=s.t-i){a.h&&(a=s),d=0;break}if(s.t-i>e){d=m;break}m<g-1?m+=1:(d=0,y=!1)}o=this.keyframesMetadata[m]||{};var v,b,k,E,x,w,S,C,P,_,T=s.t-i,A=a.t-i;if(a.to){o.bezierData||(o.bezierData=bez.buildBezierData(a.s,s.s||a.e,a.to,a.ti));var F=o.bezierData;if(e>=T||e<A){var M=e>=T?F.points.length-1:0;for(c=F.points[M].point.length,l=0;l<c;l+=1)n[l]=F.points[M].point[l]}else{o.__fnct?p=o.__fnct:(p=BezierFactory.getBezierEasing(a.o.x,a.o.y,a.i.x,a.i.y,a.n).get,o.__fnct=p),u=p((e-A)/(T-A));var D,I=F.segmentLength*u,R=t.lastFrame<e&&t._lastKeyframeIndex===m?t._lastAddedLength:0;for(f=t.lastFrame<e&&t._lastKeyframeIndex===m?t._lastPoint:0,y=!0,h=F.points.length;y;){if(R+=F.points[f].partialLength,0===I||0===u||f===F.points.length-1){for(c=F.points[f].point.length,l=0;l<c;l+=1)n[l]=F.points[f].point[l];break}if(I>=R&&I<R+F.points[f+1].partialLength){for(D=(I-R)/F.points[f+1].partialLength,c=F.points[f].point.length,l=0;l<c;l+=1)n[l]=F.points[f].point[l]+(F.points[f+1].point[l]-F.points[f].point[l])*D;break}f<h-1?f+=1:y=!1}t._lastPoint=f,t._lastAddedLength=R-F.points[f].partialLength,t._lastKeyframeIndex=m}}else{var N,L,O,z,V;if(g=a.s.length,v=s.s||a.e,this.sh&&1!==a.h)if(e>=T)n[0]=v[0],n[1]=v[1],n[2]=v[2];else if(e<=A)n[0]=a.s[0],n[1]=a.s[1],n[2]=a.s[2];else{b=n,k=function(e,t,n){var r,i,a,s,o,l=[],c=e[0],u=e[1],h=e[2],f=e[3],p=t[0],d=t[1],m=t[2],g=t[3];return(i=c*p+u*d+h*m+f*g)<0&&(i=-i,p=-p,d=-d,m=-m,g=-g),1-i>1e-6?(r=Math.acos(i),a=Math.sin(r),s=Math.sin((1-n)*r)/a,o=Math.sin(n*r)/a):(s=1-n,o=n),l[0]=s*c+o*p,l[1]=s*u+o*d,l[2]=s*h+o*m,l[3]=s*f+o*g,l}(r(a.s),r(v),(e-A)/(T-A)),E=k[0],x=k[1],w=k[2],S=k[3],C=Math.atan2(2*x*S-2*E*w,1-2*x*x-2*w*w),P=Math.asin(2*E*x+2*w*S),_=Math.atan2(2*E*S-2*x*w,1-2*E*E-2*w*w),b[0]=C/degToRads,b[1]=P/degToRads,b[2]=_/degToRads}else for(m=0;m<g;m+=1)1!==a.h&&(e>=T?u=1:e<A?u=0:(a.o.x.constructor===Array?(o.__fnct||(o.__fnct=[]),o.__fnct[m]?p=o.__fnct[m]:(N=void 0===a.o.x[m]?a.o.x[0]:a.o.x[m],L=void 0===a.o.y[m]?a.o.y[0]:a.o.y[m],O=void 0===a.i.x[m]?a.i.x[0]:a.i.x[m],z=void 0===a.i.y[m]?a.i.y[0]:a.i.y[m],p=BezierFactory.getBezierEasing(N,L,O,z).get,o.__fnct[m]=p)):o.__fnct?p=o.__fnct:(N=a.o.x,L=a.o.y,O=a.i.x,z=a.i.y,p=BezierFactory.getBezierEasing(N,L,O,z).get,a.keyframeMetadata=p),u=p((e-A)/(T-A)))),v=s.s||a.e,V=1===a.h?a.s[m]:a.s[m]+(v[m]-a.s[m])*u,"multidimensional"===this.propType?n[m]=V:n=V}return t.lastIndex=d,n}function r(e){var t=e[0]*degToRads,n=e[1]*degToRads,r=e[2]*degToRads,i=Math.cos(t/2),a=Math.cos(n/2),s=Math.cos(r/2),o=Math.sin(t/2),l=Math.sin(n/2),c=Math.sin(r/2);return[o*l*s+i*a*c,o*a*s+i*l*c,i*l*s-o*a*c,i*a*s-o*l*c]}function i(){var t=this.comp.renderedFrame-this.offsetTime,n=this.keyframes[0].t-this.offsetTime,r=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(t===this._caching.lastFrame||this._caching.lastFrame!==e&&(this._caching.lastFrame>=r&&t>=r||this._caching.lastFrame<n&&t<n))){this._caching.lastFrame>=t&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var i=this.interpolateValue(t,this._caching);this.pv=i}return this._caching.lastFrame=t,this.pv}function a(e){var n;if("unidimensional"===this.propType)n=e*this.mult,t(this.v-n)>1e-5&&(this.v=n,this._mdf=!0);else for(var r=0,i=this.v.length;r<i;)n=e[r]*this.mult,t(this.v[r]-n)>1e-5&&(this.v[r]=n,this._mdf=!0),r+=1}function s(){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var e;this.lock=!0,this._mdf=this._isFirstFrame;var t=this.effectsSequence.length,n=this.kf?this.pv:this.data.k;for(e=0;e<t;e+=1)n=this.effectsSequence[e](n);this.setVValue(n),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function o(e){this.effectsSequence.push(e),this.container.addDynamicProperty(this)}function l(e,t,n,r){this.propType="unidimensional",this.mult=n||1,this.data=t,this.v=n?t.k*n:t.k,this.pv=t.k,this._mdf=!1,this.elem=e,this.container=r,this.comp=e.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=s,this.setVValue=a,this.addEffect=o}function c(e,t,n,r){var i;this.propType="multidimensional",this.mult=n||1,this.data=t,this._mdf=!1,this.elem=e,this.container=r,this.comp=e.comp,this.k=!1,this.kf=!1,this.frameId=-1;var l=t.k.length;for(this.v=createTypedArray("float32",l),this.pv=createTypedArray("float32",l),this.vel=createTypedArray("float32",l),i=0;i<l;i+=1)this.v[i]=t.k[i]*this.mult,this.pv[i]=t.k[i];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=s,this.setVValue=a,this.addEffect=o}function u(t,r,l,c){this.propType="unidimensional",this.keyframes=r.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.frameId=-1,this._caching={lastFrame:e,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=r,this.mult=l||1,this.elem=t,this.container=c,this.comp=t.comp,this.v=e,this.pv=e,this._isFirstFrame=!0,this.getValue=s,this.setVValue=a,this.interpolateValue=n,this.effectsSequence=[i.bind(this)],this.addEffect=o}function h(t,r,l,c){var u;this.propType="multidimensional";var h,f,p,d,m=r.k.length;for(u=0;u<m-1;u+=1)r.k[u].to&&r.k[u].s&&r.k[u+1]&&r.k[u+1].s&&(h=r.k[u].s,f=r.k[u+1].s,p=r.k[u].to,d=r.k[u].ti,(2===h.length&&(h[0]!==f[0]||h[1]!==f[1])&&bez.pointOnLine2D(h[0],h[1],f[0],f[1],h[0]+p[0],h[1]+p[1])&&bez.pointOnLine2D(h[0],h[1],f[0],f[1],f[0]+d[0],f[1]+d[1])||3===h.length&&(h[0]!==f[0]||h[1]!==f[1]||h[2]!==f[2])&&bez.pointOnLine3D(h[0],h[1],h[2],f[0],f[1],f[2],h[0]+p[0],h[1]+p[1],h[2]+p[2])&&bez.pointOnLine3D(h[0],h[1],h[2],f[0],f[1],f[2],f[0]+d[0],f[1]+d[1],f[2]+d[2]))&&(r.k[u].to=null,r.k[u].ti=null),h[0]===f[0]&&h[1]===f[1]&&0===p[0]&&0===p[1]&&0===d[0]&&0===d[1]&&(2===h.length||h[2]===f[2]&&0===p[2]&&0===d[2])&&(r.k[u].to=null,r.k[u].ti=null));this.effectsSequence=[i.bind(this)],this.data=r,this.keyframes=r.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=l||1,this.elem=t,this.container=c,this.comp=t.comp,this.getValue=s,this.setVValue=a,this.interpolateValue=n,this.frameId=-1;var g=r.k[0].s.length;for(this.v=createTypedArray("float32",g),this.pv=createTypedArray("float32",g),u=0;u<g;u+=1)this.v[u]=e,this.pv[u]=e;this._caching={lastFrame:e,lastIndex:0,value:createTypedArray("float32",g)},this.addEffect=o}return{getProp:function(e,t,n,r,i){var a;if(t.k.length)if("number"==typeof t.k[0])a=new c(e,t,r,i);else switch(n){case 0:a=new u(e,t,r,i);break;case 1:a=new h(e,t,r,i)}else a=new l(e,t,r,i);return a.effectsSequence.length&&i.addDynamicProperty(a),a}}}();function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(e){-1===this.dynamicProperties.indexOf(e)&&(this.dynamicProperties.push(e),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){var e;this._mdf=!1;var t=this.dynamicProperties.length;for(e=0;e<t;e+=1)this.dynamicProperties[e].getValue(),this.dynamicProperties[e]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(e){this.container=e,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=poolFactory(8,(function(){return createTypedArray("float32",2)}));function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(e,t){this.c=e,this.setLength(t);for(var n=0;n<t;)this.v[n]=pointPool.newElement(),this.o[n]=pointPool.newElement(),this.i[n]=pointPool.newElement(),n+=1},ShapePath.prototype.setLength=function(e){for(;this._maxLength<e;)this.doubleArrayLength();this._length=e},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(e,t,n,r,i){var a;switch(this._length=Math.max(this._length,r+1),this._length>=this._maxLength&&this.doubleArrayLength(),n){case"v":a=this.v;break;case"i":a=this.i;break;case"o":a=this.o;break;default:a=[]}(!a[r]||a[r]&&!i)&&(a[r]=pointPool.newElement()),a[r][0]=e,a[r][1]=t},ShapePath.prototype.setTripleAt=function(e,t,n,r,i,a,s,o){this.setXYAt(e,t,"v",s,o),this.setXYAt(n,r,"o",s,o),this.setXYAt(i,a,"i",s,o)},ShapePath.prototype.reverse=function(){var e=new ShapePath;e.setPathData(this.c,this._length);var t=this.v,n=this.o,r=this.i,i=0;this.c&&(e.setTripleAt(t[0][0],t[0][1],r[0][0],r[0][1],n[0][0],n[0][1],0,!1),i=1);var a,s=this._length-1,o=this._length;for(a=i;a<o;a+=1)e.setTripleAt(t[s][0],t[s][1],r[s][0],r[s][1],n[s][0],n[s][1],a,!1),s-=1;return e};var shapePool=(factory=poolFactory(4,(function(){return new ShapePath}),(function(e){var t,n=e._length;for(t=0;t<n;t+=1)pointPool.release(e.v[t]),pointPool.release(e.i[t]),pointPool.release(e.o[t]),e.v[t]=null,e.i[t]=null,e.o[t]=null;e._length=0,e.c=!1})),factory.clone=function(e){var t,n=factory.newElement(),r=void 0===e._length?e.v.length:e._length;for(n.setLength(r),n.c=e.c,t=0;t<r;t+=1)n.setTripleAt(e.v[t][0],e.v[t][1],e.o[t][0],e.o[t][1],e.i[t][0],e.i[t][1],t);return n},factory),factory;function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(e){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=e,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var e;for(e=0;e<this._length;e+=1)shapePool.release(this.shapes[e]);this._length=0};var shapeCollectionPool=(ob={newShapeCollection:function(){return _length?pool[_length-=1]:new ShapeCollection},release:function(e){var t,n=e._length;for(t=0;t<n;t+=1)shapePool.release(e.shapes[t]);e._length=0,_length===_maxLength&&(pool=pooling.double(pool),_maxLength*=2),pool[_length]=e,_length+=1}},_length=0,_maxLength=4,pool=createSizedArray(_maxLength),ob),ob,_length,_maxLength,pool,ShapePropertyFactory=function(){var e=-999999;function t(e,t,n){var r,i,a,s,o,l,c,u,h,f=n.lastIndex,p=this.keyframes;if(e<p[0].t-this.offsetTime)r=p[0].s[0],a=!0,f=0;else if(e>=p[p.length-1].t-this.offsetTime)r=p[p.length-1].s?p[p.length-1].s[0]:p[p.length-2].e[0],a=!0;else{for(var d,m,g,y=f,v=p.length-1,b=!0;b&&(d=p[y],!((m=p[y+1]).t-this.offsetTime>e));)y<v-1?y+=1:b=!1;if(g=this.keyframesMetadata[y]||{},f=y,!(a=1===d.h)){if(e>=m.t-this.offsetTime)u=1;else if(e<d.t-this.offsetTime)u=0;else{var k;g.__fnct?k=g.__fnct:(k=BezierFactory.getBezierEasing(d.o.x,d.o.y,d.i.x,d.i.y).get,g.__fnct=k),u=k((e-(d.t-this.offsetTime))/(m.t-this.offsetTime-(d.t-this.offsetTime)))}i=m.s?m.s[0]:d.e[0]}r=d.s[0]}for(l=t._length,c=r.i[0].length,n.lastIndex=f,s=0;s<l;s+=1)for(o=0;o<c;o+=1)h=a?r.i[s][o]:r.i[s][o]+(i.i[s][o]-r.i[s][o])*u,t.i[s][o]=h,h=a?r.o[s][o]:r.o[s][o]+(i.o[s][o]-r.o[s][o])*u,t.o[s][o]=h,h=a?r.v[s][o]:r.v[s][o]+(i.v[s][o]-r.v[s][o])*u,t.v[s][o]=h}function n(){var t=this.comp.renderedFrame-this.offsetTime,n=this.keyframes[0].t-this.offsetTime,r=this.keyframes[this.keyframes.length-1].t-this.offsetTime,i=this._caching.lastFrame;return i!==e&&(i<n&&t<n||i>r&&t>r)||(this._caching.lastIndex=i<t?this._caching.lastIndex:0,this.interpolateShape(t,this.pv,this._caching)),this._caching.lastFrame=t,this.pv}function r(){this.paths=this.localShapeCollection}function i(e){(function(e,t){if(e._length!==t._length||e.c!==t.c)return!1;var n,r=e._length;for(n=0;n<r;n+=1)if(e.v[n][0]!==t.v[n][0]||e.v[n][1]!==t.v[n][1]||e.o[n][0]!==t.o[n][0]||e.o[n][1]!==t.o[n][1]||e.i[n][0]!==t.i[n][0]||e.i[n][1]!==t.i[n][1])return!1;return!0})(this.v,e)||(this.v=shapePool.clone(e),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function a(){if(this.elem.globalData.frameId!==this.frameId)if(this.effectsSequence.length)if(this.lock)this.setVValue(this.pv);else{var e,t;this.lock=!0,this._mdf=!1,e=this.kf?this.pv:this.data.ks?this.data.ks.k:this.data.pt.k;var n=this.effectsSequence.length;for(t=0;t<n;t+=1)e=this.effectsSequence[t](e);this.setVValue(e),this.lock=!1,this.frameId=this.elem.globalData.frameId}else this._mdf=!1}function s(e,t,n){this.propType="shape",this.comp=e.comp,this.container=e,this.elem=e,this.data=t,this.k=!1,this.kf=!1,this._mdf=!1;var i=3===n?t.pt.k:t.ks.k;this.v=shapePool.clone(i),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=r,this.effectsSequence=[]}function o(e){this.effectsSequence.push(e),this.container.addDynamicProperty(this)}function l(t,i,a){this.propType="shape",this.comp=t.comp,this.elem=t,this.container=t,this.offsetTime=t.data.st,this.keyframes=3===a?i.pt.k:i.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var s=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,s),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=e,this.reset=r,this._caching={lastFrame:e,lastIndex:0},this.effectsSequence=[n.bind(this)]}s.prototype.interpolateShape=t,s.prototype.getValue=a,s.prototype.setVValue=i,s.prototype.addEffect=o,l.prototype.getValue=a,l.prototype.interpolateShape=t,l.prototype.setVValue=i,l.prototype.addEffect=o;var c=function(){var e=roundCorner;function t(e,t){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=t.d,this.elem=e,this.comp=e.comp,this.frameId=-1,this.initDynamicPropertyContainer(e),this.p=PropertyFactory.getProp(e,t.p,1,0,this),this.s=PropertyFactory.getProp(e,t.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return t.prototype={reset:r,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var t=this.p.v[0],n=this.p.v[1],r=this.s.v[0]/2,i=this.s.v[1]/2,a=3!==this.d,s=this.v;s.v[0][0]=t,s.v[0][1]=n-i,s.v[1][0]=a?t+r:t-r,s.v[1][1]=n,s.v[2][0]=t,s.v[2][1]=n+i,s.v[3][0]=a?t-r:t+r,s.v[3][1]=n,s.i[0][0]=a?t-r*e:t+r*e,s.i[0][1]=n-i,s.i[1][0]=a?t+r:t-r,s.i[1][1]=n-i*e,s.i[2][0]=a?t+r*e:t-r*e,s.i[2][1]=n+i,s.i[3][0]=a?t-r:t+r,s.i[3][1]=n+i*e,s.o[0][0]=a?t+r*e:t-r*e,s.o[0][1]=n-i,s.o[1][0]=a?t+r:t-r,s.o[1][1]=n+i*e,s.o[2][0]=a?t-r*e:t+r*e,s.o[2][1]=n+i,s.o[3][0]=a?t-r:t+r,s.o[3][1]=n-i*e}},extendPrototype([DynamicPropertyContainer],t),t}(),u=function(){function e(e,t){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=e,this.comp=e.comp,this.data=t,this.frameId=-1,this.d=t.d,this.initDynamicPropertyContainer(e),1===t.sy?(this.ir=PropertyFactory.getProp(e,t.ir,0,0,this),this.is=PropertyFactory.getProp(e,t.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(e,t.pt,0,0,this),this.p=PropertyFactory.getProp(e,t.p,1,0,this),this.r=PropertyFactory.getProp(e,t.r,0,degToRads,this),this.or=PropertyFactory.getProp(e,t.or,0,0,this),this.os=PropertyFactory.getProp(e,t.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return e.prototype={reset:r,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var e,t,n,r,i=2*Math.floor(this.pt.v),a=2*Math.PI/i,s=!0,o=this.or.v,l=this.ir.v,c=this.os.v,u=this.is.v,h=2*Math.PI*o/(2*i),f=2*Math.PI*l/(2*i),p=-Math.PI/2;p+=this.r.v;var d=3===this.data.d?-1:1;for(this.v._length=0,e=0;e<i;e+=1){n=s?c:u,r=s?h:f;var m=(t=s?o:l)*Math.cos(p),g=t*Math.sin(p),y=0===m&&0===g?0:g/Math.sqrt(m*m+g*g),v=0===m&&0===g?0:-m/Math.sqrt(m*m+g*g);m+=+this.p.v[0],g+=+this.p.v[1],this.v.setTripleAt(m,g,m-y*r*n*d,g-v*r*n*d,m+y*r*n*d,g+v*r*n*d,e,!0),s=!s,p+=a*d}},convertPolygonToPath:function(){var e,t=Math.floor(this.pt.v),n=2*Math.PI/t,r=this.or.v,i=this.os.v,a=2*Math.PI*r/(4*t),s=.5*-Math.PI,o=3===this.data.d?-1:1;for(s+=this.r.v,this.v._length=0,e=0;e<t;e+=1){var l=r*Math.cos(s),c=r*Math.sin(s),u=0===l&&0===c?0:c/Math.sqrt(l*l+c*c),h=0===l&&0===c?0:-l/Math.sqrt(l*l+c*c);l+=+this.p.v[0],c+=+this.p.v[1],this.v.setTripleAt(l,c,l-u*a*i*o,c-h*a*i*o,l+u*a*i*o,c+h*a*i*o,e,!0),s+=n*o}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],e),e}(),h=function(){function e(e,t){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=e,this.comp=e.comp,this.frameId=-1,this.d=t.d,this.initDynamicPropertyContainer(e),this.p=PropertyFactory.getProp(e,t.p,1,0,this),this.s=PropertyFactory.getProp(e,t.s,1,0,this),this.r=PropertyFactory.getProp(e,t.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return e.prototype={convertRectToPath:function(){var e=this.p.v[0],t=this.p.v[1],n=this.s.v[0]/2,r=this.s.v[1]/2,i=bmMin(n,r,this.r.v),a=i*(1-roundCorner);this.v._length=0,2===this.d||1===this.d?(this.v.setTripleAt(e+n,t-r+i,e+n,t-r+i,e+n,t-r+a,0,!0),this.v.setTripleAt(e+n,t+r-i,e+n,t+r-a,e+n,t+r-i,1,!0),0!==i?(this.v.setTripleAt(e+n-i,t+r,e+n-i,t+r,e+n-a,t+r,2,!0),this.v.setTripleAt(e-n+i,t+r,e-n+a,t+r,e-n+i,t+r,3,!0),this.v.setTripleAt(e-n,t+r-i,e-n,t+r-i,e-n,t+r-a,4,!0),this.v.setTripleAt(e-n,t-r+i,e-n,t-r+a,e-n,t-r+i,5,!0),this.v.setTripleAt(e-n+i,t-r,e-n+i,t-r,e-n+a,t-r,6,!0),this.v.setTripleAt(e+n-i,t-r,e+n-a,t-r,e+n-i,t-r,7,!0)):(this.v.setTripleAt(e-n,t+r,e-n+a,t+r,e-n,t+r,2),this.v.setTripleAt(e-n,t-r,e-n,t-r+a,e-n,t-r,3))):(this.v.setTripleAt(e+n,t-r+i,e+n,t-r+a,e+n,t-r+i,0,!0),0!==i?(this.v.setTripleAt(e+n-i,t-r,e+n-i,t-r,e+n-a,t-r,1,!0),this.v.setTripleAt(e-n+i,t-r,e-n+a,t-r,e-n+i,t-r,2,!0),this.v.setTripleAt(e-n,t-r+i,e-n,t-r+i,e-n,t-r+a,3,!0),this.v.setTripleAt(e-n,t+r-i,e-n,t+r-a,e-n,t+r-i,4,!0),this.v.setTripleAt(e-n+i,t+r,e-n+i,t+r,e-n+a,t+r,5,!0),this.v.setTripleAt(e+n-i,t+r,e+n-a,t+r,e+n-i,t+r,6,!0),this.v.setTripleAt(e+n,t+r-i,e+n,t+r-i,e+n,t+r-a,7,!0)):(this.v.setTripleAt(e-n,t-r,e-n+a,t-r,e-n,t-r,1,!0),this.v.setTripleAt(e-n,t+r,e-n,t+r-a,e-n,t+r,2,!0),this.v.setTripleAt(e+n,t+r,e+n-a,t+r,e+n,t+r,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:r},extendPrototype([DynamicPropertyContainer],e),e}();return{getShapeProp:function(e,t,n){var r;return 3===n||4===n?r=(3===n?t.pt:t.ks).k.length?new l(e,t,n):new s(e,t,n):5===n?r=new h(e,t):6===n?r=new c(e,t):7===n&&(r=new u(e,t)),r.k&&e.addDynamicProperty(r),r},getConstructorFunction:function(){return s},getKeyframedConstructorFunction:function(){return l}}}(),Matrix=function(){var e=Math.cos,t=Math.sin,n=Math.tan,r=Math.round;function i(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function a(n){if(0===n)return this;var r=e(n),i=t(n);return this._t(r,-i,0,0,i,r,0,0,0,0,1,0,0,0,0,1)}function s(n){if(0===n)return this;var r=e(n),i=t(n);return this._t(1,0,0,0,0,r,-i,0,0,i,r,0,0,0,0,1)}function o(n){if(0===n)return this;var r=e(n),i=t(n);return this._t(r,0,i,0,0,1,0,0,-i,0,r,0,0,0,0,1)}function l(n){if(0===n)return this;var r=e(n),i=t(n);return this._t(r,-i,0,0,i,r,0,0,0,0,1,0,0,0,0,1)}function c(e,t){return this._t(1,t,e,1,0,0)}function u(e,t){return this.shear(n(e),n(t))}function h(r,i){var a=e(i),s=t(i);return this._t(a,s,0,0,-s,a,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,n(r),1,0,0,0,0,1,0,0,0,0,1)._t(a,-s,0,0,s,a,0,0,0,0,1,0,0,0,0,1)}function f(e,t,n){return n||0===n||(n=1),1===e&&1===t&&1===n?this:this._t(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1)}function p(e,t,n,r,i,a,s,o,l,c,u,h,f,p,d,m){return this.props[0]=e,this.props[1]=t,this.props[2]=n,this.props[3]=r,this.props[4]=i,this.props[5]=a,this.props[6]=s,this.props[7]=o,this.props[8]=l,this.props[9]=c,this.props[10]=u,this.props[11]=h,this.props[12]=f,this.props[13]=p,this.props[14]=d,this.props[15]=m,this}function d(e,t,n){return n=n||0,0!==e||0!==t||0!==n?this._t(1,0,0,0,0,1,0,0,0,0,1,0,e,t,n,1):this}function m(e,t,n,r,i,a,s,o,l,c,u,h,f,p,d,m){var g=this.props;if(1===e&&0===t&&0===n&&0===r&&0===i&&1===a&&0===s&&0===o&&0===l&&0===c&&1===u&&0===h)return g[12]=g[12]*e+g[15]*f,g[13]=g[13]*a+g[15]*p,g[14]=g[14]*u+g[15]*d,g[15]*=m,this._identityCalculated=!1,this;var y=g[0],v=g[1],b=g[2],k=g[3],E=g[4],x=g[5],w=g[6],S=g[7],C=g[8],P=g[9],_=g[10],T=g[11],A=g[12],F=g[13],M=g[14],D=g[15];return g[0]=y*e+v*i+b*l+k*f,g[1]=y*t+v*a+b*c+k*p,g[2]=y*n+v*s+b*u+k*d,g[3]=y*r+v*o+b*h+k*m,g[4]=E*e+x*i+w*l+S*f,g[5]=E*t+x*a+w*c+S*p,g[6]=E*n+x*s+w*u+S*d,g[7]=E*r+x*o+w*h+S*m,g[8]=C*e+P*i+_*l+T*f,g[9]=C*t+P*a+_*c+T*p,g[10]=C*n+P*s+_*u+T*d,g[11]=C*r+P*o+_*h+T*m,g[12]=A*e+F*i+M*l+D*f,g[13]=A*t+F*a+M*c+D*p,g[14]=A*n+F*s+M*u+D*d,g[15]=A*r+F*o+M*h+D*m,this._identityCalculated=!1,this}function g(){return this._identityCalculated||(this._identity=!(1!==this.props[0]||0!==this.props[1]||0!==this.props[2]||0!==this.props[3]||0!==this.props[4]||1!==this.props[5]||0!==this.props[6]||0!==this.props[7]||0!==this.props[8]||0!==this.props[9]||1!==this.props[10]||0!==this.props[11]||0!==this.props[12]||0!==this.props[13]||0!==this.props[14]||1!==this.props[15]),this._identityCalculated=!0),this._identity}function y(e){for(var t=0;t<16;){if(e.props[t]!==this.props[t])return!1;t+=1}return!0}function v(e){var t;for(t=0;t<16;t+=1)e.props[t]=this.props[t];return e}function b(e){var t;for(t=0;t<16;t+=1)this.props[t]=e[t]}function k(e,t,n){return{x:e*this.props[0]+t*this.props[4]+n*this.props[8]+this.props[12],y:e*this.props[1]+t*this.props[5]+n*this.props[9]+this.props[13],z:e*this.props[2]+t*this.props[6]+n*this.props[10]+this.props[14]}}function E(e,t,n){return e*this.props[0]+t*this.props[4]+n*this.props[8]+this.props[12]}function x(e,t,n){return e*this.props[1]+t*this.props[5]+n*this.props[9]+this.props[13]}function w(e,t,n){return e*this.props[2]+t*this.props[6]+n*this.props[10]+this.props[14]}function S(){var e=this.props[0]*this.props[5]-this.props[1]*this.props[4],t=this.props[5]/e,n=-this.props[1]/e,r=-this.props[4]/e,i=this.props[0]/e,a=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/e,s=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/e,o=new Matrix;return o.props[0]=t,o.props[1]=n,o.props[4]=r,o.props[5]=i,o.props[12]=a,o.props[13]=s,o}function C(e){return this.getInverseMatrix().applyToPointArray(e[0],e[1],e[2]||0)}function P(e){var t,n=e.length,r=[];for(t=0;t<n;t+=1)r[t]=C(e[t]);return r}function _(e,t,n){var r=createTypedArray("float32",6);if(this.isIdentity())r[0]=e[0],r[1]=e[1],r[2]=t[0],r[3]=t[1],r[4]=n[0],r[5]=n[1];else{var i=this.props[0],a=this.props[1],s=this.props[4],o=this.props[5],l=this.props[12],c=this.props[13];r[0]=e[0]*i+e[1]*s+l,r[1]=e[0]*a+e[1]*o+c,r[2]=t[0]*i+t[1]*s+l,r[3]=t[0]*a+t[1]*o+c,r[4]=n[0]*i+n[1]*s+l,r[5]=n[0]*a+n[1]*o+c}return r}function T(e,t,n){return this.isIdentity()?[e,t,n]:[e*this.props[0]+t*this.props[4]+n*this.props[8]+this.props[12],e*this.props[1]+t*this.props[5]+n*this.props[9]+this.props[13],e*this.props[2]+t*this.props[6]+n*this.props[10]+this.props[14]]}function A(e,t){if(this.isIdentity())return e+","+t;var n=this.props;return Math.round(100*(e*n[0]+t*n[4]+n[12]))/100+","+Math.round(100*(e*n[1]+t*n[5]+n[13]))/100}function F(){for(var e=0,t=this.props,n="matrix3d(";e<16;)n+=r(1e4*t[e])/1e4,n+=15===e?")":",",e+=1;return n}function M(e){return e<1e-6&&e>0||e>-1e-6&&e<0?r(1e4*e)/1e4:e}function D(){var e=this.props;return"matrix("+M(e[0])+","+M(e[1])+","+M(e[4])+","+M(e[5])+","+M(e[12])+","+M(e[13])+")"}return function(){this.reset=i,this.rotate=a,this.rotateX=s,this.rotateY=o,this.rotateZ=l,this.skew=u,this.skewFromAxis=h,this.shear=c,this.scale=f,this.setTransform=p,this.translate=d,this.transform=m,this.applyToPoint=k,this.applyToX=E,this.applyToY=x,this.applyToZ=w,this.applyToPointArray=T,this.applyToTriplePoints=_,this.applyToPointStringified=A,this.toCSS=F,this.to2dCSS=D,this.clone=v,this.cloneFromProps=b,this.equals=y,this.inversePoints=P,this.inversePoint=C,this.getInverseMatrix=S,this._t=this.transform,this.isIdentity=g,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(e){return _typeof$3="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$3(e)}var lottie={},standalone="__[STANDALONE]__",animationData="__[ANIMATIONDATA]__",renderer="";function setLocation(e){setLocationHref(e)}function searchAnimations(){!0===standalone?animationManager.searchAnimations(animationData,standalone,renderer):animationManager.searchAnimations()}function setSubframeRendering(e){setSubframeEnabled(e)}function setPrefix(e){setIdPrefix(e)}function loadAnimation(e){return!0===standalone&&(e.animationData=JSON.parse(animationData)),animationManager.loadAnimation(e)}function setQuality(e){if("string"==typeof e)switch(e){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10)}else!isNaN(e)&&e>1&&setDefaultCurveSegments(e);getDefaultCurveSegments()>=50?roundValues(!1):roundValues(!0)}function inBrowser(){return"undefined"!=typeof navigator}function installPlugin(e,t){"expressions"===e&&setExpressionsPlugin(t)}function getFactory(e){switch(e){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}function checkReady(){"complete"===document.readyState&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(e){for(var t=queryString.split("&"),n=0;n<t.length;n+=1){var r=t[n].split("=");if(decodeURIComponent(r[0])==e)return decodeURIComponent(r[1])}return null}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.9.6";var queryString="";if(standalone){var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",renderer=getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{"object"!==_typeof$3(exports)&&__webpack_require__.amdO}catch(e){}var ShapeModifiers=function(){var e={},t={};return e.registerModifier=function(e,n){t[e]||(t[e]=n)},e.getModifier=function(e,n,r){return new t[e](n,r)},e}();function ShapeModifier(){}function TrimModifier(){}function PuckerAndBloatModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(e){if(!this.closed){e.sh.container.addDynamicProperty(e.sh);var t={shape:e.sh,data:e,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(t),this.addShapeToModifier(t),this._isAnimated&&e.setAsAnimated()}},ShapeModifier.prototype.init=function(e,t){this.shapes=[],this.elem=e,this.initDynamicPropertyContainer(e),this.initModifierProperties(e,t),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier),extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(e,t){this.s=PropertyFactory.getProp(e,t.s,0,.01,this),this.e=PropertyFactory.getProp(e,t.e,0,.01,this),this.o=PropertyFactory.getProp(e,t.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=t.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(e){e.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(e,t,n,r,i){var a=[];t<=1?a.push({s:e,e:t}):e>=1?a.push({s:e-1,e:t-1}):(a.push({s:e,e:1}),a.push({s:0,e:t-1}));var s,o,l=[],c=a.length;for(s=0;s<c;s+=1){var u,h;(o=a[s]).e*i<r||o.s*i>r+n||(u=o.s*i<=r?0:(o.s*i-r)/n,h=o.e*i>=r+n?1:(o.e*i-r)/n,l.push([u,h]))}return l.length||l.push([0,0]),l},TrimModifier.prototype.releasePathsData=function(e){var t,n=e.length;for(t=0;t<n;t+=1)segmentsLengthPool.release(e[t]);return e.length=0,e},TrimModifier.prototype.processShapes=function(e){var t,n,r,i;if(this._mdf||e){var a=this.o.v%360/360;if(a<0&&(a+=1),(t=this.s.v>1?1+a:this.s.v<0?0+a:this.s.v+a)>(n=this.e.v>1?1+a:this.e.v<0?0+a:this.e.v+a)){var s=t;t=n,n=s}t=1e-4*Math.round(1e4*t),n=1e-4*Math.round(1e4*n),this.sValue=t,this.eValue=n}else t=this.sValue,n=this.eValue;var o,l,c,u,h,f=this.shapes.length,p=0;if(n===t)for(i=0;i<f;i+=1)this.shapes[i].localShapeCollection.releaseShapes(),this.shapes[i].shape._mdf=!0,this.shapes[i].shape.paths=this.shapes[i].localShapeCollection,this._mdf&&(this.shapes[i].pathsData.length=0);else if(1===n&&0===t||0===n&&1===t){if(this._mdf)for(i=0;i<f;i+=1)this.shapes[i].pathsData.length=0,this.shapes[i].shape._mdf=!0}else{var d,m,g=[];for(i=0;i<f;i+=1)if((d=this.shapes[i]).shape._mdf||this._mdf||e||2===this.m){if(l=(r=d.shape.paths)._length,h=0,!d.shape._mdf&&d.pathsData.length)h=d.totalShapeLength;else{for(c=this.releasePathsData(d.pathsData),o=0;o<l;o+=1)u=bez.getSegmentsLength(r.shapes[o]),c.push(u),h+=u.totalLength;d.totalShapeLength=h,d.pathsData=c}p+=h,d.shape._mdf=!0}else d.shape.paths=d.localShapeCollection;var y,v=t,b=n,k=0;for(i=f-1;i>=0;i-=1)if((d=this.shapes[i]).shape._mdf){for((m=d.localShapeCollection).releaseShapes(),2===this.m&&f>1?(y=this.calculateShapeEdges(t,n,d.totalShapeLength,k,p),k+=d.totalShapeLength):y=[[v,b]],l=y.length,o=0;o<l;o+=1){v=y[o][0],b=y[o][1],g.length=0,b<=1?g.push({s:d.totalShapeLength*v,e:d.totalShapeLength*b}):v>=1?g.push({s:d.totalShapeLength*(v-1),e:d.totalShapeLength*(b-1)}):(g.push({s:d.totalShapeLength*v,e:d.totalShapeLength}),g.push({s:0,e:d.totalShapeLength*(b-1)}));var E=this.addShapes(d,g[0]);if(g[0].s!==g[0].e){if(g.length>1)if(d.shape.paths.shapes[d.shape.paths._length-1].c){var x=E.pop();this.addPaths(E,m),E=this.addShapes(d,g[1],x)}else this.addPaths(E,m),E=this.addShapes(d,g[1]);this.addPaths(E,m)}}d.shape.paths=m}}},TrimModifier.prototype.addPaths=function(e,t){var n,r=e.length;for(n=0;n<r;n+=1)t.addShape(e[n])},TrimModifier.prototype.addSegment=function(e,t,n,r,i,a,s){i.setXYAt(t[0],t[1],"o",a),i.setXYAt(n[0],n[1],"i",a+1),s&&i.setXYAt(e[0],e[1],"v",a),i.setXYAt(r[0],r[1],"v",a+1)},TrimModifier.prototype.addSegmentFromArray=function(e,t,n,r){t.setXYAt(e[1],e[5],"o",n),t.setXYAt(e[2],e[6],"i",n+1),r&&t.setXYAt(e[0],e[4],"v",n),t.setXYAt(e[3],e[7],"v",n+1)},TrimModifier.prototype.addShapes=function(e,t,n){var r,i,a,s,o,l,c,u,h=e.pathsData,f=e.shape.paths.shapes,p=e.shape.paths._length,d=0,m=[],g=!0;for(n?(o=n._length,u=n._length):(n=shapePool.newElement(),o=0,u=0),m.push(n),r=0;r<p;r+=1){for(l=h[r].lengths,n.c=f[r].c,a=f[r].c?l.length:l.length+1,i=1;i<a;i+=1)if(d+(s=l[i-1]).addedLength<t.s)d+=s.addedLength,n.c=!1;else{if(d>t.e){n.c=!1;break}t.s<=d&&t.e>=d+s.addedLength?(this.addSegment(f[r].v[i-1],f[r].o[i-1],f[r].i[i],f[r].v[i],n,o,g),g=!1):(c=bez.getNewSegment(f[r].v[i-1],f[r].v[i],f[r].o[i-1],f[r].i[i],(t.s-d)/s.addedLength,(t.e-d)/s.addedLength,l[i-1]),this.addSegmentFromArray(c,n,o,g),g=!1,n.c=!1),d+=s.addedLength,o+=1}if(f[r].c&&l.length){if(s=l[i-1],d<=t.e){var y=l[i-1].addedLength;t.s<=d&&t.e>=d+y?(this.addSegment(f[r].v[i-1],f[r].o[i-1],f[r].i[0],f[r].v[0],n,o,g),g=!1):(c=bez.getNewSegment(f[r].v[i-1],f[r].v[0],f[r].o[i-1],f[r].i[0],(t.s-d)/y,(t.e-d)/y,l[i-1]),this.addSegmentFromArray(c,n,o,g),g=!1,n.c=!1)}else n.c=!1;d+=s.addedLength,o+=1}if(n._length&&(n.setXYAt(n.v[u][0],n.v[u][1],"i",u),n.setXYAt(n.v[n._length-1][0],n.v[n._length-1][1],"o",n._length-1)),d>t.e)break;r<p-1&&(n=shapePool.newElement(),g=!0,m.push(n),o=0)}return m},extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(e,t.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(e,t){var n=t/100,r=[0,0],i=e._length,a=0;for(a=0;a<i;a+=1)r[0]+=e.v[a][0],r[1]+=e.v[a][1];r[0]/=i,r[1]/=i;var s,o,l,c,u,h,f=shapePool.newElement();for(f.c=e.c,a=0;a<i;a+=1)s=e.v[a][0]+(r[0]-e.v[a][0])*n,o=e.v[a][1]+(r[1]-e.v[a][1])*n,l=e.o[a][0]+(r[0]-e.o[a][0])*-n,c=e.o[a][1]+(r[1]-e.o[a][1])*-n,u=e.i[a][0]+(r[0]-e.i[a][0])*-n,h=e.i[a][1]+(r[1]-e.i[a][1])*-n,f.setTripleAt(s,o,l,c,u,h,a);return f},PuckerAndBloatModifier.prototype.processShapes=function(e){var t,n,r,i,a,s,o=this.shapes.length,l=this.amount.v;if(0!==l)for(n=0;n<o;n+=1){if(s=(a=this.shapes[n]).localShapeCollection,a.shape._mdf||this._mdf||e)for(s.releaseShapes(),a.shape._mdf=!0,t=a.shape.paths.shapes,i=a.shape.paths._length,r=0;r<i;r+=1)s.addShape(this.processPath(t[r],l));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var e=[0,0];function t(e,t,n){if(this.elem=e,this.frameId=-1,this.propType="transform",this.data=t,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(n||e),t.p&&t.p.s?(this.px=PropertyFactory.getProp(e,t.p.x,0,0,this),this.py=PropertyFactory.getProp(e,t.p.y,0,0,this),t.p.z&&(this.pz=PropertyFactory.getProp(e,t.p.z,0,0,this))):this.p=PropertyFactory.getProp(e,t.p||{k:[0,0,0]},1,0,this),t.rx){if(this.rx=PropertyFactory.getProp(e,t.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(e,t.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(e,t.rz,0,degToRads,this),t.or.k[0].ti){var r,i=t.or.k.length;for(r=0;r<i;r+=1)t.or.k[r].to=null,t.or.k[r].ti=null}this.or=PropertyFactory.getProp(e,t.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(e,t.r||{k:0},0,degToRads,this);t.sk&&(this.sk=PropertyFactory.getProp(e,t.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(e,t.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(e,t.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(e,t.s||{k:[100,100,100]},1,.01,this),t.o?this.o=PropertyFactory.getProp(e,t.o,0,.01,e):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}return t.prototype={applyToMatrix:function(e){var t=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||t,this.a&&e.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&e.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&e.skewFromAxis(-this.sk.v,this.sa.v),this.r?e.rotate(-this.r.v):e.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?e.translate(this.px.v,this.py.v,-this.pz.v):e.translate(this.px.v,this.py.v,0):e.translate(this.p.v[0],this.p.v[1],-this.p.v[2])},getValue:function(t){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||t){var n;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var r,i;if(n=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(r=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/n,0),i=this.p.getValueAtTime(this.p.keyframes[0].t/n,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(r=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/n,0),i=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/n,0)):(r=this.p.pv,i=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/n,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){r=[],i=[];var a=this.px,s=this.py;a._caching.lastFrame+a.offsetTime<=a.keyframes[0].t?(r[0]=a.getValueAtTime((a.keyframes[0].t+.01)/n,0),r[1]=s.getValueAtTime((s.keyframes[0].t+.01)/n,0),i[0]=a.getValueAtTime(a.keyframes[0].t/n,0),i[1]=s.getValueAtTime(s.keyframes[0].t/n,0)):a._caching.lastFrame+a.offsetTime>=a.keyframes[a.keyframes.length-1].t?(r[0]=a.getValueAtTime(a.keyframes[a.keyframes.length-1].t/n,0),r[1]=s.getValueAtTime(s.keyframes[s.keyframes.length-1].t/n,0),i[0]=a.getValueAtTime((a.keyframes[a.keyframes.length-1].t-.01)/n,0),i[1]=s.getValueAtTime((s.keyframes[s.keyframes.length-1].t-.01)/n,0)):(r=[a.pv,s.pv],i[0]=a.getValueAtTime((a._caching.lastFrame+a.offsetTime-.01)/n,a.offsetTime),i[1]=s.getValueAtTime((s._caching.lastFrame+s.offsetTime-.01)/n,s.offsetTime))}else r=i=e;this.v.rotate(-Math.atan2(r[1]-i[1],r[0]-i[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}},precalculateMatrix:function(){if(!this.a.k&&(this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1,!this.s.effectsSequence.length)){if(this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2,this.sk){if(this.sk.effectsSequence.length||this.sa.effectsSequence.length)return;this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3}this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):this.rz.effectsSequence.length||this.ry.effectsSequence.length||this.rx.effectsSequence.length||this.or.effectsSequence.length||(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}},autoOrient:function(){}},extendPrototype([DynamicPropertyContainer],t),t.prototype.addDynamicProperty=function(e){this._addDynamicProperty(e),this.elem.addDynamicProperty(e),this._isDirty=!0},t.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty,{getTransformProperty:function(e,n,r){return new t(e,n,r)}}}();function RepeaterModifier(){}function RoundCornersModifier(){}function getFontProperties(e){for(var t=e.fStyle?e.fStyle.split(" "):[],n="normal",r="normal",i=t.length,a=0;a<i;a+=1)switch(t[a].toLowerCase()){case"italic":r="italic";break;case"bold":n="700";break;case"black":n="900";break;case"medium":n="500";break;case"regular":case"normal":n="400";break;case"light":case"thin":n="200"}return{style:r,weight:e.fWeight||n}}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(e,t.c,0,null,this),this.o=PropertyFactory.getProp(e,t.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(e,t.tr,this),this.so=PropertyFactory.getProp(e,t.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(e,t.tr.eo,0,.01,this),this.data=t,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(e,t,n,r,i,a){var s=a?-1:1,o=r.s.v[0]+(1-r.s.v[0])*(1-i),l=r.s.v[1]+(1-r.s.v[1])*(1-i);e.translate(r.p.v[0]*s*i,r.p.v[1]*s*i,r.p.v[2]),t.translate(-r.a.v[0],-r.a.v[1],r.a.v[2]),t.rotate(-r.r.v*s*i),t.translate(r.a.v[0],r.a.v[1],r.a.v[2]),n.translate(-r.a.v[0],-r.a.v[1],r.a.v[2]),n.scale(a?1/o:o,a?1/l:l),n.translate(r.a.v[0],r.a.v[1],r.a.v[2])},RepeaterModifier.prototype.init=function(e,t,n,r){for(this.elem=e,this.arr=t,this.pos=n,this.elemsData=r,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(e),this.initModifierProperties(e,t[n]);n>0;)n-=1,this._elements.unshift(t[n]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(e){var t,n=e.length;for(t=0;t<n;t+=1)e[t]._processed=!1,"gr"===e[t].ty&&this.resetElements(e[t].it)},RepeaterModifier.prototype.cloneElements=function(e){var t=JSON.parse(JSON.stringify(e));return this.resetElements(t),t},RepeaterModifier.prototype.changeGroupRender=function(e,t){var n,r=e.length;for(n=0;n<r;n+=1)e[n]._render=t,"gr"===e[n].ty&&this.changeGroupRender(e[n].it,t)},RepeaterModifier.prototype.processShapes=function(e){var t,n,r,i,a,s=!1;if(this._mdf||e){var o,l=Math.ceil(this.c.v);if(this._groups.length<l){for(;this._groups.length<l;){var c={it:this.cloneElements(this._elements),ty:"gr"};c.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,c),this._groups.splice(0,0,c),this._currentCopies+=1}this.elem.reloadShapes(),s=!0}for(a=0,r=0;r<=this._groups.length-1;r+=1){if(o=a<l,this._groups[r]._render=o,this.changeGroupRender(this._groups[r].it,o),!o){var u=this.elemsData[r].it,h=u[u.length-1];0!==h.transform.op.v?(h.transform.op._mdf=!0,h.transform.op.v=0):h.transform.op._mdf=!1}a+=1}this._currentCopies=l;var f=this.o.v,p=f%1,d=f>0?Math.floor(f):Math.ceil(f),m=this.pMatrix.props,g=this.rMatrix.props,y=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var v,b,k=0;if(f>0){for(;k<d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),k+=1;p&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,p,!1),k+=p)}else if(f<0){for(;k>d;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),k-=1;p&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-p,!0),k-=p)}for(r=1===this.data.m?0:this._currentCopies-1,i=1===this.data.m?1:-1,a=this._currentCopies;a;){if(b=(n=(t=this.elemsData[r].it)[t.length-1].transform.mProps.v.props).length,t[t.length-1].transform.mProps._mdf=!0,t[t.length-1].transform.op._mdf=!0,t[t.length-1].transform.op.v=1===this._currentCopies?this.so.v:this.so.v+(this.eo.v-this.so.v)*(r/(this._currentCopies-1)),0!==k){for((0!==r&&1===i||r!==this._currentCopies-1&&-1===i)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(g[0],g[1],g[2],g[3],g[4],g[5],g[6],g[7],g[8],g[9],g[10],g[11],g[12],g[13],g[14],g[15]),this.matrix.transform(y[0],y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9],y[10],y[11],y[12],y[13],y[14],y[15]),this.matrix.transform(m[0],m[1],m[2],m[3],m[4],m[5],m[6],m[7],m[8],m[9],m[10],m[11],m[12],m[13],m[14],m[15]),v=0;v<b;v+=1)n[v]=this.matrix.props[v];this.matrix.reset()}else for(this.matrix.reset(),v=0;v<b;v+=1)n[v]=this.matrix.props[v];k+=1,a-=1,r+=i}}else for(a=this._currentCopies,r=0,i=1;a;)n=(t=this.elemsData[r].it)[t.length-1].transform.mProps.v.props,t[t.length-1].transform.mProps._mdf=!1,t[t.length-1].transform.op._mdf=!1,a-=1,r+=i;return s},RepeaterModifier.prototype.addShape=function(){},extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(e,t.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(e,t){var n,r=shapePool.newElement();r.c=e.c;var i,a,s,o,l,c,u,h,f,p,d,m,g=e._length,y=0;for(n=0;n<g;n+=1)i=e.v[n],s=e.o[n],a=e.i[n],i[0]===s[0]&&i[1]===s[1]&&i[0]===a[0]&&i[1]===a[1]?0!==n&&n!==g-1||e.c?(o=0===n?e.v[g-1]:e.v[n-1],c=(l=Math.sqrt(Math.pow(i[0]-o[0],2)+Math.pow(i[1]-o[1],2)))?Math.min(l/2,t)/l:0,u=d=i[0]+(o[0]-i[0])*c,h=m=i[1]-(i[1]-o[1])*c,f=u-(u-i[0])*roundCorner,p=h-(h-i[1])*roundCorner,r.setTripleAt(u,h,f,p,d,m,y),y+=1,o=n===g-1?e.v[0]:e.v[n+1],c=(l=Math.sqrt(Math.pow(i[0]-o[0],2)+Math.pow(i[1]-o[1],2)))?Math.min(l/2,t)/l:0,u=f=i[0]+(o[0]-i[0])*c,h=p=i[1]+(o[1]-i[1])*c,d=u-(u-i[0])*roundCorner,m=h-(h-i[1])*roundCorner,r.setTripleAt(u,h,f,p,d,m,y),y+=1):(r.setTripleAt(i[0],i[1],s[0],s[1],a[0],a[1],y),y+=1):(r.setTripleAt(e.v[n][0],e.v[n][1],e.o[n][0],e.o[n][1],e.i[n][0],e.i[n][1],y),y+=1);return r},RoundCornersModifier.prototype.processShapes=function(e){var t,n,r,i,a,s,o=this.shapes.length,l=this.rd.v;if(0!==l)for(n=0;n<o;n+=1){if(s=(a=this.shapes[n]).localShapeCollection,a.shape._mdf||this._mdf||e)for(s.releaseShapes(),a.shape._mdf=!0,t=a.shape.paths.shapes,i=a.shape.paths._length,r=0;r<i;r+=1)s.addShape(this.processPath(t[r],l));a.shape.paths=a.localShapeCollection}this.dynamicProperties.length||(this._mdf=!1)};var FontManager=function(){var e={w:0,size:0,shapes:[],data:{shapes:[]}},t=[];t=t.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var n=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"],r=[65039,8205];function i(e,t){var n=createTag("span");n.setAttribute("aria-hidden",!0),n.style.fontFamily=t;var r=createTag("span");r.innerText="giItT1WQy@!-/#",n.style.position="absolute",n.style.left="-10000px",n.style.top="-10000px",n.style.fontSize="300px",n.style.fontVariant="normal",n.style.fontStyle="normal",n.style.fontWeight="normal",n.style.letterSpacing="0",n.appendChild(r),document.body.appendChild(n);var i=r.offsetWidth;return r.style.fontFamily=function(e){var t,n=e.split(","),r=n.length,i=[];for(t=0;t<r;t+=1)"sans-serif"!==n[t]&&"monospace"!==n[t]&&i.push(n[t]);return i.join(",")}(e)+", "+t,{node:r,w:i,parent:n}}function a(e,t){var n,r=document.body&&t?"svg":"canvas",i=getFontProperties(e);if("svg"===r){var a=createNS("text");a.style.fontSize="100px",a.setAttribute("font-family",e.fFamily),a.setAttribute("font-style",i.style),a.setAttribute("font-weight",i.weight),a.textContent="1",e.fClass?(a.style.fontFamily="inherit",a.setAttribute("class",e.fClass)):a.style.fontFamily=e.fFamily,t.appendChild(a),n=a}else{var s=new OffscreenCanvas(500,500).getContext("2d");s.font=i.style+" "+i.weight+" 100px "+e.fFamily,n=s}return{measureText:function(e){return"svg"===r?(n.textContent=e,n.getComputedTextLength()):n.measureText(e).width}}}var s=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};s.isModifier=function(e,t){var r=e.toString(16)+t.toString(16);return-1!==n.indexOf(r)},s.isZeroWidthJoiner=function(e,t){return t?e===r[0]&&t===r[1]:e===r[1]},s.isCombinedCharacter=function(e){return-1!==t.indexOf(e)};var o={addChars:function(e){if(e){var t;this.chars||(this.chars=[]);var n,r,i=e.length,a=this.chars.length;for(t=0;t<i;t+=1){for(n=0,r=!1;n<a;)this.chars[n].style===e[t].style&&this.chars[n].fFamily===e[t].fFamily&&this.chars[n].ch===e[t].ch&&(r=!0),n+=1;r||(this.chars.push(e[t]),a+=1)}}},addFonts:function(e,t){if(e){if(this.chars)return this.isLoaded=!0,void(this.fonts=e.list);if(!document.body)return this.isLoaded=!0,e.list.forEach((function(e){e.helper=a(e),e.cache={}})),void(this.fonts=e.list);var n,r=e.list,s=r.length,o=s;for(n=0;n<s;n+=1){var l,c,u=!0;if(r[n].loaded=!1,r[n].monoCase=i(r[n].fFamily,"monospace"),r[n].sansCase=i(r[n].fFamily,"sans-serif"),r[n].fPath){if("p"===r[n].fOrigin||3===r[n].origin){if((l=document.querySelectorAll('style[f-forigin="p"][f-family="'+r[n].fFamily+'"], style[f-origin="3"][f-family="'+r[n].fFamily+'"]')).length>0&&(u=!1),u){var h=createTag("style");h.setAttribute("f-forigin",r[n].fOrigin),h.setAttribute("f-origin",r[n].origin),h.setAttribute("f-family",r[n].fFamily),h.type="text/css",h.innerText="@font-face {font-family: "+r[n].fFamily+"; font-style: normal; src: url('"+r[n].fPath+"');}",t.appendChild(h)}}else if("g"===r[n].fOrigin||1===r[n].origin){for(l=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),c=0;c<l.length;c+=1)-1!==l[c].href.indexOf(r[n].fPath)&&(u=!1);if(u){var f=createTag("link");f.setAttribute("f-forigin",r[n].fOrigin),f.setAttribute("f-origin",r[n].origin),f.type="text/css",f.rel="stylesheet",f.href=r[n].fPath,document.body.appendChild(f)}}else if("t"===r[n].fOrigin||2===r[n].origin){for(l=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),c=0;c<l.length;c+=1)r[n].fPath===l[c].src&&(u=!1);if(u){var p=createTag("link");p.setAttribute("f-forigin",r[n].fOrigin),p.setAttribute("f-origin",r[n].origin),p.setAttribute("rel","stylesheet"),p.setAttribute("href",r[n].fPath),t.appendChild(p)}}}else r[n].loaded=!0,o-=1;r[n].helper=a(r[n],t),r[n].cache={},this.fonts.push(r[n])}0===o?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}else this.isLoaded=!0},getCharData:function(t,n,r){for(var i=0,a=this.chars.length;i<a;){if(this.chars[i].ch===t&&this.chars[i].style===n&&this.chars[i].fFamily===r)return this.chars[i];i+=1}return("string"==typeof t&&13!==t.charCodeAt(0)||!t)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",t,n,r)),e},getFontByName:function(e){for(var t=0,n=this.fonts.length;t<n;){if(this.fonts[t].fName===e)return this.fonts[t];t+=1}return this.fonts[0]},measureText:function(e,t,n){var r=this.getFontByName(t),i=e.charCodeAt(0);if(!r.cache[i+1]){var a=r.helper;if(" "===e){var s=a.measureText("|"+e+"|"),o=a.measureText("||");r.cache[i+1]=(s-o)/100}else r.cache[i+1]=a.measureText(e)/100}return r.cache[i+1]*n},checkLoadedFonts:function(){var e,t,n,r=this.fonts.length,i=r;for(e=0;e<r;e+=1)this.fonts[e].loaded?i-=1:"n"===this.fonts[e].fOrigin||0===this.fonts[e].origin?this.fonts[e].loaded=!0:(t=this.fonts[e].monoCase.node,n=this.fonts[e].monoCase.w,t.offsetWidth!==n?(i-=1,this.fonts[e].loaded=!0):(t=this.fonts[e].sansCase.node,n=this.fonts[e].sansCase.w,t.offsetWidth!==n&&(i-=1,this.fonts[e].loaded=!0)),this.fonts[e].loaded&&(this.fonts[e].sansCase.parent.parentNode.removeChild(this.fonts[e].sansCase.parent),this.fonts[e].monoCase.parent.parentNode.removeChild(this.fonts[e].monoCase.parent)));0!==i&&Date.now()-this.initTime<5e3?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)},setIsLoaded:function(){this.isLoaded=!0}};return s.prototype=o,s}();function RenderableElement(){}RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(e){-1===this.renderableComponents.indexOf(e)&&this.renderableComponents.push(e)},removeRenderableComponent:function(e){-1!==this.renderableComponents.indexOf(e)&&this.renderableComponents.splice(this.renderableComponents.indexOf(e),1)},prepareRenderableFrame:function(e){this.checkLayerLimits(e)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(e){this.data.ip-this.data.st<=e&&this.data.op-this.data.st>e?!0!==this.isInRange&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):!1!==this.isInRange&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var e,t=this.renderableComponents.length;for(e=0;e<t;e+=1)this.renderableComponents[e].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return 5===this.data.ty?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var MaskManagerInterface=function(){function e(e,t){this._mask=e,this._data=t}return Object.defineProperty(e.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(e.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),100*this._mask.op.v}}),function(t){var n,r=createSizedArray(t.viewData.length),i=t.viewData.length;for(n=0;n<i;n+=1)r[n]=new e(t.viewData[n],t.masksProperties[n]);return function(e){for(n=0;n<i;){if(t.masksProperties[n].nm===e)return r[n];n+=1}return null}}}(),ExpressionPropertyInterface=function(){var e={pv:0,v:0,mult:1},t={pv:[0,0,0],v:[0,0,0],mult:1};function n(e,t,n){Object.defineProperty(e,"velocity",{get:function(){return t.getVelocityAtTime(t.comp.currentFrame)}}),e.numKeys=t.keyframes?t.keyframes.length:0,e.key=function(r){if(!e.numKeys)return 0;var i;i="s"in t.keyframes[r-1]?t.keyframes[r-1].s:"e"in t.keyframes[r-2]?t.keyframes[r-2].e:t.keyframes[r-2].s;var a="unidimensional"===n?new Number(i):Object.assign({},i);return a.time=t.keyframes[r-1].t/t.elem.comp.globalData.frameRate,a.value="unidimensional"===n?i[0]:i,a},e.valueAtTime=t.getValueAtTime,e.speedAtTime=t.getSpeedAtTime,e.velocityAtTime=t.getVelocityAtTime,e.propertyGroup=t.propertyGroup}function r(){return e}return function(i){return i?"unidimensional"===i.propType?function(t){t&&"pv"in t||(t=e);var r=1/t.mult,i=t.pv*r,a=new Number(i);return a.value=i,n(a,t,"unidimensional"),function(){return t.k&&t.getValue(),i=t.v*r,a.value!==i&&((a=new Number(i)).value=i,n(a,t,"unidimensional")),a}}(i):function(e){e&&"pv"in e||(e=t);var r=1/e.mult,i=e.data&&e.data.l||e.pv.length,a=createTypedArray("float32",i),s=createTypedArray("float32",i);return a.value=s,n(a,e,"multidimensional"),function(){e.k&&e.getValue();for(var t=0;t<i;t+=1)s[t]=e.v[t]*r,a[t]=s[t];return a}}(i):r}}(),TransformExpressionInterface=function(e){function t(e){switch(e){case"scale":case"Scale":case"ADBE Scale":case 6:return t.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return t.rotation;case"ADBE Rotate X":return t.xRotation;case"ADBE Rotate Y":return t.yRotation;case"position":case"Position":case"ADBE Position":case 2:return t.position;case"ADBE Position_0":return t.xPosition;case"ADBE Position_1":return t.yPosition;case"ADBE Position_2":return t.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return t.anchorPoint;case"opacity":case"Opacity":case 11:return t.opacity;default:return null}}var n,r,i,a;return Object.defineProperty(t,"rotation",{get:ExpressionPropertyInterface(e.r||e.rz)}),Object.defineProperty(t,"zRotation",{get:ExpressionPropertyInterface(e.rz||e.r)}),Object.defineProperty(t,"xRotation",{get:ExpressionPropertyInterface(e.rx)}),Object.defineProperty(t,"yRotation",{get:ExpressionPropertyInterface(e.ry)}),Object.defineProperty(t,"scale",{get:ExpressionPropertyInterface(e.s)}),e.p?a=ExpressionPropertyInterface(e.p):(n=ExpressionPropertyInterface(e.px),r=ExpressionPropertyInterface(e.py),e.pz&&(i=ExpressionPropertyInterface(e.pz))),Object.defineProperty(t,"position",{get:function(){return e.p?a():[n(),r(),i?i():0]}}),Object.defineProperty(t,"xPosition",{get:ExpressionPropertyInterface(e.px)}),Object.defineProperty(t,"yPosition",{get:ExpressionPropertyInterface(e.py)}),Object.defineProperty(t,"zPosition",{get:ExpressionPropertyInterface(e.pz)}),Object.defineProperty(t,"anchorPoint",{get:ExpressionPropertyInterface(e.a)}),Object.defineProperty(t,"opacity",{get:ExpressionPropertyInterface(e.o)}),Object.defineProperty(t,"skew",{get:ExpressionPropertyInterface(e.sk)}),Object.defineProperty(t,"skewAxis",{get:ExpressionPropertyInterface(e.sa)}),Object.defineProperty(t,"orientation",{get:ExpressionPropertyInterface(e.or)}),t},LayerExpressionInterface=function(){function e(e){var t=new Matrix;return void 0!==e?this._elem.finalTransform.mProp.getValueAtTime(e).clone(t):this._elem.finalTransform.mProp.applyToMatrix(t),t}function t(e,t){var n=this.getMatrix(t);return n.props[12]=0,n.props[13]=0,n.props[14]=0,this.applyPoint(n,e)}function n(e,t){var n=this.getMatrix(t);return this.applyPoint(n,e)}function r(e,t){var n=this.getMatrix(t);return n.props[12]=0,n.props[13]=0,n.props[14]=0,this.invertPoint(n,e)}function i(e,t){var n=this.getMatrix(t);return this.invertPoint(n,e)}function a(e,t){if(this._elem.hierarchy&&this._elem.hierarchy.length){var n,r=this._elem.hierarchy.length;for(n=0;n<r;n+=1)this._elem.hierarchy[n].finalTransform.mProp.applyToMatrix(e)}return e.applyToPointArray(t[0],t[1],t[2]||0)}function s(e,t){if(this._elem.hierarchy&&this._elem.hierarchy.length){var n,r=this._elem.hierarchy.length;for(n=0;n<r;n+=1)this._elem.hierarchy[n].finalTransform.mProp.applyToMatrix(e)}return e.inversePoint(t)}function o(e){var t=new Matrix;if(t.reset(),this._elem.finalTransform.mProp.applyToMatrix(t),this._elem.hierarchy&&this._elem.hierarchy.length){var n,r=this._elem.hierarchy.length;for(n=0;n<r;n+=1)this._elem.hierarchy[n].finalTransform.mProp.applyToMatrix(t);return t.inversePoint(e)}return t.inversePoint(e)}function l(){return[1,1,1,1]}return function(c){var u;function h(e){switch(e){case"ADBE Root Vectors Group":case"Contents":case 2:return h.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return u;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return h.effect;case"ADBE Text Properties":return h.textInterface;default:return null}}h.getMatrix=e,h.invertPoint=s,h.applyPoint=a,h.toWorld=n,h.toWorldVec=t,h.fromWorld=i,h.fromWorldVec=r,h.toComp=n,h.fromComp=o,h.sampleImage=l,h.sourceRectAtTime=c.sourceRectAtTime.bind(c),h._elem=c;var f=getDescriptor(u=TransformExpressionInterface(c.finalTransform.mProp),"anchorPoint");return Object.defineProperties(h,{hasParent:{get:function(){return c.hierarchy.length}},parent:{get:function(){return c.hierarchy[0].layerInterface}},rotation:getDescriptor(u,"rotation"),scale:getDescriptor(u,"scale"),position:getDescriptor(u,"position"),opacity:getDescriptor(u,"opacity"),anchorPoint:f,anchor_point:f,transform:{get:function(){return u}},active:{get:function(){return c.isInRange}}}),h.startTime=c.data.st,h.index=c.data.ind,h.source=c.data.refId,h.height=0===c.data.ty?c.data.h:100,h.width=0===c.data.ty?c.data.w:100,h.inPoint=c.data.ip/c.comp.globalData.frameRate,h.outPoint=c.data.op/c.comp.globalData.frameRate,h._name=c.data.nm,h.registerMaskInterface=function(e){h.mask=new MaskManagerInterface(e,c)},h.registerEffectsInterface=function(e){h.effect=e},h}}(),propertyGroupFactory=function(e,t){return function(n){return(n=void 0===n?1:n)<=0?e:t(n-1)}},PropertyInterface=function(e,t){var n={_name:e};return function(e){return(e=void 0===e?1:e)<=0?n:t(e-1)}},EffectsExpressionInterface=function(){function e(n,r,i,a){function s(e){for(var t=n.ef,r=0,i=t.length;r<i;){if(e===t[r].nm||e===t[r].mn||e===t[r].ix)return 5===t[r].ty?c[r]:c[r]();r+=1}throw new Error}var o,l=propertyGroupFactory(s,i),c=[],u=n.ef.length;for(o=0;o<u;o+=1)5===n.ef[o].ty?c.push(e(n.ef[o],r.effectElements[o],r.effectElements[o].propertyGroup,a)):c.push(t(r.effectElements[o],n.ef[o].ty,a,l));return"ADBE Color Control"===n.mn&&Object.defineProperty(s,"color",{get:function(){return c[0]()}}),Object.defineProperties(s,{numProperties:{get:function(){return n.np}},_name:{value:n.nm},propertyGroup:{value:l}}),s.enabled=0!==n.en,s.active=s.enabled,s}function t(e,t,n,r){var i=ExpressionPropertyInterface(e.p);return e.p.setGroupProperty&&e.p.setGroupProperty(PropertyInterface("",r)),function(){return 10===t?n.comp.compInterface(e.p.v):i()}}return{createEffectsInterface:function(t,n){if(t.effectsManager){var r,i=[],a=t.data.ef,s=t.effectsManager.effectElements.length;for(r=0;r<s;r+=1)i.push(e(a[r],t.effectsManager.effectElements[r],n,t));var o=t.data.ef||[],l=function(e){for(r=0,s=o.length;r<s;){if(e===o[r].nm||e===o[r].mn||e===o[r].ix)return i[r];r+=1}return null};return Object.defineProperty(l,"numProperties",{get:function(){return o.length}}),l}return null}}}(),CompExpressionInterface=function(e){function t(t){for(var n=0,r=e.layers.length;n<r;){if(e.layers[n].nm===t||e.layers[n].ind===t)return e.elements[n].layerInterface;n+=1}return null}return Object.defineProperty(t,"_name",{value:e.data.nm}),t.layer=t,t.pixelAspect=1,t.height=e.data.h||e.globalData.compSize.h,t.width=e.data.w||e.globalData.compSize.w,t.pixelAspect=1,t.frameDuration=1/e.globalData.frameRate,t.displayStartTime=0,t.numLayers=e.layers.length,t},ShapePathInterface=function(e,t,n){var r=t.sh;function i(e){return"Shape"===e||"shape"===e||"Path"===e||"path"===e||"ADBE Vector Shape"===e||2===e?i.path:null}var a=propertyGroupFactory(i,n);return r.setGroupProperty(PropertyInterface("Path",a)),Object.defineProperties(i,{path:{get:function(){return r.k&&r.getValue(),r}},shape:{get:function(){return r.k&&r.getValue(),r}},_name:{value:e.nm},ix:{value:e.ix},propertyIndex:{value:e.ix},mn:{value:e.mn},propertyGroup:{value:n}}),i},ShapeExpressionInterface=function(){function e(e,s,f){var p,d=[],m=e?e.length:0;for(p=0;p<m;p+=1)"gr"===e[p].ty?d.push(t(e[p],s[p],f)):"fl"===e[p].ty?d.push(n(e[p],s[p],f)):"st"===e[p].ty?d.push(i(e[p],s[p],f)):"tm"===e[p].ty?d.push(a(e[p],s[p],f)):"tr"===e[p].ty||("el"===e[p].ty?d.push(o(e[p],s[p],f)):"sr"===e[p].ty?d.push(l(e[p],s[p],f)):"sh"===e[p].ty?d.push(ShapePathInterface(e[p],s[p],f)):"rc"===e[p].ty?d.push(c(e[p],s[p],f)):"rd"===e[p].ty?d.push(u(e[p],s[p],f)):"rp"===e[p].ty?d.push(h(e[p],s[p],f)):"gf"===e[p].ty?d.push(r(e[p],s[p],f)):d.push((e[p],s[p],function(){return null})));return d}function t(t,n,r){var i=function(e){switch(e){case"ADBE Vectors Group":case"Contents":case 2:return i.content;default:return i.transform}};i.propertyGroup=propertyGroupFactory(i,r);var a=function(t,n,r){var i,a=function(e){for(var t=0,n=i.length;t<n;){if(i[t]._name===e||i[t].mn===e||i[t].propertyIndex===e||i[t].ix===e||i[t].ind===e)return i[t];t+=1}return"number"==typeof e?i[e-1]:null};a.propertyGroup=propertyGroupFactory(a,r),i=e(t.it,n.it,a.propertyGroup),a.numProperties=i.length;var o=s(t.it[t.it.length-1],n.it[n.it.length-1],a.propertyGroup);return a.transform=o,a.propertyIndex=t.cix,a._name=t.nm,a}(t,n,i.propertyGroup),o=s(t.it[t.it.length-1],n.it[n.it.length-1],i.propertyGroup);return i.content=a,i.transform=o,Object.defineProperty(i,"_name",{get:function(){return t.nm}}),i.numProperties=t.np,i.propertyIndex=t.ix,i.nm=t.nm,i.mn=t.mn,i}function n(e,t,n){function r(e){return"Color"===e||"color"===e?r.color:"Opacity"===e||"opacity"===e?r.opacity:null}return Object.defineProperties(r,{color:{get:ExpressionPropertyInterface(t.c)},opacity:{get:ExpressionPropertyInterface(t.o)},_name:{value:e.nm},mn:{value:e.mn}}),t.c.setGroupProperty(PropertyInterface("Color",n)),t.o.setGroupProperty(PropertyInterface("Opacity",n)),r}function r(e,t,n){function r(e){return"Start Point"===e||"start point"===e?r.startPoint:"End Point"===e||"end point"===e?r.endPoint:"Opacity"===e||"opacity"===e?r.opacity:null}return Object.defineProperties(r,{startPoint:{get:ExpressionPropertyInterface(t.s)},endPoint:{get:ExpressionPropertyInterface(t.e)},opacity:{get:ExpressionPropertyInterface(t.o)},type:{get:function(){return"a"}},_name:{value:e.nm},mn:{value:e.mn}}),t.s.setGroupProperty(PropertyInterface("Start Point",n)),t.e.setGroupProperty(PropertyInterface("End Point",n)),t.o.setGroupProperty(PropertyInterface("Opacity",n)),r}function i(e,t,n){var r,i=propertyGroupFactory(c,n),a=propertyGroupFactory(l,i);function s(n){Object.defineProperty(l,e.d[n].nm,{get:ExpressionPropertyInterface(t.d.dataProps[n].p)})}var o=e.d?e.d.length:0,l={};for(r=0;r<o;r+=1)s(r),t.d.dataProps[r].p.setGroupProperty(a);function c(e){return"Color"===e||"color"===e?c.color:"Opacity"===e||"opacity"===e?c.opacity:"Stroke Width"===e||"stroke width"===e?c.strokeWidth:null}return Object.defineProperties(c,{color:{get:ExpressionPropertyInterface(t.c)},opacity:{get:ExpressionPropertyInterface(t.o)},strokeWidth:{get:ExpressionPropertyInterface(t.w)},dash:{get:function(){return l}},_name:{value:e.nm},mn:{value:e.mn}}),t.c.setGroupProperty(PropertyInterface("Color",i)),t.o.setGroupProperty(PropertyInterface("Opacity",i)),t.w.setGroupProperty(PropertyInterface("Stroke Width",i)),c}function a(e,t,n){function r(t){return t===e.e.ix||"End"===t||"end"===t?r.end:t===e.s.ix?r.start:t===e.o.ix?r.offset:null}var i=propertyGroupFactory(r,n);return r.propertyIndex=e.ix,t.s.setGroupProperty(PropertyInterface("Start",i)),t.e.setGroupProperty(PropertyInterface("End",i)),t.o.setGroupProperty(PropertyInterface("Offset",i)),r.propertyIndex=e.ix,r.propertyGroup=n,Object.defineProperties(r,{start:{get:ExpressionPropertyInterface(t.s)},end:{get:ExpressionPropertyInterface(t.e)},offset:{get:ExpressionPropertyInterface(t.o)},_name:{value:e.nm}}),r.mn=e.mn,r}function s(e,t,n){function r(t){return e.a.ix===t||"Anchor Point"===t?r.anchorPoint:e.o.ix===t||"Opacity"===t?r.opacity:e.p.ix===t||"Position"===t?r.position:e.r.ix===t||"Rotation"===t||"ADBE Vector Rotation"===t?r.rotation:e.s.ix===t||"Scale"===t?r.scale:e.sk&&e.sk.ix===t||"Skew"===t?r.skew:e.sa&&e.sa.ix===t||"Skew Axis"===t?r.skewAxis:null}var i=propertyGroupFactory(r,n);return t.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",i)),t.transform.mProps.p.setGroupProperty(PropertyInterface("Position",i)),t.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",i)),t.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",i)),t.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",i)),t.transform.mProps.sk&&(t.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",i)),t.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",i))),t.transform.op.setGroupProperty(PropertyInterface("Opacity",i)),Object.defineProperties(r,{opacity:{get:ExpressionPropertyInterface(t.transform.mProps.o)},position:{get:ExpressionPropertyInterface(t.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(t.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(t.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(t.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(t.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(t.transform.mProps.sa)},_name:{value:e.nm}}),r.ty="tr",r.mn=e.mn,r.propertyGroup=n,r}function o(e,t,n){function r(t){return e.p.ix===t?r.position:e.s.ix===t?r.size:null}var i=propertyGroupFactory(r,n);r.propertyIndex=e.ix;var a="tm"===t.sh.ty?t.sh.prop:t.sh;return a.s.setGroupProperty(PropertyInterface("Size",i)),a.p.setGroupProperty(PropertyInterface("Position",i)),Object.defineProperties(r,{size:{get:ExpressionPropertyInterface(a.s)},position:{get:ExpressionPropertyInterface(a.p)},_name:{value:e.nm}}),r.mn=e.mn,r}function l(e,t,n){function r(t){return e.p.ix===t?r.position:e.r.ix===t?r.rotation:e.pt.ix===t?r.points:e.or.ix===t||"ADBE Vector Star Outer Radius"===t?r.outerRadius:e.os.ix===t?r.outerRoundness:!e.ir||e.ir.ix!==t&&"ADBE Vector Star Inner Radius"!==t?e.is&&e.is.ix===t?r.innerRoundness:null:r.innerRadius}var i=propertyGroupFactory(r,n),a="tm"===t.sh.ty?t.sh.prop:t.sh;return r.propertyIndex=e.ix,a.or.setGroupProperty(PropertyInterface("Outer Radius",i)),a.os.setGroupProperty(PropertyInterface("Outer Roundness",i)),a.pt.setGroupProperty(PropertyInterface("Points",i)),a.p.setGroupProperty(PropertyInterface("Position",i)),a.r.setGroupProperty(PropertyInterface("Rotation",i)),e.ir&&(a.ir.setGroupProperty(PropertyInterface("Inner Radius",i)),a.is.setGroupProperty(PropertyInterface("Inner Roundness",i))),Object.defineProperties(r,{position:{get:ExpressionPropertyInterface(a.p)},rotation:{get:ExpressionPropertyInterface(a.r)},points:{get:ExpressionPropertyInterface(a.pt)},outerRadius:{get:ExpressionPropertyInterface(a.or)},outerRoundness:{get:ExpressionPropertyInterface(a.os)},innerRadius:{get:ExpressionPropertyInterface(a.ir)},innerRoundness:{get:ExpressionPropertyInterface(a.is)},_name:{value:e.nm}}),r.mn=e.mn,r}function c(e,t,n){function r(t){return e.p.ix===t?r.position:e.r.ix===t?r.roundness:e.s.ix===t||"Size"===t||"ADBE Vector Rect Size"===t?r.size:null}var i=propertyGroupFactory(r,n),a="tm"===t.sh.ty?t.sh.prop:t.sh;return r.propertyIndex=e.ix,a.p.setGroupProperty(PropertyInterface("Position",i)),a.s.setGroupProperty(PropertyInterface("Size",i)),a.r.setGroupProperty(PropertyInterface("Rotation",i)),Object.defineProperties(r,{position:{get:ExpressionPropertyInterface(a.p)},roundness:{get:ExpressionPropertyInterface(a.r)},size:{get:ExpressionPropertyInterface(a.s)},_name:{value:e.nm}}),r.mn=e.mn,r}function u(e,t,n){function r(t){return e.r.ix===t||"Round Corners 1"===t?r.radius:null}var i=propertyGroupFactory(r,n),a=t;return r.propertyIndex=e.ix,a.rd.setGroupProperty(PropertyInterface("Radius",i)),Object.defineProperties(r,{radius:{get:ExpressionPropertyInterface(a.rd)},_name:{value:e.nm}}),r.mn=e.mn,r}function h(e,t,n){function r(t){return e.c.ix===t||"Copies"===t?r.copies:e.o.ix===t||"Offset"===t?r.offset:null}var i=propertyGroupFactory(r,n),a=t;return r.propertyIndex=e.ix,a.c.setGroupProperty(PropertyInterface("Copies",i)),a.o.setGroupProperty(PropertyInterface("Offset",i)),Object.defineProperties(r,{copies:{get:ExpressionPropertyInterface(a.c)},offset:{get:ExpressionPropertyInterface(a.o)},_name:{value:e.nm}}),r.mn=e.mn,r}return function(t,n,r){var i;function a(e){if("number"==typeof e)return 0===(e=void 0===e?1:e)?r:i[e-1];for(var t=0,n=i.length;t<n;){if(i[t]._name===e)return i[t];t+=1}return null}return a.propertyGroup=propertyGroupFactory(a,(function(){return r})),i=e(t,n,a.propertyGroup),a.numProperties=i.length,a._name="Contents",a}}(),TextExpressionInterface=function(e){var t,n;function r(e){return"ADBE Text Document"===e?r.sourceText:null}return Object.defineProperty(r,"sourceText",{get:function(){e.textProperty.getValue();var r=e.textProperty.currentData.t;return r!==t&&(e.textProperty.currentData.t=t,(n=new String(r)).value=r||new String(r)),n}}),r},getBlendMode=(blendModeEnums={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"},function(e){return blendModeEnums[e]||""}),blendModeEnums;function SliderEffect(e,t,n){this.p=PropertyFactory.getProp(t,e.v,0,0,n)}function AngleEffect(e,t,n){this.p=PropertyFactory.getProp(t,e.v,0,0,n)}function ColorEffect(e,t,n){this.p=PropertyFactory.getProp(t,e.v,1,0,n)}function PointEffect(e,t,n){this.p=PropertyFactory.getProp(t,e.v,1,0,n)}function LayerIndexEffect(e,t,n){this.p=PropertyFactory.getProp(t,e.v,0,0,n)}function MaskIndexEffect(e,t,n){this.p=PropertyFactory.getProp(t,e.v,0,0,n)}function CheckboxEffect(e,t,n){this.p=PropertyFactory.getProp(t,e.v,0,0,n)}function NoValueEffect(){this.p={}}function EffectsManager(e,t){var n,r=e.ef||[];this.effectElements=[];var i,a=r.length;for(n=0;n<a;n+=1)i=new GroupEffect(r[n],t),this.effectElements.push(i)}function GroupEffect(e,t){this.init(e,t)}function BaseElement(){}function FrameElement(){}function _typeof$2(e){return _typeof$2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$2(e)}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(e,t){var n;this.data=e,this.effectElements=[],this.initDynamicPropertyContainer(t);var r,i=this.data.ef.length,a=this.data.ef;for(n=0;n<i;n+=1){switch(r=null,a[n].ty){case 0:r=new SliderEffect(a[n],t,this);break;case 1:r=new AngleEffect(a[n],t,this);break;case 2:r=new ColorEffect(a[n],t,this);break;case 3:r=new PointEffect(a[n],t,this);break;case 4:case 7:r=new CheckboxEffect(a[n],t,this);break;case 10:r=new LayerIndexEffect(a[n],t,this);break;case 11:r=new MaskIndexEffect(a[n],t,this);break;case 5:r=new EffectsManager(a[n],t,this);break;default:r=new NoValueEffect(a[n],t,this)}r&&this.effectElements.push(r)}},BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var e=0,t=this.data.masksProperties.length;e<t;){if("n"!==this.data.masksProperties[e].mode&&!1!==this.data.masksProperties[e].cl)return!0;e+=1}return!1},initExpressions:function(){this.layerInterface=LayerExpressionInterface(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var e=EffectsExpressionInterface.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(e),0===this.data.ty||this.data.xt?this.compInterface=CompExpressionInterface(this):4===this.data.ty?(this.layerInterface.shapeInterface=ShapeExpressionInterface(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):5===this.data.ty&&(this.layerInterface.textInterface=TextExpressionInterface(this),this.layerInterface.text=this.layerInterface.textInterface)},setBlendMode:function(){var e=getBlendMode(this.data.bm);(this.baseElement||this.layerElement).style["mix-blend-mode"]=e},initBaseData:function(e,t,n){this.globalData=t,this.comp=n,this.data=e,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}},FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(e,t){var n,r=this.dynamicProperties.length;for(n=0;n<r;n+=1)(t||this._isParent&&"transform"===this.dynamicProperties[n].propType)&&(this.dynamicProperties[n].getValue(),this.dynamicProperties[n]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(e){-1===this.dynamicProperties.indexOf(e)&&this.dynamicProperties.push(e)}};var FootageInterface=(dataInterfaceFactory=function(e){function t(e){return"Outline"===e?t.outlineInterface():null}return t._name="Outline",t.outlineInterface=function(e){var t="",n=e.getFootageData();function r(e){if(n[e])return t=e,"object"===_typeof$2(n=n[e])?r:n;var i=e.indexOf(t);if(-1!==i){var a=parseInt(e.substr(i+t.length),10);return"object"===_typeof$2(n=n[a])?r:n}return""}return function(){return t="",n=e.getFootageData(),r}}(e),t},function(e){function t(e){return"Data"===e?t.dataInterface:null}return t._name="Data",t.dataInterface=dataInterfaceFactory(e),t}),dataInterfaceFactory;function FootageElement(e,t,n){this.initFrame(),this.initRenderable(),this.assetData=t.getAssetData(e.refId),this.footageData=t.imageLoader.getAsset(this.assetData),this.initBaseData(e,t,n)}function AudioElement(e,t,n){this.initFrame(),this.initRenderable(),this.assetData=t.getAssetData(e.refId),this.initBaseData(e,t,n),this._isPlaying=!1,this._canPlay=!1;var r=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(r),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,e.au&&e.au.lv?e.au.lv:{k:[100]},1,.01,this)}function BaseRenderer(){}function TransformElement(){}function MaskElement(e,t,n){this.data=e,this.element=t,this.globalData=n,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var r,i,a=this.globalData.defs,s=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(s),this.solidPath="";var o,l,c,u,h,f,p=this.masksProperties,d=0,m=[],g=createElementID(),y="clipPath",v="clip-path";for(r=0;r<s;r+=1)if(("a"!==p[r].mode&&"n"!==p[r].mode||p[r].inv||100!==p[r].o.k||p[r].o.x)&&(y="mask",v="mask"),"s"!==p[r].mode&&"i"!==p[r].mode||0!==d?c=null:((c=createNS("rect")).setAttribute("fill","#ffffff"),c.setAttribute("width",this.element.comp.data.w||0),c.setAttribute("height",this.element.comp.data.h||0),m.push(c)),i=createNS("path"),"n"===p[r].mode)this.viewData[r]={op:PropertyFactory.getProp(this.element,p[r].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,p[r],3),elem:i,lastPath:""},a.appendChild(i);else{var b;if(d+=1,i.setAttribute("fill","s"===p[r].mode?"#000000":"#ffffff"),i.setAttribute("clip-rule","nonzero"),0!==p[r].x.k?(y="mask",v="mask",f=PropertyFactory.getProp(this.element,p[r].x,0,null,this.element),b=createElementID(),(u=createNS("filter")).setAttribute("id",b),(h=createNS("feMorphology")).setAttribute("operator","erode"),h.setAttribute("in","SourceGraphic"),h.setAttribute("radius","0"),u.appendChild(h),a.appendChild(u),i.setAttribute("stroke","s"===p[r].mode?"#000000":"#ffffff")):(h=null,f=null),this.storedData[r]={elem:i,x:f,expan:h,lastPath:"",lastOperator:"",filterId:b,lastRadius:0},"i"===p[r].mode){l=m.length;var k=createNS("g");for(o=0;o<l;o+=1)k.appendChild(m[o]);var E=createNS("mask");E.setAttribute("mask-type","alpha"),E.setAttribute("id",g+"_"+d),E.appendChild(i),a.appendChild(E),k.setAttribute("mask","url("+getLocationHref()+"#"+g+"_"+d+")"),m.length=0,m.push(k)}else m.push(i);p[r].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[r]={elem:i,lastPath:"",op:PropertyFactory.getProp(this.element,p[r].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,p[r],3),invRect:c},this.viewData[r].prop.k||this.drawPath(p[r],this.viewData[r].prop.v,this.viewData[r])}for(this.maskElement=createNS(y),s=m.length,r=0;r<s;r+=1)this.maskElement.appendChild(m[r]);d>0&&(this.maskElement.setAttribute("id",g),this.element.maskedElement.setAttribute(v,"url("+getLocationHref()+"#"+g+")"),a.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){this.layerInterface=FootageInterface(this)},FootageElement.prototype.getFootageData=function(){return this.footageData},AudioElement.prototype.prepareFrame=function(e){if(this.prepareRenderableFrame(e,!0),this.prepareProperties(e,!0),this.tm._placeholder)this._currentTime=e/this.data.sr;else{var t=this.tm.v;this._currentTime=t}this._volume=this.lv.v[0];var n=this._volume*this._volumeMultiplier;this._previousVolume!==n&&(this._previousVolume=n,this.audio.volume(n))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(e){this.audio.rate(e)},AudioElement.prototype.volume=function(e){this._volumeMultiplier=e,this._previousVolume=e*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){},BaseRenderer.prototype.checkLayers=function(e){var t,n,r=this.layers.length;for(this.completeLayers=!0,t=r-1;t>=0;t-=1)this.elements[t]||(n=this.layers[t]).ip-n.st<=e-this.layers[t].st&&n.op-n.st>e-this.layers[t].st&&this.buildItem(t),this.completeLayers=!!this.elements[t]&&this.completeLayers;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(e){switch(e.ty){case 2:return this.createImage(e);case 0:return this.createComp(e);case 1:return this.createSolid(e);case 3:default:return this.createNull(e);case 4:return this.createShape(e);case 5:return this.createText(e);case 6:return this.createAudio(e);case 13:return this.createCamera(e);case 15:return this.createFootage(e)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(e){return new AudioElement(e,this.globalData,this)},BaseRenderer.prototype.createFootage=function(e){return new FootageElement(e,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var e,t=this.layers.length;for(e=0;e<t;e+=1)this.buildItem(e);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(e){var t;this.completeLayers=!1;var n,r=e.length,i=this.layers.length;for(t=0;t<r;t+=1)for(n=0;n<i;){if(this.layers[n].id===e[t].id){this.layers[n]=e[t];break}n+=1}},BaseRenderer.prototype.setProjectInterface=function(e){this.globalData.projectInterface=e},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(e,t,n){for(var r=this.elements,i=this.layers,a=0,s=i.length;a<s;)i[a].ind==t&&(r[a]&&!0!==r[a]?(n.push(r[a]),r[a].setAsParent(),void 0!==i[a].parent?this.buildElementParenting(e,i[a].parent,n):e.setHierarchy(n)):(this.buildItem(a),this.addPendingElement(e))),a+=1},BaseRenderer.prototype.addPendingElement=function(e){this.pendingElements.push(e)},BaseRenderer.prototype.searchExtraCompositions=function(e){var t,n=e.length;for(t=0;t<n;t+=1)if(e[t].xt){var r=this.createComp(e[t]);r.initExpressions(),this.globalData.projectInterface.registerComposition(r)}},BaseRenderer.prototype.getElementByPath=function(e){var t,n=e.shift();if("number"==typeof n)t=this.elements[n];else{var r,i=this.elements.length;for(r=0;r<i;r+=1)if(this.elements[r].data.nm===n){t=this.elements[r];break}}return 0===e.length?t:t.getElementByPath(e)},BaseRenderer.prototype.setupGlobalData=function(e,t){this.globalData.fontManager=new FontManager,this.globalData.fontManager.addChars(e.chars),this.globalData.fontManager.addFonts(e.fonts,t),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=e.fr,this.globalData.nm=e.nm,this.globalData.compSize={w:e.w,h:e.h}},TransformElement.prototype={initTransform:function(){this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_opMdf:!1,mat:new Matrix},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var e,t=this.finalTransform.mat,n=0,r=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;n<r;){if(this.hierarchy[n].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}n+=1}if(this.finalTransform._matMdf)for(e=this.finalTransform.mProp.v.props,t.cloneFromProps(e),n=0;n<r;n+=1)e=this.hierarchy[n].finalTransform.mProp.v.props,t.transform(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15])}},globalToLocal:function(e){var t=[];t.push(this.finalTransform);for(var n,r=!0,i=this.comp;r;)i.finalTransform?(i.data.hasMask&&t.splice(0,0,i.finalTransform),i=i.comp):r=!1;var a,s=t.length;for(n=0;n<s;n+=1)a=t[n].mat.applyToPointArray(0,0,0),e=[e[0]-a[0],e[1]-a[1],0];return e},mHelper:new Matrix},MaskElement.prototype.getMaskProperty=function(e){return this.viewData[e].prop},MaskElement.prototype.renderFrame=function(e){var t,n=this.element.finalTransform.mat,r=this.masksProperties.length;for(t=0;t<r;t+=1)if((this.viewData[t].prop._mdf||e)&&this.drawPath(this.masksProperties[t],this.viewData[t].prop.v,this.viewData[t]),(this.viewData[t].op._mdf||e)&&this.viewData[t].elem.setAttribute("fill-opacity",this.viewData[t].op.v),"n"!==this.masksProperties[t].mode&&(this.viewData[t].invRect&&(this.element.finalTransform.mProp._mdf||e)&&this.viewData[t].invRect.setAttribute("transform",n.getInverseMatrix().to2dCSS()),this.storedData[t].x&&(this.storedData[t].x._mdf||e))){var i=this.storedData[t].expan;this.storedData[t].x.v<0?("erode"!==this.storedData[t].lastOperator&&(this.storedData[t].lastOperator="erode",this.storedData[t].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[t].filterId+")")),i.setAttribute("radius",-this.storedData[t].x.v)):("dilate"!==this.storedData[t].lastOperator&&(this.storedData[t].lastOperator="dilate",this.storedData[t].elem.setAttribute("filter",null)),this.storedData[t].elem.setAttribute("stroke-width",2*this.storedData[t].x.v))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var e="M0,0 ";return e+=" h"+this.globalData.compSize.w,e+=" v"+this.globalData.compSize.h,(e+=" h-"+this.globalData.compSize.w)+" v-"+this.globalData.compSize.h+" "},MaskElement.prototype.drawPath=function(e,t,n){var r,i,a=" M"+t.v[0][0]+","+t.v[0][1];for(i=t._length,r=1;r<i;r+=1)a+=" C"+t.o[r-1][0]+","+t.o[r-1][1]+" "+t.i[r][0]+","+t.i[r][1]+" "+t.v[r][0]+","+t.v[r][1];if(t.c&&i>1&&(a+=" C"+t.o[r-1][0]+","+t.o[r-1][1]+" "+t.i[0][0]+","+t.i[0][1]+" "+t.v[0][0]+","+t.v[0][1]),n.lastPath!==a){var s="";n.elem&&(t.c&&(s=e.inv?this.solidPath+a:a),n.elem.setAttribute("d",s)),n.lastPath=a}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory={createFilter:function(e,t){var n=createNS("filter");return n.setAttribute("id",e),!0!==t&&(n.setAttribute("filterUnits","objectBoundingBox"),n.setAttribute("x","0%"),n.setAttribute("y","0%"),n.setAttribute("width","100%"),n.setAttribute("height","100%")),n},createAlphaToLuminanceFilter:function(){var e=createNS("feColorMatrix");return e.setAttribute("type","matrix"),e.setAttribute("color-interpolation-filters","sRGB"),e.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),e}},featureSupport=function(){var e={maskType:!0};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(e.maskType=!1),e}(),registeredEffects={},idPrefix="filter_result_";function SVGEffects(e){var t,n,r="SourceGraphic",i=e.data.ef?e.data.ef.length:0,a=createElementID(),s=filtersFactory.createFilter(a,!0),o=0;for(this.filters=[],t=0;t<i;t+=1){n=null;var l=e.data.ef[t].ty;registeredEffects[l]&&(n=new(0,registeredEffects[l].effect)(s,e.effectsManager.effectElements[t],e,idPrefix+o,r),r=idPrefix+o,registeredEffects[l].countsAsEffect&&(o+=1)),n&&this.filters.push(n)}o&&(e.globalData.defs.appendChild(s),e.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+a+")")),this.filters.length&&e.addRenderableComponent(this)}function registerEffect(e,t,n){registeredEffects[e]={effect:t,countsAsEffect:n}}function SVGBaseElement(){}function HierarchyElement(){}function RenderableDOMElement(){}function IImageElement(e,t,n){this.assetData=t.getAssetData(e.refId),this.initElement(e,t,n),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}function ProcessedElement(e,t){this.elem=e,this.pos=t}function IShapeElement(){}SVGEffects.prototype.renderFrame=function(e){var t,n=this.filters.length;for(t=0;t<n;t+=1)this.filters[t].renderFrame(e)},SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var e,t,n,r=null;if(this.data.td){if(3==this.data.td||1==this.data.td){var i=createNS("mask");i.setAttribute("id",this.layerId),i.setAttribute("mask-type",3==this.data.td?"luminance":"alpha"),i.appendChild(this.layerElement),r=i,this.globalData.defs.appendChild(i),featureSupport.maskType||1!=this.data.td||(i.setAttribute("mask-type","luminance"),e=createElementID(),t=filtersFactory.createFilter(e),this.globalData.defs.appendChild(t),t.appendChild(filtersFactory.createAlphaToLuminanceFilter()),(n=createNS("g")).appendChild(this.layerElement),r=n,i.appendChild(n),n.setAttribute("filter","url("+getLocationHref()+"#"+e+")"))}else if(2==this.data.td){var a=createNS("mask");a.setAttribute("id",this.layerId),a.setAttribute("mask-type","alpha");var s=createNS("g");a.appendChild(s),e=createElementID(),t=filtersFactory.createFilter(e);var o=createNS("feComponentTransfer");o.setAttribute("in","SourceGraphic"),t.appendChild(o);var l=createNS("feFuncA");l.setAttribute("type","table"),l.setAttribute("tableValues","1.0 0.0"),o.appendChild(l),this.globalData.defs.appendChild(t);var c=createNS("rect");c.setAttribute("width",this.comp.data.w),c.setAttribute("height",this.comp.data.h),c.setAttribute("x","0"),c.setAttribute("y","0"),c.setAttribute("fill","#ffffff"),c.setAttribute("opacity","0"),s.setAttribute("filter","url("+getLocationHref()+"#"+e+")"),s.appendChild(c),s.appendChild(this.layerElement),r=s,featureSupport.maskType||(a.setAttribute("mask-type","luminance"),t.appendChild(filtersFactory.createAlphaToLuminanceFilter()),n=createNS("g"),s.appendChild(c),n.appendChild(this.layerElement),r=n,s.appendChild(n)),this.globalData.defs.appendChild(a)}}else this.data.tt?(this.matteElement.appendChild(this.layerElement),r=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0===this.data.ty&&!this.data.hd){var u=createNS("clipPath"),h=createNS("path");h.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var f=createElementID();if(u.setAttribute("id",f),u.appendChild(h),this.globalData.defs.appendChild(u),this.checkMasks()){var p=createNS("g");p.setAttribute("clip-path","url("+getLocationHref()+"#"+f+")"),p.appendChild(this.layerElement),this.transformedElement=p,r?r.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+f+")")}0!==this.data.bm&&this.setBlendMode()},renderElement:function(){this.finalTransform._matMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.mat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.mProp.o.v)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this)},setMatte:function(e){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+e+")")}},HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(e){this.hierarchy=e},setAsParent:function(){this._isParent=!0},checkParenting:function(){void 0!==this.data.parent&&this.comp.buildElementParenting(this,this.data.parent,[])}},extendPrototype([RenderableElement,createProxyFunction({initElement:function(e,t,n){this.initFrame(),this.initBaseData(e,t,n),this.initTransform(e,t,n),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){this.hidden||this.isInRange&&!this.isTransparent||((this.baseElement||this.layerElement).style.display="none",this.hidden=!0)},show:function(){this.isInRange&&!this.isTransparent&&(this.data.hd||((this.baseElement||this.layerElement).style.display="block"),this.hidden=!1,this._isFirstFrame=!0)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(e){this._mdf=!1,this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}})],RenderableDOMElement),extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var e=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",e),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect},IShapeElement.prototype={addShapeToModifiers:function(e){var t,n=this.shapeModifiers.length;for(t=0;t<n;t+=1)this.shapeModifiers[t].addShape(e)},isShapeInAnimatedModifiers:function(e){for(var t=this.shapeModifiers.length;0<t;)if(this.shapeModifiers[0].isAnimatedWithShape(e))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var e,t=this.shapes.length;for(e=0;e<t;e+=1)this.shapes[e].sh.reset();for(e=(t=this.shapeModifiers.length)-1;e>=0&&!this.shapeModifiers[e].processShapes(this._isFirstFrame);e-=1);}},searchProcessedElement:function(e){for(var t=this.processedElements,n=0,r=t.length;n<r;){if(t[n].elem===e)return t[n].pos;n+=1}return 0},addProcessedElement:function(e,t){for(var n=this.processedElements,r=n.length;r;)if(n[r-=1].elem===e)return void(n[r].pos=t);n.push(new ProcessedElement(e,t))},prepareFrame:function(e){this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(e,t,n){this.caches=[],this.styles=[],this.transformers=e,this.lStr="",this.sh=n,this.lvl=t,this._isAnimated=!!n.k;for(var r=0,i=e.length;r<i;){if(e[r].mProps.dynamicProperties.length){this._isAnimated=!0;break}r+=1}}function SVGStyleData(e,t){this.data=e,this.type=e.ty,this.d="",this.lvl=t,this._mdf=!1,this.closed=!0===e.hd,this.pElem=createNS("path"),this.msElem=null}function DashProperty(e,t,n,r){var i;this.elem=e,this.frameId=-1,this.dataProps=createSizedArray(t.length),this.renderer=n,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",t.length?t.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(r);var a,s=t.length||0;for(i=0;i<s;i+=1)a=PropertyFactory.getProp(e,t[i].v,0,0,this),this.k=a.k||this.k,this.dataProps[i]={n:t[i].n,p:a};this.k||this.getValue(!0),this._isAnimated=this.k}function SVGStrokeStyleData(e,t,n){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(e,t.o,0,.01,this),this.w=PropertyFactory.getProp(e,t.w,0,null,this),this.d=new DashProperty(e,t.d||{},"svg",this),this.c=PropertyFactory.getProp(e,t.c,1,255,this),this.style=n,this._isAnimated=!!this._isAnimated}function SVGFillStyleData(e,t,n){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(e,t.o,0,.01,this),this.c=PropertyFactory.getProp(e,t.c,1,255,this),this.style=n}function SVGNoStyleData(e,t,n){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.style=n}function GradientProperty(e,t,n){this.data=t,this.c=createTypedArray("uint8c",4*t.p);var r=t.k.k[0].s?t.k.k[0].s.length-4*t.p:t.k.k.length-4*t.p;this.o=createTypedArray("float32",r),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=r,this.initDynamicPropertyContainer(n),this.prop=PropertyFactory.getProp(e,t.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}function SVGGradientFillStyleData(e,t,n){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.initGradientData(e,t,n)}function SVGGradientStrokeStyleData(e,t,n){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(e,t.w,0,null,this),this.d=new DashProperty(e,t.d||{},"svg",this),this.initGradientData(e,t,n),this._isAnimated=!!this._isAnimated}function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(e,t,n){this.transform={mProps:e,op:t,container:n},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0},SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1},DashProperty.prototype.getValue=function(e){if((this.elem.globalData.frameId!==this.frameId||e)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||e,this._mdf)){var t=0,n=this.dataProps.length;for("svg"===this.renderer&&(this.dashStr=""),t=0;t<n;t+=1)"o"!==this.dataProps[t].n?"svg"===this.renderer?this.dashStr+=" "+this.dataProps[t].p.v:this.dashArray[t]=this.dataProps[t].p.v:this.dashoffset[0]=this.dataProps[t].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty),extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData),extendPrototype([DynamicPropertyContainer],SVGFillStyleData),extendPrototype([DynamicPropertyContainer],SVGNoStyleData),GradientProperty.prototype.comparePoints=function(e,t){for(var n=0,r=this.o.length/2;n<r;){if(Math.abs(e[4*n]-e[4*t+2*n])>.01)return!1;n+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!=this.c.length/4)return!1;if(this.data.k.k[0].s)for(var e=0,t=this.data.k.k.length;e<t;){if(!this.comparePoints(this.data.k.k[e].s,this.data.p))return!1;e+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(e){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||e){var t,n,r,i=4*this.data.p;for(t=0;t<i;t+=1)n=t%4==0?100:255,r=Math.round(this.prop.v[t]*n),this.c[t]!==r&&(this.c[t]=r,this._cmdf=!e);if(this.o.length)for(i=this.prop.v.length,t=4*this.data.p;t<i;t+=1)n=t%2==0?100:1,r=t%2==0?Math.round(100*this.prop.v[t]):this.prop.v[t],this.o[t-4*this.data.p]!==r&&(this.o[t-4*this.data.p]=r,this._omdf=!e);this._mdf=!e}},extendPrototype([DynamicPropertyContainer],GradientProperty),SVGGradientFillStyleData.prototype.initGradientData=function(e,t,n){this.o=PropertyFactory.getProp(e,t.o,0,.01,this),this.s=PropertyFactory.getProp(e,t.s,1,null,this),this.e=PropertyFactory.getProp(e,t.e,1,null,this),this.h=PropertyFactory.getProp(e,t.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(e,t.a||{k:0},0,degToRads,this),this.g=new GradientProperty(e,t.g,this),this.style=n,this.stops=[],this.setGradientData(n.pElem,t),this.setGradientOpacity(t,n),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(e,t){var n=createElementID(),r=createNS(1===t.t?"linearGradient":"radialGradient");r.setAttribute("id",n),r.setAttribute("spreadMethod","pad"),r.setAttribute("gradientUnits","userSpaceOnUse");var i,a,s,o=[];for(s=4*t.g.p,a=0;a<s;a+=4)i=createNS("stop"),r.appendChild(i),o.push(i);e.setAttribute("gf"===t.ty?"fill":"stroke","url("+getLocationHref()+"#"+n+")"),this.gf=r,this.cst=o},SVGGradientFillStyleData.prototype.setGradientOpacity=function(e,t){if(this.g._hasOpacity&&!this.g._collapsable){var n,r,i,a=createNS("mask"),s=createNS("path");a.appendChild(s);var o=createElementID(),l=createElementID();a.setAttribute("id",l);var c=createNS(1===e.t?"linearGradient":"radialGradient");c.setAttribute("id",o),c.setAttribute("spreadMethod","pad"),c.setAttribute("gradientUnits","userSpaceOnUse"),i=e.g.k.k[0].s?e.g.k.k[0].s.length:e.g.k.k.length;var u=this.stops;for(r=4*e.g.p;r<i;r+=2)(n=createNS("stop")).setAttribute("stop-color","rgb(255,255,255)"),c.appendChild(n),u.push(n);s.setAttribute("gf"===e.ty?"fill":"stroke","url("+getLocationHref()+"#"+o+")"),"gs"===e.ty&&(s.setAttribute("stroke-linecap",lineCapEnum[e.lc||2]),s.setAttribute("stroke-linejoin",lineJoinEnum[e.lj||2]),1===e.lj&&s.setAttribute("stroke-miterlimit",e.ml)),this.of=c,this.ms=a,this.ost=u,this.maskId=l,t.msElem=s}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData),extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);var buildShapeString=function(e,t,n,r){if(0===t)return"";var i,a=e.o,s=e.i,o=e.v,l=" M"+r.applyToPointStringified(o[0][0],o[0][1]);for(i=1;i<t;i+=1)l+=" C"+r.applyToPointStringified(a[i-1][0],a[i-1][1])+" "+r.applyToPointStringified(s[i][0],s[i][1])+" "+r.applyToPointStringified(o[i][0],o[i][1]);return n&&t&&(l+=" C"+r.applyToPointStringified(a[i-1][0],a[i-1][1])+" "+r.applyToPointStringified(s[0][0],s[0][1])+" "+r.applyToPointStringified(o[0][0],o[0][1]),l+="z"),l},SVGElementsRenderer=function(){var e=new Matrix,t=new Matrix;function n(e,t,n){(n||t.transform.op._mdf)&&t.transform.container.setAttribute("opacity",t.transform.op.v),(n||t.transform.mProps._mdf)&&t.transform.container.setAttribute("transform",t.transform.mProps.v.to2dCSS())}function r(){}function i(n,r,i){var a,s,o,l,c,u,h,f,p,d,m,g=r.styles.length,y=r.lvl;for(u=0;u<g;u+=1){if(l=r.sh._mdf||i,r.styles[u].lvl<y){for(f=t.reset(),d=y-r.styles[u].lvl,m=r.transformers.length-1;!l&&d>0;)l=r.transformers[m].mProps._mdf||l,d-=1,m-=1;if(l)for(d=y-r.styles[u].lvl,m=r.transformers.length-1;d>0;)p=r.transformers[m].mProps.v.props,f.transform(p[0],p[1],p[2],p[3],p[4],p[5],p[6],p[7],p[8],p[9],p[10],p[11],p[12],p[13],p[14],p[15]),d-=1,m-=1}else f=e;if(s=(h=r.sh.paths)._length,l){for(o="",a=0;a<s;a+=1)(c=h.shapes[a])&&c._length&&(o+=buildShapeString(c,c._length,c.c,f));r.caches[u]=o}else o=r.caches[u];r.styles[u].d+=!0===n.hd?"":o,r.styles[u]._mdf=l||r.styles[u]._mdf}}function a(e,t,n){var r=t.style;(t.c._mdf||n)&&r.pElem.setAttribute("fill","rgb("+bmFloor(t.c.v[0])+","+bmFloor(t.c.v[1])+","+bmFloor(t.c.v[2])+")"),(t.o._mdf||n)&&r.pElem.setAttribute("fill-opacity",t.o.v)}function s(e,t,n){o(e,t,n),l(0,t,n)}function o(e,t,n){var r,i,a,s,o,l=t.gf,c=t.g._hasOpacity,u=t.s.v,h=t.e.v;if(t.o._mdf||n){var f="gf"===e.ty?"fill-opacity":"stroke-opacity";t.style.pElem.setAttribute(f,t.o.v)}if(t.s._mdf||n){var p=1===e.t?"x1":"cx",d="x1"===p?"y1":"cy";l.setAttribute(p,u[0]),l.setAttribute(d,u[1]),c&&!t.g._collapsable&&(t.of.setAttribute(p,u[0]),t.of.setAttribute(d,u[1]))}if(t.g._cmdf||n){r=t.cst;var m=t.g.c;for(a=r.length,i=0;i<a;i+=1)(s=r[i]).setAttribute("offset",m[4*i]+"%"),s.setAttribute("stop-color","rgb("+m[4*i+1]+","+m[4*i+2]+","+m[4*i+3]+")")}if(c&&(t.g._omdf||n)){var g=t.g.o;for(a=(r=t.g._collapsable?t.cst:t.ost).length,i=0;i<a;i+=1)s=r[i],t.g._collapsable||s.setAttribute("offset",g[2*i]+"%"),s.setAttribute("stop-opacity",g[2*i+1])}if(1===e.t)(t.e._mdf||n)&&(l.setAttribute("x2",h[0]),l.setAttribute("y2",h[1]),c&&!t.g._collapsable&&(t.of.setAttribute("x2",h[0]),t.of.setAttribute("y2",h[1])));else if((t.s._mdf||t.e._mdf||n)&&(o=Math.sqrt(Math.pow(u[0]-h[0],2)+Math.pow(u[1]-h[1],2)),l.setAttribute("r",o),c&&!t.g._collapsable&&t.of.setAttribute("r",o)),t.e._mdf||t.h._mdf||t.a._mdf||n){o||(o=Math.sqrt(Math.pow(u[0]-h[0],2)+Math.pow(u[1]-h[1],2)));var y=Math.atan2(h[1]-u[1],h[0]-u[0]),v=t.h.v;v>=1?v=.99:v<=-1&&(v=-.99);var b=o*v,k=Math.cos(y+t.a.v)*b+u[0],E=Math.sin(y+t.a.v)*b+u[1];l.setAttribute("fx",k),l.setAttribute("fy",E),c&&!t.g._collapsable&&(t.of.setAttribute("fx",k),t.of.setAttribute("fy",E))}}function l(e,t,n){var r=t.style,i=t.d;i&&(i._mdf||n)&&i.dashStr&&(r.pElem.setAttribute("stroke-dasharray",i.dashStr),r.pElem.setAttribute("stroke-dashoffset",i.dashoffset[0])),t.c&&(t.c._mdf||n)&&r.pElem.setAttribute("stroke","rgb("+bmFloor(t.c.v[0])+","+bmFloor(t.c.v[1])+","+bmFloor(t.c.v[2])+")"),(t.o._mdf||n)&&r.pElem.setAttribute("stroke-opacity",t.o.v),(t.w._mdf||n)&&(r.pElem.setAttribute("stroke-width",t.w.v),r.msElem&&r.msElem.setAttribute("stroke-width",t.w.v))}return{createRenderFunction:function(e){switch(e.ty){case"fl":return a;case"gf":return o;case"gs":return s;case"st":return l;case"sh":case"el":case"rc":case"sr":return i;case"tr":return n;case"no":return r;default:return null}}}}();function SVGShapeElement(e,t,n){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(e,t,n),this.prevViewData=[]}function LetterProps(e,t,n,r,i,a){this.o=e,this.sw=t,this.sc=n,this.fc=r,this.m=i,this.p=a,this._mdf={o:!0,sw:!!t,sc:!!n,fc:!!r,m:!0,p:!0}}function TextProperty(e,t){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,this.data=t,this.elem=e,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var e,t,n,r,i=this.shapes.length,a=this.stylesList.length,s=[],o=!1;for(n=0;n<a;n+=1){for(r=this.stylesList[n],o=!1,s.length=0,e=0;e<i;e+=1)-1!==(t=this.shapes[e]).styles.indexOf(r)&&(s.push(t),o=t._isAnimated||o);s.length>1&&o&&this.setShapesAsAnimated(s)}},SVGShapeElement.prototype.setShapesAsAnimated=function(e){var t,n=e.length;for(t=0;t<n;t+=1)e[t].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(e,t){var n,r=new SVGStyleData(e,t),i=r.pElem;return"st"===e.ty?n=new SVGStrokeStyleData(this,e,r):"fl"===e.ty?n=new SVGFillStyleData(this,e,r):"gf"===e.ty||"gs"===e.ty?(n=new("gf"===e.ty?SVGGradientFillStyleData:SVGGradientStrokeStyleData)(this,e,r),this.globalData.defs.appendChild(n.gf),n.maskId&&(this.globalData.defs.appendChild(n.ms),this.globalData.defs.appendChild(n.of),i.setAttribute("mask","url("+getLocationHref()+"#"+n.maskId+")"))):"no"===e.ty&&(n=new SVGNoStyleData(this,e,r)),"st"!==e.ty&&"gs"!==e.ty||(i.setAttribute("stroke-linecap",lineCapEnum[e.lc||2]),i.setAttribute("stroke-linejoin",lineJoinEnum[e.lj||2]),i.setAttribute("fill-opacity","0"),1===e.lj&&i.setAttribute("stroke-miterlimit",e.ml)),2===e.r&&i.setAttribute("fill-rule","evenodd"),e.ln&&i.setAttribute("id",e.ln),e.cl&&i.setAttribute("class",e.cl),e.bm&&(i.style["mix-blend-mode"]=getBlendMode(e.bm)),this.stylesList.push(r),this.addToAnimatedContents(e,n),n},SVGShapeElement.prototype.createGroupElement=function(e){var t=new ShapeGroupData;return e.ln&&t.gr.setAttribute("id",e.ln),e.cl&&t.gr.setAttribute("class",e.cl),e.bm&&(t.gr.style["mix-blend-mode"]=getBlendMode(e.bm)),t},SVGShapeElement.prototype.createTransformElement=function(e,t){var n=TransformPropertyFactory.getTransformProperty(this,e,this),r=new SVGTransformData(n,n.o,t);return this.addToAnimatedContents(e,r),r},SVGShapeElement.prototype.createShapeElement=function(e,t,n){var r=4;"rc"===e.ty?r=5:"el"===e.ty?r=6:"sr"===e.ty&&(r=7);var i=new SVGShapeData(t,n,ShapePropertyFactory.getShapeProp(this,e,r,this));return this.shapes.push(i),this.addShapeToModifiers(i),this.addToAnimatedContents(e,i),i},SVGShapeElement.prototype.addToAnimatedContents=function(e,t){for(var n=0,r=this.animatedContents.length;n<r;){if(this.animatedContents[n].element===t)return;n+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(e),element:t,data:e})},SVGShapeElement.prototype.setElementStyles=function(e){var t,n=e.styles,r=this.stylesList.length;for(t=0;t<r;t+=1)this.stylesList[t].closed||n.push(this.stylesList[t])},SVGShapeElement.prototype.reloadShapes=function(){var e;this._isFirstFrame=!0;var t=this.itemsData.length;for(e=0;e<t;e+=1)this.prevViewData[e]=this.itemsData[e];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),t=this.dynamicProperties.length,e=0;e<t;e+=1)this.dynamicProperties[e].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(e,t,n,r,i,a,s){var o,l,c,u,h,f,p=[].concat(a),d=e.length-1,m=[],g=[];for(o=d;o>=0;o-=1){if((f=this.searchProcessedElement(e[o]))?t[o]=n[f-1]:e[o]._render=s,"fl"===e[o].ty||"st"===e[o].ty||"gf"===e[o].ty||"gs"===e[o].ty||"no"===e[o].ty)f?t[o].style.closed=!1:t[o]=this.createStyleElement(e[o],i),e[o]._render&&t[o].style.pElem.parentNode!==r&&r.appendChild(t[o].style.pElem),m.push(t[o].style);else if("gr"===e[o].ty){if(f)for(c=t[o].it.length,l=0;l<c;l+=1)t[o].prevViewData[l]=t[o].it[l];else t[o]=this.createGroupElement(e[o]);this.searchShapes(e[o].it,t[o].it,t[o].prevViewData,t[o].gr,i+1,p,s),e[o]._render&&t[o].gr.parentNode!==r&&r.appendChild(t[o].gr)}else"tr"===e[o].ty?(f||(t[o]=this.createTransformElement(e[o],r)),u=t[o].transform,p.push(u)):"sh"===e[o].ty||"rc"===e[o].ty||"el"===e[o].ty||"sr"===e[o].ty?(f||(t[o]=this.createShapeElement(e[o],p,i)),this.setElementStyles(t[o])):"tm"===e[o].ty||"rd"===e[o].ty||"ms"===e[o].ty||"pb"===e[o].ty?(f?(h=t[o]).closed=!1:((h=ShapeModifiers.getModifier(e[o].ty)).init(this,e[o]),t[o]=h,this.shapeModifiers.push(h)),g.push(h)):"rp"===e[o].ty&&(f?(h=t[o]).closed=!0:(h=ShapeModifiers.getModifier(e[o].ty),t[o]=h,h.init(this,e,o,t),this.shapeModifiers.push(h),s=!1),g.push(h));this.addProcessedElement(e[o],o+1)}for(d=m.length,o=0;o<d;o+=1)m[o].closed=!0;for(d=g.length,o=0;o<d;o+=1)g[o].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){var e;this.renderModifiers();var t=this.stylesList.length;for(e=0;e<t;e+=1)this.stylesList[e].reset();for(this.renderShape(),e=0;e<t;e+=1)(this.stylesList[e]._mdf||this._isFirstFrame)&&(this.stylesList[e].msElem&&(this.stylesList[e].msElem.setAttribute("d",this.stylesList[e].d),this.stylesList[e].d="M0 0"+this.stylesList[e].d),this.stylesList[e].pElem.setAttribute("d",this.stylesList[e].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var e,t,n=this.animatedContents.length;for(e=0;e<n;e+=1)t=this.animatedContents[e],(this._isFirstFrame||t.element._isAnimated)&&!0!==t.data&&t.fn(t.data,t.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null},LetterProps.prototype.update=function(e,t,n,r,i,a){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var s=!1;return this.o!==e&&(this.o=e,this._mdf.o=!0,s=!0),this.sw!==t&&(this.sw=t,this._mdf.sw=!0,s=!0),this.sc!==n&&(this.sc=n,this._mdf.sc=!0,s=!0),this.fc!==r&&(this.fc=r,this._mdf.fc=!0,s=!0),this.m!==i&&(this.m=i,this._mdf.m=!0,s=!0),!a.length||this.p[0]===a[0]&&this.p[1]===a[1]&&this.p[4]===a[4]&&this.p[5]===a[5]&&this.p[12]===a[12]&&this.p[13]===a[13]||(this.p=a,this._mdf.p=!0,s=!0),s},TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},TextProperty.prototype.setCurrentData=function(e){e.__complete||this.completeTextData(e),this.currentData=e,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(e){this.effectsSequence.push(e),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(e){if(this.elem.globalData.frameId!==this.frameId&&this.effectsSequence.length||e){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var t=this.currentData,n=this.keysIndex;if(this.lock)this.setCurrentData(this.currentData);else{var r;this.lock=!0,this._mdf=!1;var i=this.effectsSequence.length,a=e||this.data.d.k[this.keysIndex].s;for(r=0;r<i;r+=1)a=n!==this.keysIndex?this.effectsSequence[r](a,a.t):this.effectsSequence[r](this.currentData,a.t);t!==a&&this.setCurrentData(a),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}}},TextProperty.prototype.getKeyframeValue=function(){for(var e=this.data.d.k,t=this.elem.comp.renderedFrame,n=0,r=e.length;n<=r-1&&!(n===r-1||e[n+1].t>t);)n+=1;return this.keysIndex!==n&&(this.keysIndex=n),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(e){for(var t,n,r=[],i=0,a=e.length,s=!1;i<a;)t=e.charCodeAt(i),FontManager.isCombinedCharacter(t)?r[r.length-1]+=e.charAt(i):t>=55296&&t<=56319?(n=e.charCodeAt(i+1))>=56320&&n<=57343?(s||FontManager.isModifier(t,n)?(r[r.length-1]+=e.substr(i,2),s=!1):r.push(e.substr(i,2)),i+=1):r.push(e.charAt(i)):t>56319?(n=e.charCodeAt(i+1),FontManager.isZeroWidthJoiner(t,n)?(s=!0,r[r.length-1]+=e.substr(i,2),i+=1):r.push(e.charAt(i))):FontManager.isZeroWidthJoiner(t)?(r[r.length-1]+=e.charAt(i),s=!0):r.push(e.charAt(i)),i+=1;return r},TextProperty.prototype.completeTextData=function(e){e.__complete=!0;var t,n,r,i,a,s,o,l=this.elem.globalData.fontManager,c=this.data,u=[],h=0,f=c.m.g,p=0,d=0,m=0,g=[],y=0,v=0,b=l.getFontByName(e.f),k=0,E=getFontProperties(b);e.fWeight=E.weight,e.fStyle=E.style,e.finalSize=e.s,e.finalText=this.buildFinalText(e.t),n=e.finalText.length,e.finalLineHeight=e.lh;var x,w=e.tr/1e3*e.finalSize;if(e.sz)for(var S,C,P=!0,_=e.sz[0],T=e.sz[1];P;){S=0,y=0,n=(C=this.buildFinalText(e.t)).length,w=e.tr/1e3*e.finalSize;var A=-1;for(t=0;t<n;t+=1)x=C[t].charCodeAt(0),r=!1," "===C[t]?A=t:13!==x&&3!==x||(y=0,r=!0,S+=e.finalLineHeight||1.2*e.finalSize),l.chars?(o=l.getCharData(C[t],b.fStyle,b.fFamily),k=r?0:o.w*e.finalSize/100):k=l.measureText(C[t],e.f,e.finalSize),y+k>_&&" "!==C[t]?(-1===A?n+=1:t=A,S+=e.finalLineHeight||1.2*e.finalSize,C.splice(t,A===t?1:0,"\r"),A=-1,y=0):(y+=k,y+=w);S+=b.ascent*e.finalSize/100,this.canResize&&e.finalSize>this.minimumFontSize&&T<S?(e.finalSize-=1,e.finalLineHeight=e.finalSize*e.lh/e.s):(e.finalText=C,n=e.finalText.length,P=!1)}y=-w,k=0;var F,M=0;for(t=0;t<n;t+=1)if(r=!1,13===(x=(F=e.finalText[t]).charCodeAt(0))||3===x?(M=0,g.push(y),v=y>v?y:v,y=-2*w,i="",r=!0,m+=1):i=F,l.chars?(o=l.getCharData(F,b.fStyle,l.getFontByName(e.f).fFamily),k=r?0:o.w*e.finalSize/100):k=l.measureText(i,e.f,e.finalSize)," "===F?M+=k+w:(y+=k+w+M,M=0),u.push({l:k,an:k,add:p,n:r,anIndexes:[],val:i,line:m,animatorJustifyOffset:0}),2==f){if(p+=k,""===i||" "===i||t===n-1){for(""!==i&&" "!==i||(p-=k);d<=t;)u[d].an=p,u[d].ind=h,u[d].extra=k,d+=1;h+=1,p=0}}else if(3==f){if(p+=k,""===i||t===n-1){for(""===i&&(p-=k);d<=t;)u[d].an=p,u[d].ind=h,u[d].extra=k,d+=1;p=0,h+=1}}else u[h].ind=h,u[h].extra=0,h+=1;if(e.l=u,v=y>v?y:v,g.push(y),e.sz)e.boxWidth=e.sz[0],e.justifyOffset=0;else switch(e.boxWidth=v,e.j){case 1:e.justifyOffset=-e.boxWidth;break;case 2:e.justifyOffset=-e.boxWidth/2;break;default:e.justifyOffset=0}e.lineWidths=g;var D,I,R,N,L=c.a;s=L.length;var O=[];for(a=0;a<s;a+=1){for((D=L[a]).a.sc&&(e.strokeColorAnim=!0),D.a.sw&&(e.strokeWidthAnim=!0),(D.a.fc||D.a.fh||D.a.fs||D.a.fb)&&(e.fillColorAnim=!0),N=0,R=D.s.b,t=0;t<n;t+=1)(I=u[t]).anIndexes[a]=N,(1==R&&""!==I.val||2==R&&""!==I.val&&" "!==I.val||3==R&&(I.n||" "==I.val||t==n-1)||4==R&&(I.n||t==n-1))&&(1===D.s.rn&&O.push(N),N+=1);c.a[a].s.totalChars=N;var z,V=-1;if(1===D.s.rn)for(t=0;t<n;t+=1)V!=(I=u[t]).anIndexes[a]&&(V=I.anIndexes[a],z=O.splice(Math.floor(Math.random()*O.length),1)[0]),I.anIndexes[a]=z}e.yOffset=e.finalLineHeight||1.2*e.finalSize,e.ls=e.ls||0,e.ascent=b.ascent*e.finalSize/100},TextProperty.prototype.updateDocumentData=function(e,t){t=void 0===t?this.keysIndex:t;var n=this.copyData({},this.data.d.k[t].s);n=this.copyData(n,e),this.data.d.k[t].s=n,this.recalculate(t),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(e){var t=this.data.d.k[e].s;t.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(t)},TextProperty.prototype.canResizeFont=function(e){this.canResize=e,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(e){this.minimumFontSize=Math.floor(e)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var e=Math.max,t=Math.min,n=Math.floor;function r(e,t){this._currentTextLength=-1,this.k=!1,this.data=t,this.elem=e,this.comp=e.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(e),this.s=PropertyFactory.getProp(e,t.s||{k:0},0,0,this),this.e="e"in t?PropertyFactory.getProp(e,t.e,0,0,this):{v:100},this.o=PropertyFactory.getProp(e,t.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(e,t.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(e,t.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(e,t.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(e,t.a,0,.01,this),this.dynamicProperties.length||this.getValue()}return r.prototype={getMult:function(r){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var i=0,a=0,s=1,o=1;this.ne.v>0?i=this.ne.v/100:a=-this.ne.v/100,this.xe.v>0?s=1-this.xe.v/100:o=1+this.xe.v/100;var l=BezierFactory.getBezierEasing(i,a,s,o).get,c=0,u=this.finalS,h=this.finalE,f=this.data.sh;if(2===f)c=l(c=h===u?r>=h?1:0:e(0,t(.5/(h-u)+(r-u)/(h-u),1)));else if(3===f)c=l(c=h===u?r>=h?0:1:1-e(0,t(.5/(h-u)+(r-u)/(h-u),1)));else if(4===f)h===u?c=0:(c=e(0,t(.5/(h-u)+(r-u)/(h-u),1)))<.5?c*=2:c=1-2*(c-.5),c=l(c);else if(5===f){if(h===u)c=0;else{var p=h-u,d=-p/2+(r=t(e(0,r+.5-u),h-u)),m=p/2;c=Math.sqrt(1-d*d/(m*m))}c=l(c)}else 6===f?(h===u?c=0:(r=t(e(0,r+.5-u),h-u),c=(1+Math.cos(Math.PI+2*Math.PI*r/(h-u)))/2),c=l(c)):(r>=n(u)&&(c=e(0,t(r-u<0?t(h,1)-(u-r):h-r,1))),c=l(c));if(100!==this.sm.v){var g=.01*this.sm.v;0===g&&(g=1e-8);var y=.5-.5*g;c<y?c=0:(c=(c-y)/g)>1&&(c=1)}return c*this.a.v},getValue:function(e){this.iterateDynamicProperties(),this._mdf=e||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,e&&2===this.data.r&&(this.e.v=this._currentTextLength);var t=2===this.data.r?1:100/this.data.totalChars,n=this.o.v/t,r=this.s.v/t+n,i=this.e.v/t+n;if(r>i){var a=r;r=i,i=a}this.finalS=r,this.finalE=i}},extendPrototype([DynamicPropertyContainer],r),{getTextSelectorProp:function(e,t,n){return new r(e,t,n)}}}();function TextAnimatorDataProperty(e,t,n){var r={propType:!1},i=PropertyFactory.getProp,a=t.a;this.a={r:a.r?i(e,a.r,0,degToRads,n):r,rx:a.rx?i(e,a.rx,0,degToRads,n):r,ry:a.ry?i(e,a.ry,0,degToRads,n):r,sk:a.sk?i(e,a.sk,0,degToRads,n):r,sa:a.sa?i(e,a.sa,0,degToRads,n):r,s:a.s?i(e,a.s,1,.01,n):r,a:a.a?i(e,a.a,1,0,n):r,o:a.o?i(e,a.o,0,.01,n):r,p:a.p?i(e,a.p,1,0,n):r,sw:a.sw?i(e,a.sw,0,0,n):r,sc:a.sc?i(e,a.sc,1,0,n):r,fc:a.fc?i(e,a.fc,1,0,n):r,fh:a.fh?i(e,a.fh,0,0,n):r,fs:a.fs?i(e,a.fs,0,.01,n):r,fb:a.fb?i(e,a.fb,0,.01,n):r,t:a.t?i(e,a.t,0,0,n):r},this.s=TextSelectorProp.getTextSelectorProp(e,t.s,n),this.s.t=t.s.t}function TextAnimatorProperty(e,t,n){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=e,this._renderType=t,this._elem=n,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(n)}function ITextElement(){}TextAnimatorProperty.prototype.searchProperties=function(){var e,t,n=this._textData.a.length,r=PropertyFactory.getProp;for(e=0;e<n;e+=1)t=this._textData.a[e],this._animatorsData[e]=new TextAnimatorDataProperty(this._elem,t,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:r(this._elem,this._textData.p.a,0,0,this),f:r(this._elem,this._textData.p.f,0,0,this),l:r(this._elem,this._textData.p.l,0,0,this),r:r(this._elem,this._textData.p.r,0,0,this),p:r(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=r(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(e,t){if(this.lettersChangedFlag=t,this._mdf||this._isFirstFrame||t||this._hasMaskedPath&&this._pathData.m._mdf){this._isFirstFrame=!1;var n,r,i,a,s,o,l,c,u,h,f,p,d,m,g,y,v,b,k,E=this._moreOptions.alignment.v,x=this._animatorsData,w=this._textData,S=this.mHelper,C=this._renderType,P=this.renderedLetters.length,_=e.l;if(this._hasMaskedPath){if(k=this._pathData.m,!this._pathData.n||this._pathData._mdf){var T,A=k.v;for(this._pathData.r.v&&(A=A.reverse()),s={tLength:0,segments:[]},a=A._length-1,y=0,i=0;i<a;i+=1)T=bez.buildBezierData(A.v[i],A.v[i+1],[A.o[i][0]-A.v[i][0],A.o[i][1]-A.v[i][1]],[A.i[i+1][0]-A.v[i+1][0],A.i[i+1][1]-A.v[i+1][1]]),s.tLength+=T.segmentLength,s.segments.push(T),y+=T.segmentLength;i=a,k.v.c&&(T=bez.buildBezierData(A.v[i],A.v[0],[A.o[i][0]-A.v[i][0],A.o[i][1]-A.v[i][1]],[A.i[0][0]-A.v[0][0],A.i[0][1]-A.v[0][1]]),s.tLength+=T.segmentLength,s.segments.push(T),y+=T.segmentLength),this._pathData.pi=s}if(s=this._pathData.pi,o=this._pathData.f.v,f=0,h=1,c=0,u=!0,m=s.segments,o<0&&k.v.c)for(s.tLength<Math.abs(o)&&(o=-Math.abs(o)%s.tLength),h=(d=m[f=m.length-1].points).length-1;o<0;)o+=d[h].partialLength,(h-=1)<0&&(h=(d=m[f-=1].points).length-1);p=(d=m[f].points)[h-1],g=(l=d[h]).partialLength}a=_.length,n=0,r=0;var F,M,D,I,R,N=1.2*e.finalSize*.714,L=!0;D=x.length;var O,z,V,B,$,j,H,G,q,U,W,K,Y=-1,Q=o,X=f,Z=h,J=-1,ee="",te=this.defaultPropsArray;if(2===e.j||1===e.j){var ne=0,re=0,ie=2===e.j?-.5:-1,ae=0,se=!0;for(i=0;i<a;i+=1)if(_[i].n){for(ne&&(ne+=re);ae<i;)_[ae].animatorJustifyOffset=ne,ae+=1;ne=0,se=!0}else{for(M=0;M<D;M+=1)(F=x[M].a).t.propType&&(se&&2===e.j&&(re+=F.t.v*ie),(R=x[M].s.getMult(_[i].anIndexes[M],w.a[M].s.totalChars)).length?ne+=F.t.v*R[0]*ie:ne+=F.t.v*R*ie);se=!1}for(ne&&(ne+=re);ae<i;)_[ae].animatorJustifyOffset=ne,ae+=1}for(i=0;i<a;i+=1){if(S.reset(),B=1,_[i].n)n=0,r+=e.yOffset,r+=L?1:0,o=Q,L=!1,this._hasMaskedPath&&(h=Z,p=(d=m[f=X].points)[h-1],g=(l=d[h]).partialLength,c=0),ee="",W="",q="",K="",te=this.defaultPropsArray;else{if(this._hasMaskedPath){if(J!==_[i].line){switch(e.j){case 1:o+=y-e.lineWidths[_[i].line];break;case 2:o+=(y-e.lineWidths[_[i].line])/2}J=_[i].line}Y!==_[i].ind&&(_[Y]&&(o+=_[Y].extra),o+=_[i].an/2,Y=_[i].ind),o+=E[0]*_[i].an*.005;var oe=0;for(M=0;M<D;M+=1)(F=x[M].a).p.propType&&((R=x[M].s.getMult(_[i].anIndexes[M],w.a[M].s.totalChars)).length?oe+=F.p.v[0]*R[0]:oe+=F.p.v[0]*R),F.a.propType&&((R=x[M].s.getMult(_[i].anIndexes[M],w.a[M].s.totalChars)).length?oe+=F.a.v[0]*R[0]:oe+=F.a.v[0]*R);for(u=!0,this._pathData.a.v&&(o=.5*_[0].an+(y-this._pathData.f.v-.5*_[0].an-.5*_[_.length-1].an)*Y/(a-1),o+=this._pathData.f.v);u;)c+g>=o+oe||!d?(v=(o+oe-c)/l.partialLength,z=p.point[0]+(l.point[0]-p.point[0])*v,V=p.point[1]+(l.point[1]-p.point[1])*v,S.translate(-E[0]*_[i].an*.005,-E[1]*N*.01),u=!1):d&&(c+=l.partialLength,(h+=1)>=d.length&&(h=0,m[f+=1]?d=m[f].points:k.v.c?(h=0,d=m[f=0].points):(c-=l.partialLength,d=null)),d&&(p=l,g=(l=d[h]).partialLength));O=_[i].an/2-_[i].add,S.translate(-O,0,0)}else O=_[i].an/2-_[i].add,S.translate(-O,0,0),S.translate(-E[0]*_[i].an*.005,-E[1]*N*.01,0);for(M=0;M<D;M+=1)(F=x[M].a).t.propType&&(R=x[M].s.getMult(_[i].anIndexes[M],w.a[M].s.totalChars),0===n&&0===e.j||(this._hasMaskedPath?R.length?o+=F.t.v*R[0]:o+=F.t.v*R:R.length?n+=F.t.v*R[0]:n+=F.t.v*R));for(e.strokeWidthAnim&&(j=e.sw||0),e.strokeColorAnim&&($=e.sc?[e.sc[0],e.sc[1],e.sc[2]]:[0,0,0]),e.fillColorAnim&&e.fc&&(H=[e.fc[0],e.fc[1],e.fc[2]]),M=0;M<D;M+=1)(F=x[M].a).a.propType&&((R=x[M].s.getMult(_[i].anIndexes[M],w.a[M].s.totalChars)).length?S.translate(-F.a.v[0]*R[0],-F.a.v[1]*R[1],F.a.v[2]*R[2]):S.translate(-F.a.v[0]*R,-F.a.v[1]*R,F.a.v[2]*R));for(M=0;M<D;M+=1)(F=x[M].a).s.propType&&((R=x[M].s.getMult(_[i].anIndexes[M],w.a[M].s.totalChars)).length?S.scale(1+(F.s.v[0]-1)*R[0],1+(F.s.v[1]-1)*R[1],1):S.scale(1+(F.s.v[0]-1)*R,1+(F.s.v[1]-1)*R,1));for(M=0;M<D;M+=1){if(F=x[M].a,R=x[M].s.getMult(_[i].anIndexes[M],w.a[M].s.totalChars),F.sk.propType&&(R.length?S.skewFromAxis(-F.sk.v*R[0],F.sa.v*R[1]):S.skewFromAxis(-F.sk.v*R,F.sa.v*R)),F.r.propType&&(R.length?S.rotateZ(-F.r.v*R[2]):S.rotateZ(-F.r.v*R)),F.ry.propType&&(R.length?S.rotateY(F.ry.v*R[1]):S.rotateY(F.ry.v*R)),F.rx.propType&&(R.length?S.rotateX(F.rx.v*R[0]):S.rotateX(F.rx.v*R)),F.o.propType&&(R.length?B+=(F.o.v*R[0]-B)*R[0]:B+=(F.o.v*R-B)*R),e.strokeWidthAnim&&F.sw.propType&&(R.length?j+=F.sw.v*R[0]:j+=F.sw.v*R),e.strokeColorAnim&&F.sc.propType)for(G=0;G<3;G+=1)R.length?$[G]+=(F.sc.v[G]-$[G])*R[0]:$[G]+=(F.sc.v[G]-$[G])*R;if(e.fillColorAnim&&e.fc){if(F.fc.propType)for(G=0;G<3;G+=1)R.length?H[G]+=(F.fc.v[G]-H[G])*R[0]:H[G]+=(F.fc.v[G]-H[G])*R;F.fh.propType&&(H=R.length?addHueToRGB(H,F.fh.v*R[0]):addHueToRGB(H,F.fh.v*R)),F.fs.propType&&(H=R.length?addSaturationToRGB(H,F.fs.v*R[0]):addSaturationToRGB(H,F.fs.v*R)),F.fb.propType&&(H=R.length?addBrightnessToRGB(H,F.fb.v*R[0]):addBrightnessToRGB(H,F.fb.v*R))}}for(M=0;M<D;M+=1)(F=x[M].a).p.propType&&(R=x[M].s.getMult(_[i].anIndexes[M],w.a[M].s.totalChars),this._hasMaskedPath?R.length?S.translate(0,F.p.v[1]*R[0],-F.p.v[2]*R[1]):S.translate(0,F.p.v[1]*R,-F.p.v[2]*R):R.length?S.translate(F.p.v[0]*R[0],F.p.v[1]*R[1],-F.p.v[2]*R[2]):S.translate(F.p.v[0]*R,F.p.v[1]*R,-F.p.v[2]*R));if(e.strokeWidthAnim&&(q=j<0?0:j),e.strokeColorAnim&&(U="rgb("+Math.round(255*$[0])+","+Math.round(255*$[1])+","+Math.round(255*$[2])+")"),e.fillColorAnim&&e.fc&&(W="rgb("+Math.round(255*H[0])+","+Math.round(255*H[1])+","+Math.round(255*H[2])+")"),this._hasMaskedPath){if(S.translate(0,-e.ls),S.translate(0,E[1]*N*.01+r,0),this._pathData.p.v){b=(l.point[1]-p.point[1])/(l.point[0]-p.point[0]);var le=180*Math.atan(b)/Math.PI;l.point[0]<p.point[0]&&(le+=180),S.rotate(-le*Math.PI/180)}S.translate(z,V,0),o-=E[0]*_[i].an*.005,_[i+1]&&Y!==_[i+1].ind&&(o+=_[i].an/2,o+=.001*e.tr*e.finalSize)}else{switch(S.translate(n,r,0),e.ps&&S.translate(e.ps[0],e.ps[1]+e.ascent,0),e.j){case 1:S.translate(_[i].animatorJustifyOffset+e.justifyOffset+(e.boxWidth-e.lineWidths[_[i].line]),0,0);break;case 2:S.translate(_[i].animatorJustifyOffset+e.justifyOffset+(e.boxWidth-e.lineWidths[_[i].line])/2,0,0)}S.translate(0,-e.ls),S.translate(O,0,0),S.translate(E[0]*_[i].an*.005,E[1]*N*.01,0),n+=_[i].l+.001*e.tr*e.finalSize}"html"===C?ee=S.toCSS():"svg"===C?ee=S.to2dCSS():te=[S.props[0],S.props[1],S.props[2],S.props[3],S.props[4],S.props[5],S.props[6],S.props[7],S.props[8],S.props[9],S.props[10],S.props[11],S.props[12],S.props[13],S.props[14],S.props[15]],K=B}P<=i?(I=new LetterProps(K,q,U,W,ee,te),this.renderedLetters.push(I),P+=1,this.lettersChangedFlag=!0):(I=this.renderedLetters[i],this.lettersChangedFlag=I.update(K,q,U,W,ee,te)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty),ITextElement.prototype.initElement=function(e,t,n){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(e,t,n),this.textProperty=new TextProperty(this,e.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(e.t,this.renderType,this),this.initTransform(e,t,n),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(e){this._mdf=!1,this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange),(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)},ITextElement.prototype.createPathShape=function(e,t){var n,r,i=t.length,a="";for(n=0;n<i;n+=1)"sh"===t[n].ty&&(r=t[n].ks.k,a+=buildShapeString(r,r.i.length,!0,e));return a},ITextElement.prototype.updateDocumentData=function(e,t){this.textProperty.updateDocumentData(e,t)},ITextElement.prototype.canResizeFont=function(e){this.textProperty.canResizeFont(e)},ITextElement.prototype.setMinimumFontSize=function(e){this.textProperty.setMinimumFontSize(e)},ITextElement.prototype.applyTextPropertiesToMatrix=function(e,t,n,r,i){switch(e.ps&&t.translate(e.ps[0],e.ps[1]+e.ascent,0),t.translate(0,-e.ls,0),e.j){case 1:t.translate(e.justifyOffset+(e.boxWidth-e.lineWidths[n]),0,0);break;case 2:t.translate(e.justifyOffset+(e.boxWidth-e.lineWidths[n])/2,0,0)}t.translate(r,i,0)},ITextElement.prototype.buildColor=function(e){return"rgb("+Math.round(255*e[0])+","+Math.round(255*e[1])+","+Math.round(255*e[2])+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){};var emptyShapeData={shapes:[]};function SVGTextLottieElement(e,t,n){this.textSpans=[],this.renderType="svg",this.initElement(e,t,n)}function ISolidElement(e,t,n){this.initElement(e,t,n)}function NullElement(e,t,n){this.initFrame(),this.initBaseData(e,t,n),this.initFrame(),this.initTransform(e,t,n),this.initHierarchy()}function SVGRendererBase(){}function ICompElement(){}function SVGCompElement(e,t,n){this.layers=e.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(e,t,n),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0}}function SVGRenderer(e,t){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var n="";if(t&&t.title){var r=createNS("title"),i=createElementID();r.setAttribute("id",i),r.textContent=t.title,this.svgElement.appendChild(r),n+=i}if(t&&t.description){var a=createNS("desc"),s=createElementID();a.setAttribute("id",s),a.textContent=t.description,this.svgElement.appendChild(a),n+=" "+s}n&&this.svgElement.setAttribute("aria-labelledby",n);var o=createNS("defs");this.svgElement.appendChild(o);var l=createNS("g");this.svgElement.appendChild(l),this.layerElement=l,this.renderConfig={preserveAspectRatio:t&&t.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:t&&t.contentVisibility||"visible",progressiveLoad:t&&t.progressiveLoad||!1,hideOnTransparent:!(t&&!1===t.hideOnTransparent),viewBoxOnly:t&&t.viewBoxOnly||!1,viewBoxSize:t&&t.viewBoxSize||!1,className:t&&t.className||"",id:t&&t.id||"",focusable:t&&t.focusable,filterSize:{width:t&&t.filterSize&&t.filterSize.width||"100%",height:t&&t.filterSize&&t.filterSize.height||"100%",x:t&&t.filterSize&&t.filterSize.x||"0%",y:t&&t.filterSize&&t.filterSize.y||"0%"},width:t&&t.width,height:t&&t.height},this.globalData={_mdf:!1,frameNum:-1,defs:o,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}function CVContextData(){var e;for(this.saved=[],this.cArrPos=0,this.cTr=new Matrix,this.cO=1,this.savedOp=createTypedArray("float32",15),e=0;e<15;e+=1)this.saved[e]=createTypedArray("float32",16);this._length=15}function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}function CVEffects(){}function CVMaskElement(e,t){var n;this.data=e,this.element=t,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var r=this.masksProperties.length,i=!1;for(n=0;n<r;n+=1)"n"!==this.masksProperties[n].mode&&(i=!0),this.viewData[n]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[n],3);this.hasMasks=i,i&&this.element.addRenderableComponent(this)}function CVBaseElement(){}function CVShapeData(e,t,n,r){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var i,a=4;"rc"===t.ty?a=5:"el"===t.ty?a=6:"sr"===t.ty&&(a=7),this.sh=ShapePropertyFactory.getShapeProp(e,t,a,e);var s,o=n.length;for(i=0;i<o;i+=1)n[i].closed||(s={transforms:r.addTransformSequence(n[i].transforms),trNodes:[]},this.styledShapes.push(s),n[i].elements.push(s))}function CVShapeElement(e,t,n){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(e,t,n)}function CVTextElement(e,t,n){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(e,t,n)}function CVImageElement(e,t,n){this.assetData=t.getAssetData(e.refId),this.img=t.imageLoader.getAsset(this.assetData),this.initElement(e,t,n)}function CVSolidElement(e,t,n){this.initElement(e,t,n)}function CanvasRendererBase(e,t){this.animationItem=e,this.renderConfig={clearCanvas:!t||void 0===t.clearCanvas||t.clearCanvas,context:t&&t.context||null,progressiveLoad:t&&t.progressiveLoad||!1,preserveAspectRatio:t&&t.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:t&&t.contentVisibility||"visible",className:t&&t.className||"",id:t&&t.id||""},this.renderConfig.dpr=t&&t.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=t&&t.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas"}function CVCompElement(e,t,n){this.completeLayers=!1,this.layers=e.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(e,t,n),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0}}function CanvasRenderer(e,t){this.animationItem=e,this.renderConfig={clearCanvas:!t||void 0===t.clearCanvas||t.clearCanvas,context:t&&t.context||null,progressiveLoad:t&&t.progressiveLoad||!1,preserveAspectRatio:t&&t.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:t&&t.contentVisibility||"visible",className:t&&t.className||"",id:t&&t.id||""},this.renderConfig.dpr=t&&t.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=t&&t.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas"}function HBaseElement(){}function HSolidElement(e,t,n){this.initElement(e,t,n)}function HShapeElement(e,t,n){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(e,t,n),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}function HTextElement(e,t,n){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(e,t,n)}function HCameraElement(e,t,n){this.initFrame(),this.initBaseData(e,t,n),this.initHierarchy();var r=PropertyFactory.getProp;if(this.pe=r(this,e.pe,0,0,this),e.ks.p.s?(this.px=r(this,e.ks.p.x,1,0,this),this.py=r(this,e.ks.p.y,1,0,this),this.pz=r(this,e.ks.p.z,1,0,this)):this.p=r(this,e.ks.p,1,0,this),e.ks.a&&(this.a=r(this,e.ks.a,1,0,this)),e.ks.or.k.length&&e.ks.or.k[0].to){var i,a=e.ks.or.k.length;for(i=0;i<a;i+=1)e.ks.or.k[i].to=null,e.ks.or.k[i].ti=null}this.or=r(this,e.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=r(this,e.ks.rx,0,degToRads,this),this.ry=r(this,e.ks.ry,0,degToRads,this),this.rz=r(this,e.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}function HImageElement(e,t,n){this.assetData=t.getAssetData(e.refId),this.initElement(e,t,n)}function HybridRendererBase(e,t){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:t&&t.className||"",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(t&&!1===t.hideOnTransparent),filterSize:{width:t&&t.filterSize&&t.filterSize.width||"400%",height:t&&t.filterSize&&t.filterSize.height||"400%",x:t&&t.filterSize&&t.filterSize.x||"-100%",y:t&&t.filterSize&&t.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}function HCompElement(e,t,n){this.layers=e.layers,this.supports3d=!e.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(e,t,n),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0}}function HybridRenderer(e,t){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:t&&t.className||"",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(t&&!1===t.hideOnTransparent),filterSize:{width:t&&t.filterSize&&t.filterSize.width||"400%",height:t&&t.filterSize&&t.filterSize.height||"400%",x:t&&t.filterSize&&t.filterSize.x||"-100%",y:t&&t.filterSize&&t.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(e){for(var t=0,n=e.length,r=[],i="";t<n;)e[t]===String.fromCharCode(13)||e[t]===String.fromCharCode(3)?(r.push(i),i=""):i+=e[t],t+=1;return r.push(i),r},SVGTextLottieElement.prototype.buildShapeData=function(e,t){if(e.shapes&&e.shapes.length){var n=e.shapes[0];if(n.it){var r=n.it[n.it.length-1];r.s&&(r.s.k[0]=t,r.s.k[1]=t)}}return e},SVGTextLottieElement.prototype.buildNewText=function(){var e,t;this.addDynamicProperty(this);var n=this.textProperty.currentData;this.renderedLetters=createSizedArray(n?n.l.length:0),n.fc?this.layerElement.setAttribute("fill",this.buildColor(n.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),n.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(n.sc)),this.layerElement.setAttribute("stroke-width",n.sw)),this.layerElement.setAttribute("font-size",n.finalSize);var r=this.globalData.fontManager.getFontByName(n.f);if(r.fClass)this.layerElement.setAttribute("class",r.fClass);else{this.layerElement.setAttribute("font-family",r.fFamily);var i=n.fWeight,a=n.fStyle;this.layerElement.setAttribute("font-style",a),this.layerElement.setAttribute("font-weight",i)}this.layerElement.setAttribute("aria-label",n.t);var s,o=n.l||[],l=!!this.globalData.fontManager.chars;t=o.length;var c=this.mHelper,u=this.data.singleShape,h=0,f=0,p=!0,d=.001*n.tr*n.finalSize;if(!u||l||n.sz){var m,g=this.textSpans.length;for(e=0;e<t;e+=1){if(this.textSpans[e]||(this.textSpans[e]={span:null,childSpan:null,glyph:null}),!l||!u||0===e){if(s=g>e?this.textSpans[e].span:createNS(l?"g":"text"),g<=e){if(s.setAttribute("stroke-linecap","butt"),s.setAttribute("stroke-linejoin","round"),s.setAttribute("stroke-miterlimit","4"),this.textSpans[e].span=s,l){var y=createNS("g");s.appendChild(y),this.textSpans[e].childSpan=y}this.textSpans[e].span=s,this.layerElement.appendChild(s)}s.style.display="inherit"}if(c.reset(),u&&(o[e].n&&(h=-d,f+=n.yOffset,f+=p?1:0,p=!1),this.applyTextPropertiesToMatrix(n,c,o[e].line,h,f),h+=o[e].l||0,h+=d),l){var v;if(1===(m=this.globalData.fontManager.getCharData(n.finalText[e],r.fStyle,this.globalData.fontManager.getFontByName(n.f).fFamily)).t)v=new SVGCompElement(m.data,this.globalData,this);else{var b=emptyShapeData;m.data&&m.data.shapes&&(b=this.buildShapeData(m.data,n.finalSize)),v=new SVGShapeElement(b,this.globalData,this)}if(this.textSpans[e].glyph){var k=this.textSpans[e].glyph;this.textSpans[e].childSpan.removeChild(k.layerElement),k.destroy()}this.textSpans[e].glyph=v,v._debug=!0,v.prepareFrame(0),v.renderFrame(),this.textSpans[e].childSpan.appendChild(v.layerElement),1===m.t&&this.textSpans[e].childSpan.setAttribute("transform","scale("+n.finalSize/100+","+n.finalSize/100+")")}else u&&s.setAttribute("transform","translate("+c.props[12]+","+c.props[13]+")"),s.textContent=o[e].val,s.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}u&&s&&s.setAttribute("d","")}else{var E=this.textContainer,x="start";switch(n.j){case 1:x="end";break;case 2:x="middle";break;default:x="start"}E.setAttribute("text-anchor",x),E.setAttribute("letter-spacing",d);var w=this.buildTextContents(n.finalText);for(t=w.length,f=n.ps?n.ps[1]+n.ascent:0,e=0;e<t;e+=1)(s=this.textSpans[e].span||createNS("tspan")).textContent=w[e],s.setAttribute("x",0),s.setAttribute("y",f),s.style.display="inherit",E.appendChild(s),this.textSpans[e]||(this.textSpans[e]={span:null,glyph:null}),this.textSpans[e].span=s,f+=n.finalLineHeight;this.layerElement.appendChild(E)}for(;e<this.textSpans.length;)this.textSpans[e].span.style.display="none",e+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var e=this.layerElement.getBBox();this.bbox={top:e.y,left:e.x,width:e.width,height:e.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var e,t,n=this.textSpans.length;for(this.renderedFrame=this.comp.renderedFrame,e=0;e<n;e+=1)(t=this.textSpans[e].glyph)&&(t.prepareFrame(this.comp.renderedFrame-this.data.st),t._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if((!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){var e,t;this._sizeChanged=!0;var n,r,i,a=this.textAnimator.renderedLetters,s=this.textProperty.currentData.l;for(t=s.length,e=0;e<t;e+=1)s[e].n||(n=a[e],r=this.textSpans[e].span,(i=this.textSpans[e].glyph)&&i.renderFrame(),n._mdf.m&&r.setAttribute("transform",n.m),n._mdf.o&&r.setAttribute("opacity",n.o),n._mdf.sw&&r.setAttribute("stroke-width",n.sw),n._mdf.sc&&r.setAttribute("stroke",n.sc),n._mdf.fc&&r.setAttribute("fill",n.fc))}},extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var e=createNS("rect");e.setAttribute("width",this.data.sw),e.setAttribute("height",this.data.sh),e.setAttribute("fill",this.data.sc),this.layerElement.appendChild(e)},NullElement.prototype.prepareFrame=function(e){this.prepareProperties(e,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement),extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(e){return new NullElement(e,this.globalData,this)},SVGRendererBase.prototype.createShape=function(e){return new SVGShapeElement(e,this.globalData,this)},SVGRendererBase.prototype.createText=function(e){return new SVGTextLottieElement(e,this.globalData,this)},SVGRendererBase.prototype.createImage=function(e){return new IImageElement(e,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(e){return new ISolidElement(e,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(e){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+e.w+" "+e.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",e.w),this.svgElement.setAttribute("height",e.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),void 0!==this.renderConfig.focusable&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var t=this.globalData.defs;this.setupGlobalData(e,t),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=e;var n=createNS("clipPath"),r=createNS("rect");r.setAttribute("width",e.w),r.setAttribute("height",e.h),r.setAttribute("x",0),r.setAttribute("y",0);var i=createElementID();n.setAttribute("id",i),n.appendChild(r),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+i+")"),t.appendChild(n),this.layers=e.layers,this.elements=createSizedArray(e.layers.length)},SVGRendererBase.prototype.destroy=function(){var e;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var t=this.layers?this.layers.length:0;for(e=0;e<t;e+=1)this.elements[e]&&this.elements[e].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.buildItem=function(e){var t=this.elements;if(!t[e]&&99!==this.layers[e].ty){t[e]=!0;var n=this.createItem(this.layers[e]);t[e]=n,getExpressionsPlugin()&&(0===this.layers[e].ty&&this.globalData.projectInterface.registerComposition(n),n.initExpressions()),this.appendElementInPos(n,e),this.layers[e].tt&&(this.elements[e-1]&&!0!==this.elements[e-1]?n.setMatte(t[e-1].layerId):(this.buildItem(e-1),this.addPendingElement(n)))}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var e=this.pendingElements.pop();if(e.checkParenting(),e.data.tt)for(var t=0,n=this.elements.length;t<n;){if(this.elements[t]===e){e.setMatte(this.elements[t-1].layerId);break}t+=1}}},SVGRendererBase.prototype.renderFrame=function(e){if(this.renderedFrame!==e&&!this.destroyed){var t;null===e?e=this.renderedFrame:this.renderedFrame=e,this.globalData.frameNum=e,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=e,this.globalData._mdf=!1;var n=this.layers.length;for(this.completeLayers||this.checkLayers(e),t=n-1;t>=0;t-=1)(this.completeLayers||this.elements[t])&&this.elements[t].prepareFrame(e-this.layers[t].st);if(this.globalData._mdf)for(t=0;t<n;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(e,t){var n=e.getBaseElement();if(n){for(var r,i=0;i<t;)this.elements[i]&&!0!==this.elements[i]&&this.elements[i].getBaseElement()&&(r=this.elements[i].getBaseElement()),i+=1;r?this.layerElement.insertBefore(n,r):this.layerElement.appendChild(n)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(e,t,n){this.initFrame(),this.initBaseData(e,t,n),this.initTransform(e,t,n),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),!this.data.xt&&t.progressiveLoad||this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(e){if(this._mdf=!1,this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange),this.isInRange||this.data.xt){if(this.tm._placeholder)this.renderedFrame=e/this.data.sr;else{var t=this.tm.v;t===this.data.op&&(t=this.data.op-1),this.renderedFrame=t}var n,r=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),n=r-1;n>=0;n-=1)(this.completeLayers||this.elements[n])&&(this.elements[n].prepareFrame(this.renderedFrame-this.layers[n].st),this.elements[n]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var e,t=this.layers.length;for(e=0;e<t;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()},ICompElement.prototype.setElements=function(e){this.elements=e},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var e,t=this.layers.length;for(e=0;e<t;e+=1)this.elements[e]&&this.elements[e].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()},extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(e){return new SVGCompElement(e,this.globalData,this)},extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(e){return new SVGCompElement(e,this.globalData,this)},CVContextData.prototype.duplicate=function(){var e=2*this._length,t=this.savedOp;this.savedOp=createTypedArray("float32",e),this.savedOp.set(t);var n=0;for(n=this._length;n<e;n+=1)this.saved[n]=createTypedArray("float32",16);this._length=e},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.cO=1},ShapeTransformManager.prototype={addTransformSequence:function(e){var t,n=e.length,r="_";for(t=0;t<n;t+=1)r+=e[t].transform.key+"_";var i=this.sequences[r];return i||(i={transforms:[].concat(e),finalTransform:new Matrix,_mdf:!1},this.sequences[r]=i,this.sequenceList.push(i)),i},processSequence:function(e,t){for(var n,r=0,i=e.transforms.length,a=t;r<i&&!t;){if(e.transforms[r].transform.mProps._mdf){a=!0;break}r+=1}if(a)for(e.finalTransform.reset(),r=i-1;r>=0;r-=1)n=e.transforms[r].transform.mProps.v.props,e.finalTransform.transform(n[0],n[1],n[2],n[3],n[4],n[5],n[6],n[7],n[8],n[9],n[10],n[11],n[12],n[13],n[14],n[15]);e._mdf=a},processSequences:function(e){var t,n=this.sequenceList.length;for(t=0;t<n;t+=1)this.processSequence(this.sequenceList[t],e)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}},CVEffects.prototype.renderFrame=function(){},CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var e,t,n,r,i=this.element.finalTransform.mat,a=this.element.canvasContext,s=this.masksProperties.length;for(a.beginPath(),e=0;e<s;e+=1)if("n"!==this.masksProperties[e].mode){var o;this.masksProperties[e].inv&&(a.moveTo(0,0),a.lineTo(this.element.globalData.compSize.w,0),a.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),a.lineTo(0,this.element.globalData.compSize.h),a.lineTo(0,0)),r=this.viewData[e].v,t=i.applyToPointArray(r.v[0][0],r.v[0][1],0),a.moveTo(t[0],t[1]);var l=r._length;for(o=1;o<l;o+=1)n=i.applyToTriplePoints(r.o[o-1],r.i[o],r.v[o]),a.bezierCurveTo(n[0],n[1],n[2],n[3],n[4],n[5]);n=i.applyToTriplePoints(r.o[o-1],r.i[0],r.v[0]),a.bezierCurveTo(n[0],n[1],n[2],n[3],n[4],n[5])}this.element.globalData.renderer.save(!0),a.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null},CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){this.canvasContext=this.globalData.canvasContext,this.renderableEffectsManager=new CVEffects(this)},createContent:function(){},setBlendMode:function(){var e=this.globalData;if(e.blendMode!==this.data.bm){e.blendMode=this.data.bm;var t=getBlendMode(this.data.bm);e.canvasContext.globalCompositeOperation=t}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this)},hideElement:function(){this.hidden||this.isInRange&&!this.isTransparent||(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},renderFrame:function(){if(!this.hidden&&!this.data.hd){this.renderTransform(),this.renderRenderable(),this.setBlendMode();var e=0===this.data.ty;this.globalData.renderer.save(e),this.globalData.renderer.ctxTransform(this.finalTransform.mat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v),this.renderInnerContent(),this.globalData.renderer.restore(e),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement,CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated,extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(e,t){var n={data:e,type:e.ty,preTransforms:this.transformsManager.addTransformSequence(t),transforms:[],elements:[],closed:!0===e.hd},r={};if("fl"===e.ty||"st"===e.ty?(r.c=PropertyFactory.getProp(this,e.c,1,255,this),r.c.k||(n.co="rgb("+bmFloor(r.c.v[0])+","+bmFloor(r.c.v[1])+","+bmFloor(r.c.v[2])+")")):"gf"!==e.ty&&"gs"!==e.ty||(r.s=PropertyFactory.getProp(this,e.s,1,null,this),r.e=PropertyFactory.getProp(this,e.e,1,null,this),r.h=PropertyFactory.getProp(this,e.h||{k:0},0,.01,this),r.a=PropertyFactory.getProp(this,e.a||{k:0},0,degToRads,this),r.g=new GradientProperty(this,e.g,this)),r.o=PropertyFactory.getProp(this,e.o,0,.01,this),"st"===e.ty||"gs"===e.ty){if(n.lc=lineCapEnum[e.lc||2],n.lj=lineJoinEnum[e.lj||2],1==e.lj&&(n.ml=e.ml),r.w=PropertyFactory.getProp(this,e.w,0,null,this),r.w.k||(n.wi=r.w.v),e.d){var i=new DashProperty(this,e.d,"canvas",this);r.d=i,r.d.k||(n.da=r.d.dashArray,n.do=r.d.dashoffset[0])}}else n.r=2===e.r?"evenodd":"nonzero";return this.stylesList.push(n),r.style=n,r},CVShapeElement.prototype.createGroupElement=function(){return{it:[],prevViewData:[]}},CVShapeElement.prototype.createTransformElement=function(e){return{transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,e.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,e,this)}}},CVShapeElement.prototype.createShapeElement=function(e){var t=new CVShapeData(this,e,this.stylesList,this.transformsManager);return this.shapes.push(t),this.addShapeToModifiers(t),t},CVShapeElement.prototype.reloadShapes=function(){var e;this._isFirstFrame=!0;var t=this.itemsData.length;for(e=0;e<t;e+=1)this.prevViewData[e]=this.itemsData[e];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),t=this.dynamicProperties.length,e=0;e<t;e+=1)this.dynamicProperties[e].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(e){var t,n=this.stylesList.length;for(t=0;t<n;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.push(e)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var e,t=this.stylesList.length;for(e=0;e<t;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.pop()},CVShapeElement.prototype.closeStyles=function(e){var t,n=e.length;for(t=0;t<n;t+=1)e[t].closed=!0},CVShapeElement.prototype.searchShapes=function(e,t,n,r,i){var a,s,o,l,c,u,h=e.length-1,f=[],p=[],d=[].concat(i);for(a=h;a>=0;a-=1){if((l=this.searchProcessedElement(e[a]))?t[a]=n[l-1]:e[a]._shouldRender=r,"fl"===e[a].ty||"st"===e[a].ty||"gf"===e[a].ty||"gs"===e[a].ty)l?t[a].style.closed=!1:t[a]=this.createStyleElement(e[a],d),f.push(t[a].style);else if("gr"===e[a].ty){if(l)for(o=t[a].it.length,s=0;s<o;s+=1)t[a].prevViewData[s]=t[a].it[s];else t[a]=this.createGroupElement(e[a]);this.searchShapes(e[a].it,t[a].it,t[a].prevViewData,r,d)}else"tr"===e[a].ty?(l||(u=this.createTransformElement(e[a]),t[a]=u),d.push(t[a]),this.addTransformToStyleList(t[a])):"sh"===e[a].ty||"rc"===e[a].ty||"el"===e[a].ty||"sr"===e[a].ty?l||(t[a]=this.createShapeElement(e[a])):"tm"===e[a].ty||"rd"===e[a].ty||"pb"===e[a].ty?(l?(c=t[a]).closed=!1:((c=ShapeModifiers.getModifier(e[a].ty)).init(this,e[a]),t[a]=c,this.shapeModifiers.push(c)),p.push(c)):"rp"===e[a].ty&&(l?(c=t[a]).closed=!0:(c=ShapeModifiers.getModifier(e[a].ty),t[a]=c,c.init(this,e,a,t),this.shapeModifiers.push(c),r=!1),p.push(c));this.addProcessedElement(e[a],a+1)}for(this.removeTransformFromStyleList(),this.closeStyles(f),h=p.length,a=0;a<h;a+=1)p[a].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(e,t){(e._opMdf||t.op._mdf||this._isFirstFrame)&&(t.opacity=e.opacity,t.opacity*=t.op.v,t._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var e,t,n,r,i,a,s,o,l,c=this.stylesList.length,u=this.globalData.renderer,h=this.globalData.canvasContext;for(e=0;e<c;e+=1)if(("st"!==(o=(l=this.stylesList[e]).type)&&"gs"!==o||0!==l.wi)&&l.data._shouldRender&&0!==l.coOp&&0!==this.globalData.currentGlobalAlpha){for(u.save(),a=l.elements,"st"===o||"gs"===o?(h.strokeStyle="st"===o?l.co:l.grd,h.lineWidth=l.wi,h.lineCap=l.lc,h.lineJoin=l.lj,h.miterLimit=l.ml||0):h.fillStyle="fl"===o?l.co:l.grd,u.ctxOpacity(l.coOp),"st"!==o&&"gs"!==o&&h.beginPath(),u.ctxTransform(l.preTransforms.finalTransform.props),n=a.length,t=0;t<n;t+=1){for("st"!==o&&"gs"!==o||(h.beginPath(),l.da&&(h.setLineDash(l.da),h.lineDashOffset=l.do)),i=(s=a[t].trNodes).length,r=0;r<i;r+=1)"m"===s[r].t?h.moveTo(s[r].p[0],s[r].p[1]):"c"===s[r].t?h.bezierCurveTo(s[r].pts[0],s[r].pts[1],s[r].pts[2],s[r].pts[3],s[r].pts[4],s[r].pts[5]):h.closePath();"st"!==o&&"gs"!==o||(h.stroke(),l.da&&h.setLineDash(this.dashResetter))}"st"!==o&&"gs"!==o&&h.fill(l.r),u.restore()}},CVShapeElement.prototype.renderShape=function(e,t,n,r){var i,a;for(a=e,i=t.length-1;i>=0;i-=1)"tr"===t[i].ty?(a=n[i].transform,this.renderShapeTransform(e,a)):"sh"===t[i].ty||"el"===t[i].ty||"rc"===t[i].ty||"sr"===t[i].ty?this.renderPath(t[i],n[i]):"fl"===t[i].ty?this.renderFill(t[i],n[i],a):"st"===t[i].ty?this.renderStroke(t[i],n[i],a):"gf"===t[i].ty||"gs"===t[i].ty?this.renderGradientFill(t[i],n[i],a):"gr"===t[i].ty?this.renderShape(a,t[i].it,n[i].it):t[i].ty;r&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(e,t){if(this._isFirstFrame||t._mdf||e.transforms._mdf){var n,r,i,a=e.trNodes,s=t.paths,o=s._length;a.length=0;var l=e.transforms.finalTransform;for(i=0;i<o;i+=1){var c=s.shapes[i];if(c&&c.v){for(r=c._length,n=1;n<r;n+=1)1===n&&a.push({t:"m",p:l.applyToPointArray(c.v[0][0],c.v[0][1],0)}),a.push({t:"c",pts:l.applyToTriplePoints(c.o[n-1],c.i[n],c.v[n])});1===r&&a.push({t:"m",p:l.applyToPointArray(c.v[0][0],c.v[0][1],0)}),c.c&&r&&(a.push({t:"c",pts:l.applyToTriplePoints(c.o[n-1],c.i[0],c.v[0])}),a.push({t:"z"}))}}e.trNodes=a}},CVShapeElement.prototype.renderPath=function(e,t){if(!0!==e.hd&&e._shouldRender){var n,r=t.styledShapes.length;for(n=0;n<r;n+=1)this.renderStyledShape(t.styledShapes[n],t.sh)}},CVShapeElement.prototype.renderFill=function(e,t,n){var r=t.style;(t.c._mdf||this._isFirstFrame)&&(r.co="rgb("+bmFloor(t.c.v[0])+","+bmFloor(t.c.v[1])+","+bmFloor(t.c.v[2])+")"),(t.o._mdf||n._opMdf||this._isFirstFrame)&&(r.coOp=t.o.v*n.opacity)},CVShapeElement.prototype.renderGradientFill=function(e,t,n){var r,i=t.style;if(!i.grd||t.g._mdf||t.s._mdf||t.e._mdf||1!==e.t&&(t.h._mdf||t.a._mdf)){var a,s=this.globalData.canvasContext,o=t.s.v,l=t.e.v;if(1===e.t)r=s.createLinearGradient(o[0],o[1],l[0],l[1]);else{var c=Math.sqrt(Math.pow(o[0]-l[0],2)+Math.pow(o[1]-l[1],2)),u=Math.atan2(l[1]-o[1],l[0]-o[0]),h=t.h.v;h>=1?h=.99:h<=-1&&(h=-.99);var f=c*h,p=Math.cos(u+t.a.v)*f+o[0],d=Math.sin(u+t.a.v)*f+o[1];r=s.createRadialGradient(p,d,0,o[0],o[1],c)}var m=e.g.p,g=t.g.c,y=1;for(a=0;a<m;a+=1)t.g._hasOpacity&&t.g._collapsable&&(y=t.g.o[2*a+1]),r.addColorStop(g[4*a]/100,"rgba("+g[4*a+1]+","+g[4*a+2]+","+g[4*a+3]+","+y+")");i.grd=r}i.coOp=t.o.v*n.opacity},CVShapeElement.prototype.renderStroke=function(e,t,n){var r=t.style,i=t.d;i&&(i._mdf||this._isFirstFrame)&&(r.da=i.dashArray,r.do=i.dashoffset[0]),(t.c._mdf||this._isFirstFrame)&&(r.co="rgb("+bmFloor(t.c.v[0])+","+bmFloor(t.c.v[1])+","+bmFloor(t.c.v[2])+")"),(t.o._mdf||n._opMdf||this._isFirstFrame)&&(r.coOp=t.o.v*n.opacity),(t.w._mdf||this._isFirstFrame)&&(r.wi=t.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var e=this.textProperty.currentData;this.renderedLetters=createSizedArray(e.l?e.l.length:0);var t=!1;e.fc?(t=!0,this.values.fill=this.buildColor(e.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=t;var n=!1;e.sc&&(n=!0,this.values.stroke=this.buildColor(e.sc),this.values.sWidth=e.sw);var r,i,a,s,o,l,c,u,h,f,p,d,m=this.globalData.fontManager.getFontByName(e.f),g=e.l,y=this.mHelper;this.stroke=n,this.values.fValue=e.finalSize+"px "+this.globalData.fontManager.getFontByName(e.f).fFamily,i=e.finalText.length;var v=this.data.singleShape,b=.001*e.tr*e.finalSize,k=0,E=0,x=!0,w=0;for(r=0;r<i;r+=1){s=(a=this.globalData.fontManager.getCharData(e.finalText[r],m.fStyle,this.globalData.fontManager.getFontByName(e.f).fFamily))&&a.data||{},y.reset(),v&&g[r].n&&(k=-b,E+=e.yOffset,E+=x?1:0,x=!1),h=(c=s.shapes?s.shapes[0].it:[]).length,y.scale(e.finalSize/100,e.finalSize/100),v&&this.applyTextPropertiesToMatrix(e,y,g[r].line,k,E),p=createSizedArray(h-1);var S=0;for(u=0;u<h;u+=1)if("sh"===c[u].ty){for(l=c[u].ks.k.i.length,f=c[u].ks.k,d=[],o=1;o<l;o+=1)1===o&&d.push(y.applyToX(f.v[0][0],f.v[0][1],0),y.applyToY(f.v[0][0],f.v[0][1],0)),d.push(y.applyToX(f.o[o-1][0],f.o[o-1][1],0),y.applyToY(f.o[o-1][0],f.o[o-1][1],0),y.applyToX(f.i[o][0],f.i[o][1],0),y.applyToY(f.i[o][0],f.i[o][1],0),y.applyToX(f.v[o][0],f.v[o][1],0),y.applyToY(f.v[o][0],f.v[o][1],0));d.push(y.applyToX(f.o[o-1][0],f.o[o-1][1],0),y.applyToY(f.o[o-1][0],f.o[o-1][1],0),y.applyToX(f.i[0][0],f.i[0][1],0),y.applyToY(f.i[0][0],f.i[0][1],0),y.applyToX(f.v[0][0],f.v[0][1],0),y.applyToY(f.v[0][0],f.v[0][1],0)),p[S]=d,S+=1}v&&(k+=g[r].l,k+=b),this.textSpans[w]?this.textSpans[w].elem=p:this.textSpans[w]={elem:p},w+=1}},CVTextElement.prototype.renderInnerContent=function(){var e,t,n,r,i,a,s=this.canvasContext;s.font=this.values.fValue,s.lineCap="butt",s.lineJoin="miter",s.miterLimit=4,this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var o,l=this.textAnimator.renderedLetters,c=this.textProperty.currentData.l;t=c.length;var u,h,f=null,p=null,d=null;for(e=0;e<t;e+=1)if(!c[e].n){if((o=l[e])&&(this.globalData.renderer.save(),this.globalData.renderer.ctxTransform(o.p),this.globalData.renderer.ctxOpacity(o.o)),this.fill){for(o&&o.fc?f!==o.fc&&(f=o.fc,s.fillStyle=o.fc):f!==this.values.fill&&(f=this.values.fill,s.fillStyle=this.values.fill),r=(u=this.textSpans[e].elem).length,this.globalData.canvasContext.beginPath(),n=0;n<r;n+=1)for(a=(h=u[n]).length,this.globalData.canvasContext.moveTo(h[0],h[1]),i=2;i<a;i+=6)this.globalData.canvasContext.bezierCurveTo(h[i],h[i+1],h[i+2],h[i+3],h[i+4],h[i+5]);this.globalData.canvasContext.closePath(),this.globalData.canvasContext.fill()}if(this.stroke){for(o&&o.sw?d!==o.sw&&(d=o.sw,s.lineWidth=o.sw):d!==this.values.sWidth&&(d=this.values.sWidth,s.lineWidth=this.values.sWidth),o&&o.sc?p!==o.sc&&(p=o.sc,s.strokeStyle=o.sc):p!==this.values.stroke&&(p=this.values.stroke,s.strokeStyle=this.values.stroke),r=(u=this.textSpans[e].elem).length,this.globalData.canvasContext.beginPath(),n=0;n<r;n+=1)for(a=(h=u[n]).length,this.globalData.canvasContext.moveTo(h[0],h[1]),i=2;i<a;i+=6)this.globalData.canvasContext.bezierCurveTo(h[i],h[i+1],h[i+2],h[i+3],h[i+4],h[i+5]);this.globalData.canvasContext.closePath(),this.globalData.canvasContext.stroke()}o&&this.globalData.renderer.restore()}},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var e=createTag("canvas");e.width=this.assetData.w,e.height=this.assetData.h;var t,n,r=e.getContext("2d"),i=this.img.width,a=this.img.height,s=i/a,o=this.assetData.w/this.assetData.h,l=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;s>o&&"xMidYMid slice"===l||s<o&&"xMidYMid slice"!==l?t=(n=a)*o:n=(t=i)/o,r.drawImage(this.img,(i-t)/2,(a-n)/2,t,n,0,0,this.assetData.w,this.assetData.h),this.img=e}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null},extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){var e=this.canvasContext;e.fillStyle=this.data.sc,e.fillRect(0,0,this.data.sw,this.data.sh)},extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(e){return new CVShapeElement(e,this.globalData,this)},CanvasRendererBase.prototype.createText=function(e){return new CVTextElement(e,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(e){return new CVImageElement(e,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(e){return new CVSolidElement(e,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(e){if(1!==e[0]||0!==e[1]||0!==e[4]||1!==e[5]||0!==e[12]||0!==e[13])if(this.renderConfig.clearCanvas){this.transformMat.cloneFromProps(e);var t=this.contextData.cTr.props;this.transformMat.transform(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15]),this.contextData.cTr.cloneFromProps(this.transformMat.props);var n=this.contextData.cTr.props;this.canvasContext.setTransform(n[0],n[1],n[4],n[5],n[12],n[13])}else this.canvasContext.transform(e[0],e[1],e[4],e[5],e[12],e[13])},CanvasRendererBase.prototype.ctxOpacity=function(e){if(!this.renderConfig.clearCanvas)return this.canvasContext.globalAlpha*=e<0?0:e,void(this.globalData.currentGlobalAlpha=this.contextData.cO);this.contextData.cO*=e<0?0:e,this.globalData.currentGlobalAlpha!==this.contextData.cO&&(this.canvasContext.globalAlpha=this.contextData.cO,this.globalData.currentGlobalAlpha=this.contextData.cO)},CanvasRendererBase.prototype.reset=function(){this.renderConfig.clearCanvas?this.contextData.reset():this.canvasContext.restore()},CanvasRendererBase.prototype.save=function(e){if(this.renderConfig.clearCanvas){e&&this.canvasContext.save();var t,n=this.contextData.cTr.props;this.contextData._length<=this.contextData.cArrPos&&this.contextData.duplicate();var r=this.contextData.saved[this.contextData.cArrPos];for(t=0;t<16;t+=1)r[t]=n[t];this.contextData.savedOp[this.contextData.cArrPos]=this.contextData.cO,this.contextData.cArrPos+=1}else this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(e){if(this.renderConfig.clearCanvas){e&&(this.canvasContext.restore(),this.globalData.blendMode="source-over"),this.contextData.cArrPos-=1;var t,n=this.contextData.saved[this.contextData.cArrPos],r=this.contextData.cTr.props;for(t=0;t<16;t+=1)r[t]=n[t];this.canvasContext.setTransform(n[0],n[1],n[4],n[5],n[12],n[13]),n=this.contextData.savedOp[this.contextData.cArrPos],this.contextData.cO=n,this.globalData.currentGlobalAlpha!==n&&(this.canvasContext.globalAlpha=n,this.globalData.currentGlobalAlpha=n)}else this.canvasContext.restore()},CanvasRendererBase.prototype.configAnimation=function(e){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var t=this.animationItem.container.style;t.width="100%",t.height="100%";var n="0px 0px 0px";t.transformOrigin=n,t.mozTransformOrigin=n,t.webkitTransformOrigin=n,t["-webkit-transform"]=n,t.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.data=e,this.layers=e.layers,this.transformCanvas={w:e.w,h:e.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(e,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(e.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(){var e,t,n,r;if(this.reset(),this.animationItem.wrapper&&this.animationItem.container?(e=this.animationItem.wrapper.offsetWidth,t=this.animationItem.wrapper.offsetHeight,this.animationItem.container.setAttribute("width",e*this.renderConfig.dpr),this.animationItem.container.setAttribute("height",t*this.renderConfig.dpr)):(e=this.canvasContext.canvas.width*this.renderConfig.dpr,t=this.canvasContext.canvas.height*this.renderConfig.dpr),-1!==this.renderConfig.preserveAspectRatio.indexOf("meet")||-1!==this.renderConfig.preserveAspectRatio.indexOf("slice")){var i=this.renderConfig.preserveAspectRatio.split(" "),a=i[1]||"meet",s=i[0]||"xMidYMid",o=s.substr(0,4),l=s.substr(4);n=e/t,(r=this.transformCanvas.w/this.transformCanvas.h)>n&&"meet"===a||r<n&&"slice"===a?(this.transformCanvas.sx=e/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=e/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=t/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=t/(this.transformCanvas.h/this.renderConfig.dpr)),this.transformCanvas.tx="xMid"===o&&(r<n&&"meet"===a||r>n&&"slice"===a)?(e-this.transformCanvas.w*(t/this.transformCanvas.h))/2*this.renderConfig.dpr:"xMax"===o&&(r<n&&"meet"===a||r>n&&"slice"===a)?(e-this.transformCanvas.w*(t/this.transformCanvas.h))*this.renderConfig.dpr:0,this.transformCanvas.ty="YMid"===l&&(r>n&&"meet"===a||r<n&&"slice"===a)?(t-this.transformCanvas.h*(e/this.transformCanvas.w))/2*this.renderConfig.dpr:"YMax"===l&&(r>n&&"meet"===a||r<n&&"slice"===a)?(t-this.transformCanvas.h*(e/this.transformCanvas.w))*this.renderConfig.dpr:0}else"none"===this.renderConfig.preserveAspectRatio?(this.transformCanvas.sx=e/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=t/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){var e;for(this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),e=(this.layers?this.layers.length:0)-1;e>=0;e-=1)this.elements[e]&&this.elements[e].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(e,t){if((this.renderedFrame!==e||!0!==this.renderConfig.clearCanvas||t)&&!this.destroyed&&-1!==e){var n;this.renderedFrame=e,this.globalData.frameNum=e-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||t,this.globalData.projectInterface.currentFrame=e;var r=this.layers.length;for(this.completeLayers||this.checkLayers(e),n=0;n<r;n+=1)(this.completeLayers||this.elements[n])&&this.elements[n].prepareFrame(e-this.layers[n].st);if(this.globalData._mdf){for(!0===this.renderConfig.clearCanvas?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),n=r-1;n>=0;n-=1)(this.completeLayers||this.elements[n])&&this.elements[n].renderFrame();!0!==this.renderConfig.clearCanvas&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(e){var t=this.elements;if(!t[e]&&99!==this.layers[e].ty){var n=this.createItem(this.layers[e],this,this.globalData);t[e]=n,n.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"},extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var e,t=this.canvasContext;for(t.beginPath(),t.moveTo(0,0),t.lineTo(this.data.w,0),t.lineTo(this.data.w,this.data.h),t.lineTo(0,this.data.h),t.lineTo(0,0),t.clip(),e=this.layers.length-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()},CVCompElement.prototype.destroy=function(){var e;for(e=this.layers.length-1;e>=0;e-=1)this.elements[e]&&this.elements[e].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(e){return new CVCompElement(e,this.globalData,this)},extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(e){return new CVCompElement(e,this.globalData,this)},HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),0!==this.data.bm&&this.setBlendMode()},renderElement:function(){var e=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var t=this.finalTransform.mat.toCSS();e.transform=t,e.webkitTransform=t}this.finalTransform._opMdf&&(e.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting,extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var e;this.data.hasMask?((e=createNS("rect")).setAttribute("width",this.data.sw),e.setAttribute("height",this.data.sh),e.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):((e=createTag("div")).style.width=this.data.sw+"px",e.style.height=this.data.sh+"px",e.style.backgroundColor=this.data.sc),this.layerElement.appendChild(e)},extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var e;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),e=this.svgElement;else{e=createNS("svg");var t=this.comp.data?this.comp.data:this.globalData.compSize;e.setAttribute("width",t.w),e.setAttribute("height",t.h),e.appendChild(this.shapesContainer),this.layerElement.appendChild(e)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=e},HShapeElement.prototype.getTransformedPoint=function(e,t){var n,r=e.length;for(n=0;n<r;n+=1)t=e[n].mProps.v.applyToPointArray(t[0],t[1],0);return t},HShapeElement.prototype.calculateShapeBoundingBox=function(e,t){var n,r,i,a,s,o=e.sh.v,l=e.transformers,c=o._length;if(!(c<=1)){for(n=0;n<c-1;n+=1)r=this.getTransformedPoint(l,o.v[n]),i=this.getTransformedPoint(l,o.o[n]),a=this.getTransformedPoint(l,o.i[n+1]),s=this.getTransformedPoint(l,o.v[n+1]),this.checkBounds(r,i,a,s,t);o.c&&(r=this.getTransformedPoint(l,o.v[n]),i=this.getTransformedPoint(l,o.o[n]),a=this.getTransformedPoint(l,o.i[0]),s=this.getTransformedPoint(l,o.v[0]),this.checkBounds(r,i,a,s,t))}},HShapeElement.prototype.checkBounds=function(e,t,n,r,i){this.getBoundsOfCurve(e,t,n,r);var a=this.shapeBoundingBox;i.x=bmMin(a.left,i.x),i.xMax=bmMax(a.right,i.xMax),i.y=bmMin(a.top,i.y),i.yMax=bmMax(a.bottom,i.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(e,t,n,r){for(var i,a,s,o,l,c,u,h=[[e[0],r[0]],[e[1],r[1]]],f=0;f<2;++f)a=6*e[f]-12*t[f]+6*n[f],i=-3*e[f]+9*t[f]-9*n[f]+3*r[f],s=3*t[f]-3*e[f],a|=0,s|=0,0==(i|=0)&&0===a||(0===i?(o=-s/a)>0&&o<1&&h[f].push(this.calculateF(o,e,t,n,r,f)):(l=a*a-4*s*i)>=0&&((c=(-a+bmSqrt(l))/(2*i))>0&&c<1&&h[f].push(this.calculateF(c,e,t,n,r,f)),(u=(-a-bmSqrt(l))/(2*i))>0&&u<1&&h[f].push(this.calculateF(u,e,t,n,r,f))));this.shapeBoundingBox.left=bmMin.apply(null,h[0]),this.shapeBoundingBox.top=bmMin.apply(null,h[1]),this.shapeBoundingBox.right=bmMax.apply(null,h[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,h[1])},HShapeElement.prototype.calculateF=function(e,t,n,r,i,a){return bmPow(1-e,3)*t[a]+3*bmPow(1-e,2)*e*n[a]+3*(1-e)*bmPow(e,2)*r[a]+bmPow(e,3)*i[a]},HShapeElement.prototype.calculateBoundingBox=function(e,t){var n,r=e.length;for(n=0;n<r;n+=1)e[n]&&e[n].sh?this.calculateShapeBoundingBox(e[n],t):e[n]&&e[n].it?this.calculateBoundingBox(e[n].it,t):e[n]&&e[n].style&&e[n].w&&this.expandStrokeBoundingBox(e[n].w,t)},HShapeElement.prototype.expandStrokeBoundingBox=function(e,t){var n=0;if(e.keyframes){for(var r=0;r<e.keyframes.length;r+=1){var i=e.keyframes[r].s;i>n&&(n=i)}n*=e.mult}else n=e.v*e.mult;t.x-=n,t.xMax+=n,t.y-=n,t.yMax+=n},HShapeElement.prototype.currentBoxContains=function(e){return this.currentBBox.x<=e.x&&this.currentBBox.y<=e.y&&this.currentBBox.width+this.currentBBox.x>=e.x+e.width&&this.currentBBox.height+this.currentBBox.y>=e.y+e.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var e=this.tempBoundingBox,t=999999;if(e.x=t,e.xMax=-t,e.y=t,e.yMax=-t,this.calculateBoundingBox(this.itemsData,e),e.width=e.xMax<e.x?0:e.xMax-e.x,e.height=e.yMax<e.y?0:e.yMax-e.y,this.currentBoxContains(e))return;var n=!1;if(this.currentBBox.w!==e.width&&(this.currentBBox.w=e.width,this.shapeCont.setAttribute("width",e.width),n=!0),this.currentBBox.h!==e.height&&(this.currentBBox.h=e.height,this.shapeCont.setAttribute("height",e.height),n=!0),n||this.currentBBox.x!==e.x||this.currentBBox.y!==e.y){this.currentBBox.w=e.width,this.currentBBox.h=e.height,this.currentBBox.x=e.x,this.currentBBox.y=e.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var r=this.shapeCont.style,i="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";r.transform=i,r.webkitTransform=i}}},extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var e=createNS("g");this.maskedElement.appendChild(e),this.innerElem=e}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var e=this.textProperty.currentData;this.renderedLetters=createSizedArray(e.l?e.l.length:0);var t=this.innerElem.style,n=e.fc?this.buildColor(e.fc):"rgba(0,0,0,0)";t.fill=n,t.color=n,e.sc&&(t.stroke=this.buildColor(e.sc),t.strokeWidth=e.sw+"px");var r,i,a=this.globalData.fontManager.getFontByName(e.f);if(!this.globalData.fontManager.chars)if(t.fontSize=e.finalSize+"px",t.lineHeight=e.finalSize+"px",a.fClass)this.innerElem.className=a.fClass;else{t.fontFamily=a.fFamily;var s=e.fWeight,o=e.fStyle;t.fontStyle=o,t.fontWeight=s}var l,c,u,h=e.l;i=h.length;var f,p=this.mHelper,d="",m=0;for(r=0;r<i;r+=1){if(this.globalData.fontManager.chars?(this.textPaths[m]?l=this.textPaths[m]:((l=createNS("path")).setAttribute("stroke-linecap",lineCapEnum[1]),l.setAttribute("stroke-linejoin",lineJoinEnum[2]),l.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[m]?u=(c=this.textSpans[m]).children[0]:((c=createTag("div")).style.lineHeight=0,(u=createNS("svg")).appendChild(l),styleDiv(c)))):this.isMasked?l=this.textPaths[m]?this.textPaths[m]:createNS("text"):this.textSpans[m]?(c=this.textSpans[m],l=this.textPaths[m]):(styleDiv(c=createTag("span")),styleDiv(l=createTag("span")),c.appendChild(l)),this.globalData.fontManager.chars){var g,y=this.globalData.fontManager.getCharData(e.finalText[r],a.fStyle,this.globalData.fontManager.getFontByName(e.f).fFamily);if(g=y?y.data:null,p.reset(),g&&g.shapes&&g.shapes.length&&(f=g.shapes[0].it,p.scale(e.finalSize/100,e.finalSize/100),d=this.createPathShape(p,f),l.setAttribute("d",d)),this.isMasked)this.innerElem.appendChild(l);else{if(this.innerElem.appendChild(c),g&&g.shapes){document.body.appendChild(u);var v=u.getBBox();u.setAttribute("width",v.width+2),u.setAttribute("height",v.height+2),u.setAttribute("viewBox",v.x-1+" "+(v.y-1)+" "+(v.width+2)+" "+(v.height+2));var b=u.style,k="translate("+(v.x-1)+"px,"+(v.y-1)+"px)";b.transform=k,b.webkitTransform=k,h[r].yOffset=v.y-1}else u.setAttribute("width",1),u.setAttribute("height",1);c.appendChild(u)}}else if(l.textContent=h[r].val,l.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(l);else{this.innerElem.appendChild(c);var E=l.style,x="translate3d(0,"+-e.finalSize/1.2+"px,0)";E.transform=x,E.webkitTransform=x}this.isMasked?this.textSpans[m]=l:this.textSpans[m]=c,this.textSpans[m].style.display="block",this.textPaths[m]=l,m+=1}for(;m<this.textSpans.length;)this.textSpans[m].style.display="none",m+=1},HTextElement.prototype.renderInnerContent=function(){var e;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),e=this.svgElement.style;var t="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";e.transform=t,e.webkitTransform=t}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag){var n,r,i,a,s,o=0,l=this.textAnimator.renderedLetters,c=this.textProperty.currentData.l;for(r=c.length,n=0;n<r;n+=1)c[n].n?o+=1:(a=this.textSpans[n],s=this.textPaths[n],i=l[o],o+=1,i._mdf.m&&(this.isMasked?a.setAttribute("transform",i.m):(a.style.webkitTransform=i.m,a.style.transform=i.m)),a.style.opacity=i.o,i.sw&&i._mdf.sw&&s.setAttribute("stroke-width",i.sw),i.sc&&i._mdf.sc&&s.setAttribute("stroke",i.sc),i.fc&&i._mdf.fc&&(s.setAttribute("fill",i.fc),s.style.color=i.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var u=this.innerElem.getBBox();if(this.currentBBox.w!==u.width&&(this.currentBBox.w=u.width,this.svgElement.setAttribute("width",u.width)),this.currentBBox.h!==u.height&&(this.currentBBox.h=u.height,this.svgElement.setAttribute("height",u.height)),this.currentBBox.w!==u.width+2||this.currentBBox.h!==u.height+2||this.currentBBox.x!==u.x-1||this.currentBBox.y!==u.y-1){this.currentBBox.w=u.width+2,this.currentBBox.h=u.height+2,this.currentBBox.x=u.x-1,this.currentBBox.y=u.y-1,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),e=this.svgElement.style;var h="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";e.transform=h,e.webkitTransform=h}}}},extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var e,t,n,r,i=this.comp.threeDElements.length;for(e=0;e<i;e+=1)if("3d"===(t=this.comp.threeDElements[e]).type){n=t.perspectiveElem.style,r=t.container.style;var a=this.pe.v+"px",s="0px 0px 0px",o="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";n.perspective=a,n.webkitPerspective=a,r.transformOrigin=s,r.mozTransformOrigin=s,r.webkitTransformOrigin=s,n.transform=o,n.webkitTransform=o}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var e,t,n=this._isFirstFrame;if(this.hierarchy)for(t=this.hierarchy.length,e=0;e<t;e+=1)n=this.hierarchy[e].finalTransform.mProp._mdf||n;if(n||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(e=t=this.hierarchy.length-1;e>=0;e-=1){var r=this.hierarchy[e].finalTransform.mProp;this.mat.translate(-r.p.v[0],-r.p.v[1],r.p.v[2]),this.mat.rotateX(-r.or.v[0]).rotateY(-r.or.v[1]).rotateZ(r.or.v[2]),this.mat.rotateX(-r.rx.v).rotateY(-r.ry.v).rotateZ(r.rz.v),this.mat.scale(1/r.s.v[0],1/r.s.v[1],1/r.s.v[2]),this.mat.translate(r.a.v[0],r.a.v[1],r.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var i;i=this.p?[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var a=Math.sqrt(Math.pow(i[0],2)+Math.pow(i[1],2)+Math.pow(i[2],2)),s=[i[0]/a,i[1]/a,i[2]/a],o=Math.sqrt(s[2]*s[2]+s[0]*s[0]),l=Math.atan2(s[1],o),c=Math.atan2(s[0],-s[2]);this.mat.rotateY(c).rotateX(-l)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var u=!this._prevMat.equals(this.mat);if((u||this.pe._mdf)&&this.comp.threeDElements){var h,f,p;for(t=this.comp.threeDElements.length,e=0;e<t;e+=1)if("3d"===(h=this.comp.threeDElements[e]).type){if(u){var d=this.mat.toCSS();(p=h.container.style).transform=d,p.webkitTransform=d}this.pe._mdf&&((f=h.perspectiveElem.style).perspective=this.pe.v+"px",f.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(e){this.prepareProperties(e,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null},extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var e=this.globalData.getAssetsPath(this.assetData),t=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",e),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(t),t.crossOrigin="anonymous",t.src=e,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)},extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;)this.pendingElements.pop().checkParenting()},HybridRendererBase.prototype.appendElementInPos=function(e,t){var n=e.getBaseElement();if(n){var r=this.layers[t];if(r.ddd&&this.supports3d)this.addTo3dContainer(n,t);else if(this.threeDElements)this.addTo3dContainer(n,t);else{for(var i,a,s=0;s<t;)this.elements[s]&&!0!==this.elements[s]&&this.elements[s].getBaseElement&&(a=this.elements[s],i=(this.layers[s].ddd?this.getThreeDContainerByPos(s):a.getBaseElement())||i),s+=1;i?r.ddd&&this.supports3d||this.layerElement.insertBefore(n,i):r.ddd&&this.supports3d||this.layerElement.appendChild(n)}}},HybridRendererBase.prototype.createShape=function(e){return this.supports3d?new HShapeElement(e,this.globalData,this):new SVGShapeElement(e,this.globalData,this)},HybridRendererBase.prototype.createText=function(e){return this.supports3d?new HTextElement(e,this.globalData,this):new SVGTextLottieElement(e,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(e){return this.camera=new HCameraElement(e,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(e){return this.supports3d?new HImageElement(e,this.globalData,this):new IImageElement(e,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(e){return this.supports3d?new HSolidElement(e,this.globalData,this):new ISolidElement(e,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(e){for(var t=0,n=this.threeDElements.length;t<n;){if(this.threeDElements[t].startPos<=e&&this.threeDElements[t].endPos>=e)return this.threeDElements[t].perspectiveElem;t+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(e,t){var n,r,i=createTag("div");styleDiv(i);var a=createTag("div");if(styleDiv(a),"3d"===t){(n=i.style).width=this.globalData.compSize.w+"px",n.height=this.globalData.compSize.h+"px";var s="50% 50%";n.webkitTransformOrigin=s,n.mozTransformOrigin=s,n.transformOrigin=s;var o="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";(r=a.style).transform=o,r.webkitTransform=o}i.appendChild(a);var l={container:a,perspectiveElem:i,startPos:e,endPos:e,type:t};return this.threeDElements.push(l),l},HybridRendererBase.prototype.build3dContainers=function(){var e,t,n=this.layers.length,r="";for(e=0;e<n;e+=1)this.layers[e].ddd&&3!==this.layers[e].ty?("3d"!==r&&(r="3d",t=this.createThreeDContainer(e,"3d")),t.endPos=Math.max(t.endPos,e)):("2d"!==r&&(r="2d",t=this.createThreeDContainer(e,"2d")),t.endPos=Math.max(t.endPos,e));for(e=(n=this.threeDElements.length)-1;e>=0;e-=1)this.resizerElem.appendChild(this.threeDElements[e].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(e,t){for(var n=0,r=this.threeDElements.length;n<r;){if(t<=this.threeDElements[n].endPos){for(var i,a=this.threeDElements[n].startPos;a<t;)this.elements[a]&&this.elements[a].getBaseElement&&(i=this.elements[a].getBaseElement()),a+=1;i?this.threeDElements[n].container.insertBefore(e,i):this.threeDElements[n].container.appendChild(e);break}n+=1}},HybridRendererBase.prototype.configAnimation=function(e){var t=createTag("div"),n=this.animationItem.wrapper,r=t.style;r.width=e.w+"px",r.height=e.h+"px",this.resizerElem=t,styleDiv(t),r.transformStyle="flat",r.mozTransformStyle="flat",r.webkitTransformStyle="flat",this.renderConfig.className&&t.setAttribute("class",this.renderConfig.className),n.appendChild(t),r.overflow="hidden";var i=createNS("svg");i.setAttribute("width","1"),i.setAttribute("height","1"),styleDiv(i),this.resizerElem.appendChild(i);var a=createNS("defs");i.appendChild(a),this.data=e,this.setupGlobalData(e,i),this.globalData.defs=a,this.layers=e.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){var e;this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var t=this.layers?this.layers.length:0;for(e=0;e<t;e+=1)this.elements[e].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var e,t,n,r,i=this.animationItem.wrapper.offsetWidth,a=this.animationItem.wrapper.offsetHeight,s=i/a;this.globalData.compSize.w/this.globalData.compSize.h>s?(e=i/this.globalData.compSize.w,t=i/this.globalData.compSize.w,n=0,r=(a-this.globalData.compSize.h*(i/this.globalData.compSize.w))/2):(e=a/this.globalData.compSize.h,t=a/this.globalData.compSize.h,n=(i-this.globalData.compSize.w*(a/this.globalData.compSize.h))/2,r=0);var o=this.resizerElem.style;o.webkitTransform="matrix3d("+e+",0,0,0,0,"+t+",0,0,0,0,1,0,"+n+","+r+",0,1)",o.transform=o.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var e,t=this.globalData.compSize.w,n=this.globalData.compSize.h,r=this.threeDElements.length;for(e=0;e<r;e+=1){var i=this.threeDElements[e].perspectiveElem.style;i.webkitPerspective=Math.sqrt(Math.pow(t,2)+Math.pow(n,2))+"px",i.perspective=i.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(e){var t,n=e.length,r=createTag("div");for(t=0;t<n;t+=1)if(e[t].xt){var i=this.createComp(e[t],r,this.globalData.comp,null);i.initExpressions(),this.globalData.projectInterface.registerComposition(i)}},extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(e,t){for(var n,r=0;r<t;)this.elements[r]&&this.elements[r].getBaseElement&&(n=this.elements[r].getBaseElement()),r+=1;n?this.layerElement.insertBefore(e,n):this.layerElement.appendChild(e)},HCompElement.prototype.createComp=function(e){return this.supports3d?new HCompElement(e,this.globalData,this):new SVGCompElement(e,this.globalData,this)},extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(e){return this.supports3d?new HCompElement(e,this.globalData,this):new SVGCompElement(e,this.globalData,this)};var Expressions={initExpressions:function(e){var t=0,n=[];e.renderer.compInterface=CompExpressionInterface(e.renderer),e.renderer.globalData.projectInterface.registerComposition(e.renderer),e.renderer.globalData.pushExpression=function(){t+=1},e.renderer.globalData.popExpression=function(){0==(t-=1)&&function(){var e,t=n.length;for(e=0;e<t;e+=1)n[e].release();n.length=0}()},e.renderer.globalData.registerExpressionProperty=function(e){-1===n.indexOf(e)&&n.push(e)}}};function _typeof$1(e){return _typeof$1="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof$1(e)}function seedRandom(e,t){var n=this,r=256,i=t.pow(r,6),a=t.pow(2,52),s=2*a,o=255;function l(e){var t,n=e.length,i=this,a=0,s=i.i=i.j=0,l=i.S=[];for(n||(e=[n++]);a<r;)l[a]=a++;for(a=0;a<r;a++)l[a]=l[s=o&s+e[a%n]+(t=l[a])],l[s]=t;i.g=function(e){for(var t,n=0,a=i.i,s=i.j,l=i.S;e--;)t=l[a=o&a+1],n=n*r+l[o&(l[a]=l[s=o&s+t])+(l[s]=t)];return i.i=a,i.j=s,n}}function c(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function u(e,t){var n,r=[],i=_typeof$1(e);if(t&&"object"==i)for(n in e)try{r.push(u(e[n],t-1))}catch(e){}return r.length?r:"string"==i?e:e+"\0"}function h(e,t){for(var n,r=e+"",i=0;i<r.length;)t[o&i]=o&(n^=19*t[o&i])+r.charCodeAt(i++);return f(t)}function f(e){return String.fromCharCode.apply(0,e)}t.seedrandom=function(o,p,d){var m=[],g=h(u((p=!0===p?{entropy:!0}:p||{}).entropy?[o,f(e)]:null===o?function(){try{var t=new Uint8Array(r);return(n.crypto||n.msCrypto).getRandomValues(t),f(t)}catch(t){var i=n.navigator,a=i&&i.plugins;return[+new Date,n,a,n.screen,f(e)]}}():o,3),m),y=new l(m),v=function(){for(var e=y.g(6),t=i,n=0;e<a;)e=(e+n)*r,t*=r,n=y.g(1);for(;e>=s;)e/=2,t/=2,n>>>=1;return(e+n)/t};return v.int32=function(){return 0|y.g(4)},v.quick=function(){return y.g(4)/4294967296},v.double=v,h(f(y.S),e),(p.pass||d||function(e,n,r,i){return i&&(i.S&&c(i,y),e.state=function(){return c(y,{})}),r?(t.random=e,n):e})(v,g,"global"in p?p.global:this==t,p.state)},h(t.random(),e)}function initialize$2(e){seedRandom([],e)}var propTypes={SHAPE:"shape"};function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null;function $bm_isInstanceOfArray(e){return e.constructor===Array||e.constructor===Float32Array}function isNumerable(e,t){return"number"===e||"boolean"===e||"string"===e||t instanceof Number}function $bm_neg(e){var t=_typeof(e);if("number"===t||"boolean"===t||e instanceof Number)return-e;if($bm_isInstanceOfArray(e)){var n,r=e.length,i=[];for(n=0;n<r;n+=1)i[n]=-e[n];return i}return e.propType?e.v:-e}initialize$2(BMMath);var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(e,t){var n=_typeof(e),r=_typeof(t);if("string"===n||"string"===r)return e+t;if(isNumerable(n,e)&&isNumerable(r,t))return e+t;if($bm_isInstanceOfArray(e)&&isNumerable(r,t))return(e=e.slice(0))[0]+=t,e;if(isNumerable(n,e)&&$bm_isInstanceOfArray(t))return(t=t.slice(0))[0]=e+t[0],t;if($bm_isInstanceOfArray(e)&&$bm_isInstanceOfArray(t)){for(var i=0,a=e.length,s=t.length,o=[];i<a||i<s;)("number"==typeof e[i]||e[i]instanceof Number)&&("number"==typeof t[i]||t[i]instanceof Number)?o[i]=e[i]+t[i]:o[i]=void 0===t[i]?e[i]:e[i]||t[i],i+=1;return o}return 0}var add=sum;function sub(e,t){var n=_typeof(e),r=_typeof(t);if(isNumerable(n,e)&&isNumerable(r,t))return"string"===n&&(e=parseInt(e,10)),"string"===r&&(t=parseInt(t,10)),e-t;if($bm_isInstanceOfArray(e)&&isNumerable(r,t))return(e=e.slice(0))[0]-=t,e;if(isNumerable(n,e)&&$bm_isInstanceOfArray(t))return(t=t.slice(0))[0]=e-t[0],t;if($bm_isInstanceOfArray(e)&&$bm_isInstanceOfArray(t)){for(var i=0,a=e.length,s=t.length,o=[];i<a||i<s;)("number"==typeof e[i]||e[i]instanceof Number)&&("number"==typeof t[i]||t[i]instanceof Number)?o[i]=e[i]-t[i]:o[i]=void 0===t[i]?e[i]:e[i]||t[i],i+=1;return o}return 0}function mul(e,t){var n,r,i,a=_typeof(e),s=_typeof(t);if(isNumerable(a,e)&&isNumerable(s,t))return e*t;if($bm_isInstanceOfArray(e)&&isNumerable(s,t)){for(i=e.length,n=createTypedArray("float32",i),r=0;r<i;r+=1)n[r]=e[r]*t;return n}if(isNumerable(a,e)&&$bm_isInstanceOfArray(t)){for(i=t.length,n=createTypedArray("float32",i),r=0;r<i;r+=1)n[r]=e*t[r];return n}return 0}function div(e,t){var n,r,i,a=_typeof(e),s=_typeof(t);if(isNumerable(a,e)&&isNumerable(s,t))return e/t;if($bm_isInstanceOfArray(e)&&isNumerable(s,t)){for(i=e.length,n=createTypedArray("float32",i),r=0;r<i;r+=1)n[r]=e[r]/t;return n}if(isNumerable(a,e)&&$bm_isInstanceOfArray(t)){for(i=t.length,n=createTypedArray("float32",i),r=0;r<i;r+=1)n[r]=e/t[r];return n}return 0}function mod(e,t){return"string"==typeof e&&(e=parseInt(e,10)),"string"==typeof t&&(t=parseInt(t,10)),e%t}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(e,t,n){if(t>n){var r=n;n=t,t=r}return Math.min(Math.max(e,t),n)}function radiansToDegrees(e){return e/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(e){return e*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(e,t){if("number"==typeof e||e instanceof Number)return t=t||0,Math.abs(e-t);var n;t||(t=helperLengthArray);var r=Math.min(e.length,t.length),i=0;for(n=0;n<r;n+=1)i+=Math.pow(t[n]-e[n],2);return Math.sqrt(i)}function normalize(e){return div(e,length(e))}function rgbToHsl(e){var t,n,r=e[0],i=e[1],a=e[2],s=Math.max(r,i,a),o=Math.min(r,i,a),l=(s+o)/2;if(s===o)t=0,n=0;else{var c=s-o;switch(n=l>.5?c/(2-s-o):c/(s+o),s){case r:t=(i-a)/c+(i<a?6:0);break;case i:t=(a-r)/c+2;break;case a:t=(r-i)/c+4}t/=6}return[t,n,l,e[3]]}function hue2rgb(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function hslToRgb(e){var t,n,r,i=e[0],a=e[1],s=e[2];if(0===a)t=s,r=s,n=s;else{var o=s<.5?s*(1+a):s+a-s*a,l=2*s-o;t=hue2rgb(l,o,i+1/3),n=hue2rgb(l,o,i),r=hue2rgb(l,o,i-1/3)}return[t,n,r,e[3]]}function linear(e,t,n,r,i){if(void 0!==r&&void 0!==i||(r=t,i=n,t=0,n=1),n<t){var a=n;n=t,t=a}if(e<=t)return r;if(e>=n)return i;var s,o=n===t?0:(e-t)/(n-t);if(!r.length)return r+(i-r)*o;var l=r.length,c=createTypedArray("float32",l);for(s=0;s<l;s+=1)c[s]=r[s]+(i[s]-r[s])*o;return c}function random(e,t){if(void 0===t&&(void 0===e?(e=0,t=1):(t=e,e=void 0)),t.length){var n,r=t.length;e||(e=createTypedArray("float32",r));var i=createTypedArray("float32",r),a=BMMath.random();for(n=0;n<r;n+=1)i[n]=e[n]+a*(t[n]-e[n]);return i}return void 0===e&&(e=0),e+BMMath.random()*(t-e)}function createPath(e,t,n,r){var i,a=e.length,s=shapePool.newElement();s.setPathData(!!r,a);var o,l,c=[0,0];for(i=0;i<a;i+=1)o=t&&t[i]?t[i]:c,l=n&&n[i]?n[i]:c,s.setTripleAt(e[i][0],e[i][1],l[0]+e[i][0],l[1]+e[i][1],o[0]+e[i][0],o[1]+e[i][1],i,!0);return s}function initiateExpression(elem,data,property){var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=-1!==val.indexOf("random"),elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||!0!==this.data.hd,wiggle=function(e,t){var n,r,i=this.pv.length?this.pv.length:1,a=createTypedArray("float32",i),s=Math.floor(5*time);for(n=0,r=0;n<s;){for(r=0;r<i;r+=1)a[r]+=-t+2*t*BMMath.random();n+=1}var o=5*time,l=o-Math.floor(o),c=createTypedArray("float32",i);if(i>1){for(r=0;r<i;r+=1)c[r]=this.pv[r]+a[r]+(-t+2*t*BMMath.random())*l;return c}return this.pv+a[0]+(-t+2*t*BMMath.random())*l}.bind(this);function loopInDuration(e,t){return loopIn(e,t,!0)}function loopOutDuration(e,t){return loopOut(e,t,!0)}thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty)),this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface),time,velocity,value,text,textIndex,textTotal,selectorValue;function lookAt(e,t){var n=[t[0]-e[0],t[1]-e[1],t[2]-e[2]],r=Math.atan2(n[0],Math.sqrt(n[1]*n[1]+n[2]*n[2]))/degToRads;return[-Math.atan2(n[1],n[2])/degToRads,r,0]}function easeOut(e,t,n,r,i){return applyEase(easeOutBez,e,t,n,r,i)}function easeIn(e,t,n,r,i){return applyEase(easeInBez,e,t,n,r,i)}function ease(e,t,n,r,i){return applyEase(easeInOutBez,e,t,n,r,i)}function applyEase(e,t,n,r,i,a){void 0===i?(i=n,a=r):t=(t-n)/(r-n),t>1?t=1:t<0&&(t=0);var s=e(t);if($bm_isInstanceOfArray(i)){var o,l=i.length,c=createTypedArray("float32",l);for(o=0;o<l;o+=1)c[o]=(a[o]-i[o])*s+i[o];return c}return(a-i)*s+i}function nearestKey(e){var t,n,r,i=data.k.length;if(data.k.length&&"number"!=typeof data.k[0])if(n=-1,(e*=elem.comp.globalData.frameRate)<data.k[0].t)n=1,r=data.k[0].t;else{for(t=0;t<i-1;t+=1){if(e===data.k[t].t){n=t+1,r=data.k[t].t;break}if(e>data.k[t].t&&e<data.k[t+1].t){e-data.k[t].t>data.k[t+1].t-e?(n=t+2,r=data.k[t+1].t):(n=t+1,r=data.k[t].t);break}}-1===n&&(n=t+1,r=data.k[t].t)}else n=0,r=0;var a={};return a.index=n,a.time=r/elem.comp.globalData.frameRate,a}function key(e){var t,n,r;if(!data.k.length||"number"==typeof data.k[0])throw new Error("The property has no keyframe at index "+e);e-=1,t={time:data.k[e].t/elem.comp.globalData.frameRate,value:[]};var i=Object.prototype.hasOwnProperty.call(data.k[e],"s")?data.k[e].s:data.k[e-1].e;for(r=i.length,n=0;n<r;n+=1)t[n]=i[n],t.value[n]=i[n];return t}function framesToTime(e,t){return t||(t=elem.comp.globalData.frameRate),e/t}function timeToFrames(e,t){return e||0===e||(e=time),t||(t=elem.comp.globalData.frameRate),e*t}function seedRandom(e){BMMath.seedrandom(randSeed+e)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(e,t){return"string"==typeof value?void 0===t?value.substring(e):value.substring(e,t):""}function substr(e,t){return"string"==typeof value?void 0===t?value.substr(e):value.substr(e,t):""}function posterizeTime(e){time=0===e?0:Math.floor(time*e)/e,value=valueAtTime(time)}var index=elem.data.ind,hasParent=!(!elem.hierarchy||!elem.hierarchy.length),parent,randSeed=Math.floor(1e6*Math.random()),globalData=elem.globalData;function executeExpression(e){return value=e,this.frameExpressionId===elem.globalData.frameId&&"textSelector"!==this.propType?value:("textSelector"===this.propType&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),4!==elemType||content||(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),(hasParent=!(!elem.hierarchy||!elem.hierarchy.length))&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath],ob}(),expressionHelpers={searchExpressions:function(e,t,n){t.x&&(n.k=!0,n.x=!0,n.initiateExpression=ExpressionManager.initiateExpression,n.effectsSequence.push(n.initiateExpression(e,t,n).bind(n)))},getSpeedAtTime:function(e){var t=this.getValueAtTime(e),n=this.getValueAtTime(e+-.01),r=0;if(t.length){var i;for(i=0;i<t.length;i+=1)r+=Math.pow(n[i]-t[i],2);r=100*Math.sqrt(r)}else r=0;return r},getVelocityAtTime:function(e){if(void 0!==this.vel)return this.vel;var t,n,r=-.001,i=this.getValueAtTime(e),a=this.getValueAtTime(e+r);if(i.length)for(t=createTypedArray("float32",i.length),n=0;n<i.length;n+=1)t[n]=(a[n]-i[n])/r;else t=(a-i)/r;return t},getValueAtTime:function(e){return e*=this.elem.globalData.frameRate,(e-=this.offsetTime)!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<e?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(e,this._cachingAtTime),this._cachingAtTime.lastFrame=e),this._cachingAtTime.value},getStaticValueAtTime:function(){return this.pv},setGroupProperty:function(e){this.propertyGroup=e}};function addPropertyDecorator(){function e(e,t,n){if(!this.k||!this.keyframes)return this.pv;e=e?e.toLowerCase():"";var r,i,a,s,o,l=this.comp.renderedFrame,c=this.keyframes,u=c[c.length-1].t;if(l<=u)return this.pv;if(n?i=u-(r=t?Math.abs(u-this.elem.comp.globalData.frameRate*t):Math.max(0,u-this.elem.data.ip)):((!t||t>c.length-1)&&(t=c.length-1),r=u-(i=c[c.length-1-t].t)),"pingpong"===e){if(Math.floor((l-i)/r)%2!=0)return this.getValueAtTime((r-(l-i)%r+i)/this.comp.globalData.frameRate,0)}else{if("offset"===e){var h=this.getValueAtTime(i/this.comp.globalData.frameRate,0),f=this.getValueAtTime(u/this.comp.globalData.frameRate,0),p=this.getValueAtTime(((l-i)%r+i)/this.comp.globalData.frameRate,0),d=Math.floor((l-i)/r);if(this.pv.length){for(s=(o=new Array(h.length)).length,a=0;a<s;a+=1)o[a]=(f[a]-h[a])*d+p[a];return o}return(f-h)*d+p}if("continue"===e){var m=this.getValueAtTime(u/this.comp.globalData.frameRate,0),g=this.getValueAtTime((u-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(s=(o=new Array(m.length)).length,a=0;a<s;a+=1)o[a]=m[a]+(m[a]-g[a])*((l-u)/this.comp.globalData.frameRate)/5e-4;return o}return m+(l-u)/.001*(m-g)}}return this.getValueAtTime(((l-i)%r+i)/this.comp.globalData.frameRate,0)}function t(e,t,n){if(!this.k)return this.pv;e=e?e.toLowerCase():"";var r,i,a,s,o,l=this.comp.renderedFrame,c=this.keyframes,u=c[0].t;if(l>=u)return this.pv;if(n?i=u+(r=t?Math.abs(this.elem.comp.globalData.frameRate*t):Math.max(0,this.elem.data.op-u)):((!t||t>c.length-1)&&(t=c.length-1),r=(i=c[t].t)-u),"pingpong"===e){if(Math.floor((u-l)/r)%2==0)return this.getValueAtTime(((u-l)%r+u)/this.comp.globalData.frameRate,0)}else{if("offset"===e){var h=this.getValueAtTime(u/this.comp.globalData.frameRate,0),f=this.getValueAtTime(i/this.comp.globalData.frameRate,0),p=this.getValueAtTime((r-(u-l)%r+u)/this.comp.globalData.frameRate,0),d=Math.floor((u-l)/r)+1;if(this.pv.length){for(s=(o=new Array(h.length)).length,a=0;a<s;a+=1)o[a]=p[a]-(f[a]-h[a])*d;return o}return p-(f-h)*d}if("continue"===e){var m=this.getValueAtTime(u/this.comp.globalData.frameRate,0),g=this.getValueAtTime((u+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(s=(o=new Array(m.length)).length,a=0;a<s;a+=1)o[a]=m[a]+(m[a]-g[a])*(u-l)/.001;return o}return m+(m-g)*(u-l)/.001}}return this.getValueAtTime((r-((u-l)%r+u))/this.comp.globalData.frameRate,0)}function n(e,t){if(!this.k)return this.pv;if(e=.5*(e||.4),(t=Math.floor(t||5))<=1)return this.pv;var n,r,i=this.comp.renderedFrame/this.comp.globalData.frameRate,a=i-e,s=t>1?(i+e-a)/(t-1):1,o=0,l=0;for(n=this.pv.length?createTypedArray("float32",this.pv.length):0;o<t;){if(r=this.getValueAtTime(a+o*s),this.pv.length)for(l=0;l<this.pv.length;l+=1)n[l]+=r[l];else n+=r;o+=1}if(this.pv.length)for(l=0;l<this.pv.length;l+=1)n[l]/=t;else n/=t;return n}function r(e){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var t=this._transformCachingAtTime.v;if(t.cloneFromProps(this.pre.props),this.appliedTransformations<1){var n=this.a.getValueAtTime(e);t.translate(-n[0]*this.a.mult,-n[1]*this.a.mult,n[2]*this.a.mult)}if(this.appliedTransformations<2){var r=this.s.getValueAtTime(e);t.scale(r[0]*this.s.mult,r[1]*this.s.mult,r[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var i=this.sk.getValueAtTime(e),a=this.sa.getValueAtTime(e);t.skewFromAxis(-i*this.sk.mult,a*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var s=this.r.getValueAtTime(e);t.rotate(-s*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var o=this.rz.getValueAtTime(e),l=this.ry.getValueAtTime(e),c=this.rx.getValueAtTime(e),u=this.or.getValueAtTime(e);t.rotateZ(-o*this.rz.mult).rotateY(l*this.ry.mult).rotateX(c*this.rx.mult).rotateZ(-u[2]*this.or.mult).rotateY(u[1]*this.or.mult).rotateX(u[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var h=this.px.getValueAtTime(e),f=this.py.getValueAtTime(e);if(this.data.p.z){var p=this.pz.getValueAtTime(e);t.translate(h*this.px.mult,f*this.py.mult,-p*this.pz.mult)}else t.translate(h*this.px.mult,f*this.py.mult,0)}else{var d=this.p.getValueAtTime(e);t.translate(d[0]*this.p.mult,d[1]*this.p.mult,-d[2]*this.p.mult)}return t}function i(){return this.v.clone(new Matrix)}var a=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(e,t,n){var s=a(e,t,n);return s.dynamicProperties.length?s.getValueAtTime=r.bind(s):s.getValueAtTime=i.bind(s),s.setGroupProperty=expressionHelpers.setGroupProperty,s};var s=PropertyFactory.getProp;PropertyFactory.getProp=function(r,i,a,o,l){var c=s(r,i,a,o,l);c.kf?c.getValueAtTime=expressionHelpers.getValueAtTime.bind(c):c.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(c),c.setGroupProperty=expressionHelpers.setGroupProperty,c.loopOut=e,c.loopIn=t,c.smooth=n,c.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(c),c.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(c),c.numKeys=1===i.a?i.k.length:0,c.propertyIndex=i.ix;var u=0;return 0!==a&&(u=createTypedArray("float32",1===i.a?i.k[0].s.length:i.k.length)),c._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:u},expressionHelpers.searchExpressions(r,i,c),c.k&&l.addDynamicProperty(c),c};var o=ShapePropertyFactory.getConstructorFunction(),l=ShapePropertyFactory.getKeyframedConstructorFunction();function c(){}c.prototype={vertices:function(e,t){this.k&&this.getValue();var n,r=this.v;void 0!==t&&(r=this.getValueAtTime(t,0));var i=r._length,a=r[e],s=r.v,o=createSizedArray(i);for(n=0;n<i;n+=1)o[n]="i"===e||"o"===e?[a[n][0]-s[n][0],a[n][1]-s[n][1]]:[a[n][0],a[n][1]];return o},points:function(e){return this.vertices("v",e)},inTangents:function(e){return this.vertices("i",e)},outTangents:function(e){return this.vertices("o",e)},isClosed:function(){return this.v.c},pointOnPath:function(e,t){var n=this.v;void 0!==t&&(n=this.getValueAtTime(t,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(n));for(var r,i=this._segmentsLength,a=i.lengths,s=i.totalLength*e,o=0,l=a.length,c=0;o<l;){if(c+a[o].addedLength>s){var u=o,h=n.c&&o===l-1?0:o+1,f=(s-c)/a[o].addedLength;r=bez.getPointInSegment(n.v[u],n.v[h],n.o[u],n.i[h],f,a[o]);break}c+=a[o].addedLength,o+=1}return r||(r=n.c?[n.v[0][0],n.v[0][1]]:[n.v[n._length-1][0],n.v[n._length-1][1]]),r},vectorOnPath:function(e,t,n){1==e?e=this.v.c:0==e&&(e=.999);var r=this.pointOnPath(e,t),i=this.pointOnPath(e+.001,t),a=i[0]-r[0],s=i[1]-r[1],o=Math.sqrt(Math.pow(a,2)+Math.pow(s,2));return 0===o?[0,0]:"tangent"===n?[a/o,s/o]:[-s/o,a/o]},tangentOnPath:function(e,t){return this.vectorOnPath(e,t,"tangent")},normalOnPath:function(e,t){return this.vectorOnPath(e,t,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([c],o),extendPrototype([c],l),l.prototype.getValueAtTime=function(e){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),e*=this.elem.globalData.frameRate,(e-=this.offsetTime)!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<e?this._caching.lastIndex:0,this._cachingAtTime.lastTime=e,this.interpolateShape(e,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue},l.prototype.initiateExpression=ExpressionManager.initiateExpression;var u=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(e,t,n,r,i){var a=u(e,t,n,r,i);return a.propertyIndex=t.ix,a.lock=!1,3===n?expressionHelpers.searchExpressions(e,t.pt,a):4===n&&expressionHelpers.searchExpressions(e,t.ks,a),a.k&&e.addDynamicProperty(a),a}}function initialize$1(){addPropertyDecorator()}function addDecorator(){TextProperty.prototype.getExpressionValue=function(e,t){var n=this.calculateExpression(t);if(e.t!==n){var r={};return this.copyData(r,e),r.t=n.toString(),r.__complete=!1,r}return e},TextProperty.prototype.searchProperty=function(){var e=this.searchKeyframes(),t=this.searchExpressions();return this.kf=e||t,this.kf},TextProperty.prototype.searchExpressions=function(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}}function initialize(){addDecorator()}function SVGComposableEffect(){}function SVGTintFilter(e,t,n,r,i){this.filterManager=t;var a=createNS("feColorMatrix");a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","linearRGB"),a.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),a.setAttribute("result",r+"_tint_1"),e.appendChild(a),(a=createNS("feColorMatrix")).setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),a.setAttribute("result",r+"_tint_2"),e.appendChild(a),this.matrixFilter=a;var s=this.createMergeNode(r,[i,r+"_tint_1",r+"_tint_2"]);e.appendChild(s)}function SVGFillFilter(e,t,n,r){this.filterManager=t;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),i.setAttribute("result",r),e.appendChild(i),this.matrixFilter=i}function SVGStrokeEffect(e,t,n){this.initialized=!1,this.filterManager=t,this.elem=n,this.paths=[]}function SVGTritoneFilter(e,t,n,r){this.filterManager=t;var i=createNS("feColorMatrix");i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","linearRGB"),i.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),e.appendChild(i);var a=createNS("feComponentTransfer");a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",r),this.matrixFilter=a;var s=createNS("feFuncR");s.setAttribute("type","table"),a.appendChild(s),this.feFuncR=s;var o=createNS("feFuncG");o.setAttribute("type","table"),a.appendChild(o),this.feFuncG=o;var l=createNS("feFuncB");l.setAttribute("type","table"),a.appendChild(l),this.feFuncB=l,e.appendChild(a)}function SVGProLevelsFilter(e,t,n,r){this.filterManager=t;var i=this.filterManager.effectElements,a=createNS("feComponentTransfer");(i[10].p.k||0!==i[10].p.v||i[11].p.k||1!==i[11].p.v||i[12].p.k||1!==i[12].p.v||i[13].p.k||0!==i[13].p.v||i[14].p.k||1!==i[14].p.v)&&(this.feFuncR=this.createFeFunc("feFuncR",a)),(i[17].p.k||0!==i[17].p.v||i[18].p.k||1!==i[18].p.v||i[19].p.k||1!==i[19].p.v||i[20].p.k||0!==i[20].p.v||i[21].p.k||1!==i[21].p.v)&&(this.feFuncG=this.createFeFunc("feFuncG",a)),(i[24].p.k||0!==i[24].p.v||i[25].p.k||1!==i[25].p.v||i[26].p.k||1!==i[26].p.v||i[27].p.k||0!==i[27].p.v||i[28].p.k||1!==i[28].p.v)&&(this.feFuncB=this.createFeFunc("feFuncB",a)),(i[31].p.k||0!==i[31].p.v||i[32].p.k||1!==i[32].p.v||i[33].p.k||1!==i[33].p.v||i[34].p.k||0!==i[34].p.v||i[35].p.k||1!==i[35].p.v)&&(this.feFuncA=this.createFeFunc("feFuncA",a)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(a.setAttribute("color-interpolation-filters","sRGB"),e.appendChild(a)),(i[3].p.k||0!==i[3].p.v||i[4].p.k||1!==i[4].p.v||i[5].p.k||1!==i[5].p.v||i[6].p.k||0!==i[6].p.v||i[7].p.k||1!==i[7].p.v)&&((a=createNS("feComponentTransfer")).setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",r),e.appendChild(a),this.feFuncRComposed=this.createFeFunc("feFuncR",a),this.feFuncGComposed=this.createFeFunc("feFuncG",a),this.feFuncBComposed=this.createFeFunc("feFuncB",a))}function SVGDropShadowEffect(e,t,n,r,i){var a=t.container.globalData.renderConfig.filterSize,s=t.data.fs||a;e.setAttribute("x",s.x||a.x),e.setAttribute("y",s.y||a.y),e.setAttribute("width",s.width||a.width),e.setAttribute("height",s.height||a.height),this.filterManager=t;var o=createNS("feGaussianBlur");o.setAttribute("in","SourceAlpha"),o.setAttribute("result",r+"_drop_shadow_1"),o.setAttribute("stdDeviation","0"),this.feGaussianBlur=o,e.appendChild(o);var l=createNS("feOffset");l.setAttribute("dx","25"),l.setAttribute("dy","0"),l.setAttribute("in",r+"_drop_shadow_1"),l.setAttribute("result",r+"_drop_shadow_2"),this.feOffset=l,e.appendChild(l);var c=createNS("feFlood");c.setAttribute("flood-color","#00ff00"),c.setAttribute("flood-opacity","1"),c.setAttribute("result",r+"_drop_shadow_3"),this.feFlood=c,e.appendChild(c);var u=createNS("feComposite");u.setAttribute("in",r+"_drop_shadow_3"),u.setAttribute("in2",r+"_drop_shadow_2"),u.setAttribute("operator","in"),u.setAttribute("result",r+"_drop_shadow_4"),e.appendChild(u);var h=this.createMergeNode(r,[r+"_drop_shadow_4",i]);e.appendChild(h)}SVGComposableEffect.prototype={createMergeNode:function(e,t){var n,r,i=createNS("feMerge");for(i.setAttribute("result",e),r=0;r<t.length;r+=1)(n=createNS("feMergeNode")).setAttribute("in",t[r]),i.appendChild(n),i.appendChild(n);return i}},extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=this.filterManager.effectElements[0].p.v,n=this.filterManager.effectElements[1].p.v,r=this.filterManager.effectElements[2].p.v/100;this.matrixFilter.setAttribute("values",n[0]-t[0]+" 0 0 0 "+t[0]+" "+(n[1]-t[1])+" 0 0 0 "+t[1]+" "+(n[2]-t[2])+" 0 0 0 "+t[2]+" 0 0 0 "+r+" 0")}},SVGFillFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=this.filterManager.effectElements[2].p.v,n=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+t[0]+" 0 0 0 0 "+t[1]+" 0 0 0 0 "+t[2]+" 0 0 0 "+n+" 0")}},SVGStrokeEffect.prototype.initialize=function(){var e,t,n,r,i=this.elem.layerElement.children||this.elem.layerElement.childNodes;for(1===this.filterManager.effectElements[1].p.v?(r=this.elem.maskManager.masksProperties.length,n=0):r=1+(n=this.filterManager.effectElements[0].p.v-1),(t=createNS("g")).setAttribute("fill","none"),t.setAttribute("stroke-linecap","round"),t.setAttribute("stroke-dashoffset",1);n<r;n+=1)e=createNS("path"),t.appendChild(e),this.paths.push({p:e,m:n});if(3===this.filterManager.effectElements[10].p.v){var a=createNS("mask"),s=createElementID();a.setAttribute("id",s),a.setAttribute("mask-type","alpha"),a.appendChild(t),this.elem.globalData.defs.appendChild(a);var o=createNS("g");for(o.setAttribute("mask","url("+getLocationHref()+"#"+s+")");i[0];)o.appendChild(i[0]);this.elem.layerElement.appendChild(o),this.masker=a,t.setAttribute("stroke","#fff")}else if(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v){if(2===this.filterManager.effectElements[10].p.v)for(i=this.elem.layerElement.children||this.elem.layerElement.childNodes;i.length;)this.elem.layerElement.removeChild(i[0]);this.elem.layerElement.appendChild(t),this.elem.layerElement.removeAttribute("mask"),t.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=t},SVGStrokeEffect.prototype.renderFrame=function(e){var t;this.initialized||this.initialize();var n,r,i=this.paths.length;for(t=0;t<i;t+=1)if(-1!==this.paths[t].m&&(n=this.elem.maskManager.viewData[this.paths[t].m],r=this.paths[t].p,(e||this.filterManager._mdf||n.prop._mdf)&&r.setAttribute("d",n.lastPath),e||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||n.prop._mdf)){var a;if(0!==this.filterManager.effectElements[7].p.v||100!==this.filterManager.effectElements[8].p.v){var s=.01*Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),o=.01*Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v),l=r.getTotalLength();a="0 0 0 "+l*s+" ";var c,u=l*(o-s),h=1+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01,f=Math.floor(u/h);for(c=0;c<f;c+=1)a+="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01+" ";a+="0 "+10*l+" 0 0"}else a="1 "+2*this.filterManager.effectElements[4].p.v*this.filterManager.effectElements[9].p.v*.01;r.setAttribute("stroke-dasharray",a)}if((e||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",2*this.filterManager.effectElements[4].p.v),(e||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(1===this.filterManager.effectElements[10].p.v||2===this.filterManager.effectElements[10].p.v)&&(e||this.filterManager.effectElements[3].p._mdf)){var p=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(255*p[0])+","+bmFloor(255*p[1])+","+bmFloor(255*p[2])+")")}},SVGTritoneFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=this.filterManager.effectElements[0].p.v,n=this.filterManager.effectElements[1].p.v,r=this.filterManager.effectElements[2].p.v,i=r[0]+" "+n[0]+" "+t[0],a=r[1]+" "+n[1]+" "+t[1],s=r[2]+" "+n[2]+" "+t[2];this.feFuncR.setAttribute("tableValues",i),this.feFuncG.setAttribute("tableValues",a),this.feFuncB.setAttribute("tableValues",s)}},SVGProLevelsFilter.prototype.createFeFunc=function(e,t){var n=createNS(e);return n.setAttribute("type","table"),t.appendChild(n),n},SVGProLevelsFilter.prototype.getTableValue=function(e,t,n,r,i){for(var a,s,o=0,l=Math.min(e,t),c=Math.max(e,t),u=Array.call(null,{length:256}),h=0,f=i-r,p=t-e;o<=256;)s=(a=o/256)<=l?p<0?i:r:a>=c?p<0?r:i:r+f*Math.pow((a-e)/p,1/n),u[h]=s,h+=1,o+=256/255;return u.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t,n=this.filterManager.effectElements;this.feFuncRComposed&&(e||n[3].p._mdf||n[4].p._mdf||n[5].p._mdf||n[6].p._mdf||n[7].p._mdf)&&(t=this.getTableValue(n[3].p.v,n[4].p.v,n[5].p.v,n[6].p.v,n[7].p.v),this.feFuncRComposed.setAttribute("tableValues",t),this.feFuncGComposed.setAttribute("tableValues",t),this.feFuncBComposed.setAttribute("tableValues",t)),this.feFuncR&&(e||n[10].p._mdf||n[11].p._mdf||n[12].p._mdf||n[13].p._mdf||n[14].p._mdf)&&(t=this.getTableValue(n[10].p.v,n[11].p.v,n[12].p.v,n[13].p.v,n[14].p.v),this.feFuncR.setAttribute("tableValues",t)),this.feFuncG&&(e||n[17].p._mdf||n[18].p._mdf||n[19].p._mdf||n[20].p._mdf||n[21].p._mdf)&&(t=this.getTableValue(n[17].p.v,n[18].p.v,n[19].p.v,n[20].p.v,n[21].p.v),this.feFuncG.setAttribute("tableValues",t)),this.feFuncB&&(e||n[24].p._mdf||n[25].p._mdf||n[26].p._mdf||n[27].p._mdf||n[28].p._mdf)&&(t=this.getTableValue(n[24].p.v,n[25].p.v,n[26].p.v,n[27].p.v,n[28].p.v),this.feFuncB.setAttribute("tableValues",t)),this.feFuncA&&(e||n[31].p._mdf||n[32].p._mdf||n[33].p._mdf||n[34].p._mdf||n[35].p._mdf)&&(t=this.getTableValue(n[31].p.v,n[32].p.v,n[33].p.v,n[34].p.v,n[35].p.v),this.feFuncA.setAttribute("tableValues",t))}},extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){if((e||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),e||this.filterManager.effectElements[0].p._mdf){var t=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(255*t[0]),Math.round(255*t[1]),Math.round(255*t[2])))}if((e||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),e||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var n=this.filterManager.effectElements[3].p.v,r=(this.filterManager.effectElements[2].p.v-90)*degToRads,i=n*Math.cos(r),a=n*Math.sin(r);this.feOffset.setAttribute("dx",i),this.feOffset.setAttribute("dy",a)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(e,t,n){this.initialized=!1,this.filterManager=t,this.filterElem=e,this.elem=n,n.matteElement=createNS("g"),n.matteElement.appendChild(n.layerElement),n.matteElement.appendChild(n.transformedElement),n.baseElement=n.matteElement}function SVGGaussianBlurEffect(e,t,n,r){e.setAttribute("x","-100%"),e.setAttribute("y","-100%"),e.setAttribute("width","300%"),e.setAttribute("height","300%"),this.filterManager=t;var i=createNS("feGaussianBlur");i.setAttribute("result",r),e.appendChild(i),this.feGaussianBlur=i}return SVGMatte3Effect.prototype.findSymbol=function(e){for(var t=0,n=_svgMatteSymbols.length;t<n;){if(_svgMatteSymbols[t]===e)return _svgMatteSymbols[t];t+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(e,t){var n=e.layerElement.parentNode;if(n){for(var r,i=n.children,a=0,s=i.length;a<s&&i[a]!==e.layerElement;)a+=1;a<=s-2&&(r=i[a+1]);var o=createNS("use");o.setAttribute("href","#"+t),r?n.insertBefore(o,r):n.appendChild(o)}},SVGMatte3Effect.prototype.setElementAsMask=function(e,t){if(!this.findSymbol(t)){var n=createElementID(),r=createNS("mask");r.setAttribute("id",t.layerId),r.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(t);var i=e.globalData.defs;i.appendChild(r);var a=createNS("symbol");a.setAttribute("id",n),this.replaceInParent(t,n),a.appendChild(t.layerElement),i.appendChild(a);var s=createNS("use");s.setAttribute("href","#"+n),r.appendChild(s),t.data.hd=!1,t.show()}e.setMatte(t.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var e=this.filterManager.effectElements[0].p.v,t=this.elem.comp.elements,n=0,r=t.length;n<r;)t[n]&&t[n].data.ind===e&&this.setElementAsMask(this.elem,t[n]),n+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()},SVGGaussianBlurEffect.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=.3*this.filterManager.effectElements[0].p.v,n=this.filterManager.effectElements[1].p.v,r=3==n?0:t,i=2==n?0:t;this.feGaussianBlur.setAttribute("stdDeviation",r+" "+i);var a=1==this.filterManager.effectElements[2].p.v?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",a)}},registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),setExpressionsPlugin(Expressions),initialize$1(),initialize(),registerEffect(20,SVGTintFilter,!0),registerEffect(21,SVGFillFilter,!0),registerEffect(22,SVGStrokeEffect,!1),registerEffect(23,SVGTritoneFilter,!0),registerEffect(24,SVGProLevelsFilter,!0),registerEffect(25,SVGDropShadowEffect,!0),registerEffect(28,SVGMatte3Effect,!1),registerEffect(29,SVGGaussianBlurEffect,!0),lottie},module.exports=factory())},448:function(e,t,n){"use strict";var r=n(294),i=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var s=new Set,o={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(o[e]=t,e=0;e<t.length;e++)s.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),h=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},d={};function m(e,t,n,r,i,a,s){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=s}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,t,n,r){var i=g.hasOwnProperty(t)?g[t]:null;(null!==i?0!==i.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!h.call(d,e)||!h.call(p,e)&&(f.test(e)?d[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,v);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=Symbol.for("react.element"),x=Symbol.for("react.portal"),w=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),P=Symbol.for("react.provider"),_=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),A=Symbol.for("react.suspense"),F=Symbol.for("react.suspense_list"),M=Symbol.for("react.memo"),D=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var R=Symbol.iterator;function N(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=R&&e[R]||e["@@iterator"])?e:null}var L,O=Object.assign;function z(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var V=!1;function B(e,t){if(!e||V)return"";V=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),a=r.stack.split("\n"),s=i.length-1,o=a.length-1;1<=s&&0<=o&&i[s]!==a[o];)o--;for(;1<=s&&0<=o;s--,o--)if(i[s]!==a[o]){if(1!==s||1!==o)do{if(s--,0>--o||i[s]!==a[o]){var l="\n"+i[s].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=s&&0<=o);break}}}finally{V=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?z(e):""}function $(e){switch(e.tag){case 5:return z(e.type);case 16:return z("Lazy");case 13:return z("Suspense");case 19:return z("SuspenseList");case 0:case 2:case 15:return B(e.type,!1);case 11:return B(e.type.render,!1);case 1:return B(e.type,!0);default:return""}}function j(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case w:return"Fragment";case x:return"Portal";case C:return"Profiler";case S:return"StrictMode";case A:return"Suspense";case F:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case M:return null!==(t=e.displayName||null)?t:j(e.type)||"Memo";case D:t=e._payload,e=e._init;try{return j(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return j(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function G(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function U(e){e._valueTracker||(e._valueTracker=function(e){var t=q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function W(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return O({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=G(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){X(e,t);var n=G(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,G(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+G(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return O({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:G(n)}}function ae(e,t){var n=G(t.value),r=G(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,he=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},de=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(pe).forEach((function(e){de.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=O({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ke=null;function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,we=null,Se=null;function Ce(e){if(e=bi(e)){if("function"!=typeof xe)throw Error(a(280));var t=e.stateNode;t&&(t=Ei(t),xe(e.stateNode,e.type,t))}}function Pe(e){we?Se?Se.push(e):Se=[e]:we=e}function _e(){if(we){var e=we,t=Se;if(Se=we=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Te(e,t){return e(t)}function Ae(){}var Fe=!1;function Me(e,t,n){if(Fe)return e(t,n);Fe=!0;try{return Te(e,t,n)}finally{Fe=!1,(null!==we||null!==Se)&&(Ae(),_e())}}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=Ei(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Ie=!1;if(u)try{var Re={};Object.defineProperty(Re,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",Re,Re),window.removeEventListener("test",Re,Re)}catch(ue){Ie=!1}function Ne(e,t,n,r,i,a,s,o,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Le=!1,Oe=null,ze=!1,Ve=null,Be={onError:function(e){Le=!0,Oe=e}};function $e(e,t,n,r,i,a,s,o,l){Le=!1,Oe=null,Ne.apply(Be,arguments)}function je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ge(e){if(je(e)!==e)throw Error(a(188))}function qe(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var s=i.alternate;if(null===s){if(null!==(r=i.return)){n=r;continue}break}if(i.child===s.child){for(s=i.child;s;){if(s===n)return Ge(i),e;if(s===r)return Ge(i),t;s=s.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=s;else{for(var o=!1,l=i.child;l;){if(l===n){o=!0,n=i,r=s;break}if(l===r){o=!0,r=i,n=s;break}l=l.sibling}if(!o){for(l=s.child;l;){if(l===n){o=!0,n=s,r=i;break}if(l===r){o=!0,r=s,n=i;break}l=l.sibling}if(!o)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ue(e):null}function Ue(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ue(e);if(null!==t)return t;e=e.sibling}return null}var We=i.unstable_scheduleCallback,Ke=i.unstable_cancelCallback,Ye=i.unstable_shouldYield,Qe=i.unstable_requestPaint,Xe=i.unstable_now,Ze=i.unstable_getCurrentPriorityLevel,Je=i.unstable_ImmediatePriority,et=i.unstable_UserBlockingPriority,tt=i.unstable_NormalPriority,nt=i.unstable_LowPriority,rt=i.unstable_IdlePriority,it=null,at=null,st=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(ot(e)/lt|0)|0},ot=Math.log,lt=Math.LN2,ct=64,ut=4194304;function ht(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,i=e.suspendedLanes,a=e.pingedLanes,s=268435455&n;if(0!==s){var o=s&~i;0!==o?r=ht(o):0!=(a&=s)&&(r=ht(a))}else 0!=(s=n&~i)?r=ht(s):0!==a&&(r=ht(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&i)&&((i=r&-r)>=(a=t&-t)||16===i&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-st(t)),r|=e[n],t&=~i;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function dt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-st(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-st(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var bt=0;function kt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var Et,xt,wt,St,Ct,Pt=!1,_t=[],Tt=null,At=null,Ft=null,Mt=new Map,Dt=new Map,It=[],Rt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Nt(e,t){switch(e){case"focusin":case"focusout":Tt=null;break;case"dragenter":case"dragleave":At=null;break;case"mouseover":case"mouseout":Ft=null;break;case"pointerover":case"pointerout":Mt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Dt.delete(t.pointerId)}}function Lt(e,t,n,r,i,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[i]},null!==t&&null!==(t=bi(t))&&xt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function Ot(e){var t=vi(e.target);if(null!==t){var n=je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void Ct(e.priority,(function(){wt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function zt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=bi(n))&&xt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);ke=r,n.target.dispatchEvent(r),ke=null,t.shift()}return!0}function Vt(e,t,n){zt(e)&&n.delete(t)}function Bt(){Pt=!1,null!==Tt&&zt(Tt)&&(Tt=null),null!==At&&zt(At)&&(At=null),null!==Ft&&zt(Ft)&&(Ft=null),Mt.forEach(Vt),Dt.forEach(Vt)}function $t(e,t){e.blockedOn===t&&(e.blockedOn=null,Pt||(Pt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Bt)))}function jt(e){function t(t){return $t(t,e)}if(0<_t.length){$t(_t[0],e);for(var n=1;n<_t.length;n++){var r=_t[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Tt&&$t(Tt,e),null!==At&&$t(At,e),null!==Ft&&$t(Ft,e),Mt.forEach(t),Dt.forEach(t),n=0;n<It.length;n++)(r=It[n]).blockedOn===e&&(r.blockedOn=null);for(;0<It.length&&null===(n=It[0]).blockedOn;)Ot(n),null===n.blockedOn&&It.shift()}var Ht=k.ReactCurrentBatchConfig,Gt=!0;function qt(e,t,n,r){var i=bt,a=Ht.transition;Ht.transition=null;try{bt=1,Wt(e,t,n,r)}finally{bt=i,Ht.transition=a}}function Ut(e,t,n,r){var i=bt,a=Ht.transition;Ht.transition=null;try{bt=4,Wt(e,t,n,r)}finally{bt=i,Ht.transition=a}}function Wt(e,t,n,r){if(Gt){var i=Yt(e,t,n,r);if(null===i)Gr(e,t,r,Kt,n),Nt(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return Tt=Lt(Tt,e,t,n,r,i),!0;case"dragenter":return At=Lt(At,e,t,n,r,i),!0;case"mouseover":return Ft=Lt(Ft,e,t,n,r,i),!0;case"pointerover":var a=i.pointerId;return Mt.set(a,Lt(Mt.get(a)||null,e,t,n,r,i)),!0;case"gotpointercapture":return a=i.pointerId,Dt.set(a,Lt(Dt.get(a)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(Nt(e,r),4&t&&-1<Rt.indexOf(e)){for(;null!==i;){var a=bi(i);if(null!==a&&Et(a),null===(a=Yt(e,t,n,r))&&Gr(e,t,r,Kt,n),a===i)break;i=a}null!==i&&r.stopPropagation()}else Gr(e,t,r,null,n)}}var Kt=null;function Yt(e,t,n,r){if(Kt=null,null!==(e=vi(e=Ee(r))))if(null===(t=je(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,i="value"in Xt?Xt.value:Xt.textContent,a=i.length;for(e=0;e<r&&n[e]===i[e];e++);var s=r-e;for(t=1;t<=s&&n[r-t]===i[a-t];t++);return Jt=i.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,i,a){for(var s in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(s)&&(t=e[s],this[s]=t?t(i):i[s]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return O(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var sn,on,ln,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=an(cn),hn=O({},cn,{view:0,detail:0}),fn=an(hn),pn=O({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(sn=e.screenX-ln.screenX,on=e.screenY-ln.screenY):on=sn=0,ln=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:on}}),dn=an(pn),mn=an(O({},pn,{dataTransfer:0})),gn=an(O({},hn,{relatedTarget:0})),yn=an(O({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=O({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(vn),kn=an(O({},cn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},wn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=wn[e])&&!!t[e]}function Cn(){return Sn}var Pn=O({},hn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=an(Pn),Tn=an(O({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),An=an(O({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Fn=an(O({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Mn=O({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Dn=an(Mn),In=[9,13,27,32],Rn=u&&"CompositionEvent"in window,Nn=null;u&&"documentMode"in document&&(Nn=document.documentMode);var Ln=u&&"TextEvent"in window&&!Nn,On=u&&(!Rn||Nn&&8<Nn&&11>=Nn),zn=String.fromCharCode(32),Vn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Gn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function qn(e,t,n,r){Pe(r),0<(t=Ur(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Un=null,Wn=null;function Kn(e){zr(e,0)}function Yn(e){if(W(ki(e)))return e}function Qn(e,t){if("change"===e)return t}var Xn=!1;if(u){var Zn;if(u){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Xn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Un&&(Un.detachEvent("onpropertychange",nr),Wn=Un=null)}function nr(e){if("value"===e.propertyName&&Yn(Wn)){var t=[];qn(t,Wn,e,Ee(e)),Me(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Wn=n,(Un=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Wn)}function ar(e,t){if("click"===e)return Yn(t)}function sr(e,t){if("input"===e||"change"===e)return Yn(t)}var or="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(or(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!h.call(t,i)||!or(e[i],t[i]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function dr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&hr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,a=Math.min(r.start,i);r=void 0===r.end?a:Math.min(r.end,i),!e.extend&&a>r&&(i=r,r=a,a=i),i=ur(n,a);var s=ur(n,r);i&&s&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==s.node||e.focusOffset!==s.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(s.node,s.offset)):(t.setEnd(s.node,s.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=u&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,vr=null,br=!1;function kr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==K(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Ur(yr,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function Er(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xr={animationend:Er("Animation","AnimationEnd"),animationiteration:Er("Animation","AnimationIteration"),animationstart:Er("Animation","AnimationStart"),transitionend:Er("Transition","TransitionEnd")},wr={},Sr={};function Cr(e){if(wr[e])return wr[e];if(!xr[e])return e;var t,n=xr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return wr[e]=n[t];return e}u&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var Pr=Cr("animationend"),_r=Cr("animationiteration"),Tr=Cr("animationstart"),Ar=Cr("transitionend"),Fr=new Map,Mr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Dr(e,t){Fr.set(e,t),l(t,[e])}for(var Ir=0;Ir<Mr.length;Ir++){var Rr=Mr[Ir];Dr(Rr.toLowerCase(),"on"+(Rr[0].toUpperCase()+Rr.slice(1)))}Dr(Pr,"onAnimationEnd"),Dr(_r,"onAnimationIteration"),Dr(Tr,"onAnimationStart"),Dr("dblclick","onDoubleClick"),Dr("focusin","onFocus"),Dr("focusout","onBlur"),Dr(Ar,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Nr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Lr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Nr));function Or(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,s,o,l,c){if($e.apply(this,arguments),Le){if(!Le)throw Error(a(198));var u=Oe;Le=!1,Oe=null,ze||(ze=!0,Ve=u)}}(r,t,void 0,e),e.currentTarget=null}function zr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var s=r.length-1;0<=s;s--){var o=r[s],l=o.instance,c=o.currentTarget;if(o=o.listener,l!==a&&i.isPropagationStopped())break e;Or(i,o,c),a=l}else for(s=0;s<r.length;s++){if(l=(o=r[s]).instance,c=o.currentTarget,o=o.listener,l!==a&&i.isPropagationStopped())break e;Or(i,o,c),a=l}}}if(ze)throw e=Ve,ze=!1,Ve=null,e}function Vr(e,t){var n=t[mi];void 0===n&&(n=t[mi]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Br(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function jr(e){if(!e[$r]){e[$r]=!0,s.forEach((function(t){"selectionchange"!==t&&(Lr.has(t)||Br(t,!1,e),Br(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,Br("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Qt(t)){case 1:var i=qt;break;case 4:i=Ut;break;default:i=Wt}n=i.bind(null,t,n,e),i=void 0,!Ie||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Gr(e,t,n,r,i){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var s=r.tag;if(3===s||4===s){var o=r.stateNode.containerInfo;if(o===i||8===o.nodeType&&o.parentNode===i)break;if(4===s)for(s=r.return;null!==s;){var l=s.tag;if((3===l||4===l)&&((l=s.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;s=s.return}for(;null!==o;){if(null===(s=vi(o)))return;if(5===(l=s.tag)||6===l){r=a=s;continue e}o=o.parentNode}}r=r.return}Me((function(){var r=a,i=Ee(n),s=[];e:{var o=Fr.get(e);if(void 0!==o){var l=un,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=_n;break;case"focusin":c="focus",l=gn;break;case"focusout":c="blur",l=gn;break;case"beforeblur":case"afterblur":l=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=dn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=An;break;case Pr:case _r:case Tr:l=yn;break;case Ar:l=Fn;break;case"scroll":l=fn;break;case"wheel":l=Dn;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Tn}var u=0!=(4&t),h=!u&&"scroll"===e,f=u?null!==o?o+"Capture":null:o;u=[];for(var p,d=r;null!==d;){var m=(p=d).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=De(d,f))&&u.push(qr(d,m,p))),h)break;d=d.return}0<u.length&&(o=new l(o,c,null,n,i),s.push({event:o,listeners:u}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||n===ke||!(c=n.relatedTarget||n.fromElement)||!vi(c)&&!c[di])&&(l||o)&&(o=i.window===i?i:(o=i.ownerDocument)?o.defaultView||o.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?vi(c):null)&&(c!==(h=je(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=dn,m="onMouseLeave",f="onMouseEnter",d="mouse","pointerout"!==e&&"pointerover"!==e||(u=Tn,m="onPointerLeave",f="onPointerEnter",d="pointer"),h=null==l?o:ki(l),p=null==c?o:ki(c),(o=new u(m,d+"leave",l,n,i)).target=h,o.relatedTarget=p,m=null,vi(i)===r&&((u=new u(f,d+"enter",c,n,i)).target=p,u.relatedTarget=h,m=u),h=m,l&&c)e:{for(f=c,d=0,p=u=l;p;p=Wr(p))d++;for(p=0,m=f;m;m=Wr(m))p++;for(;0<d-p;)u=Wr(u),d--;for(;0<p-d;)f=Wr(f),p--;for(;d--;){if(u===f||null!==f&&u===f.alternate)break e;u=Wr(u),f=Wr(f)}u=null}else u=null;null!==l&&Kr(s,o,l,u,!1),null!==c&&null!==h&&Kr(s,h,c,u,!0)}if("select"===(l=(o=r?ki(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===l&&"file"===o.type)var g=Qn;else if(Gn(o))if(Xn)g=sr;else{g=ir;var y=rr}else(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(g=ar);switch(g&&(g=g(e,r))?qn(s,g,n,i):(y&&y(e,o,r),"focusout"===e&&(y=o._wrapperState)&&y.controlled&&"number"===o.type&&ee(o,"number",o.value)),y=r?ki(r):window,e){case"focusin":(Gn(y)||"true"===y.contentEditable)&&(gr=y,yr=r,vr=null);break;case"focusout":vr=yr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,kr(s,n,i);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":kr(s,n,i)}var v;if(Rn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else jn?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(On&&"ko"!==n.locale&&(jn||"onCompositionStart"!==b?"onCompositionEnd"===b&&jn&&(v=en()):(Zt="value"in(Xt=i)?Xt.value:Xt.textContent,jn=!0)),0<(y=Ur(r,b)).length&&(b=new kn(b,e,null,n,i),s.push({event:b,listeners:y}),(v||null!==(v=$n(n)))&&(b.data=v))),(v=Ln?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(Vn=!0,zn);case"textInput":return(e=t.data)===zn&&Vn?null:e;default:return null}}(e,n):function(e,t){if(jn)return"compositionend"===e||!Rn&&Bn(e,t)?(e=en(),Jt=Zt=Xt=null,jn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return On&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Ur(r,"onBeforeInput")).length&&(i=new kn("onBeforeInput","beforeinput",null,n,i),s.push({event:i,listeners:r}),i.data=v)}zr(s,t)}))}function qr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ur(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,a=i.stateNode;5===i.tag&&null!==a&&(i=a,null!=(a=De(e,n))&&r.unshift(qr(e,a,i)),null!=(a=De(e,t))&&r.push(qr(e,a,i))),e=e.return}return r}function Wr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,i){for(var a=t._reactName,s=[];null!==n&&n!==r;){var o=n,l=o.alternate,c=o.stateNode;if(null!==l&&l===r)break;5===o.tag&&null!==c&&(o=c,i?null!=(l=De(n,a))&&s.unshift(qr(n,l,o)):i||null!=(l=De(n,a))&&s.push(qr(n,l,o))),n=n.return}0!==s.length&&e.push({event:t,listeners:s})}var Yr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Qr,"")}function Zr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function Jr(){}var ei=null,ti=null;function ni(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,ai="function"==typeof Promise?Promise:void 0,si="function"==typeof queueMicrotask?queueMicrotask:void 0!==ai?function(e){return ai.resolve(null).then(e).catch(oi)}:ri;function oi(e){setTimeout((function(){throw e}))}function li(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return e.removeChild(i),void jt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);jt(t)}function ci(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ui(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var hi=Math.random().toString(36).slice(2),fi="__reactFiber$"+hi,pi="__reactProps$"+hi,di="__reactContainer$"+hi,mi="__reactEvents$"+hi,gi="__reactListeners$"+hi,yi="__reactHandles$"+hi;function vi(e){var t=e[fi];if(t)return t;for(var n=e.parentNode;n;){if(t=n[di]||n[fi]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ui(e);null!==e;){if(n=e[fi])return n;e=ui(e)}return t}n=(e=n).parentNode}return null}function bi(e){return!(e=e[fi]||e[di])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ki(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Ei(e){return e[pi]||null}var xi=[],wi=-1;function Si(e){return{current:e}}function Ci(e){0>wi||(e.current=xi[wi],xi[wi]=null,wi--)}function Pi(e,t){wi++,xi[wi]=e.current,e.current=t}var _i={},Ti=Si(_i),Ai=Si(!1),Fi=_i;function Mi(e,t){var n=e.type.contextTypes;if(!n)return _i;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in n)a[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Di(e){return null!=e.childContextTypes}function Ii(){Ci(Ai),Ci(Ti)}function Ri(e,t,n){if(Ti.current!==_i)throw Error(a(168));Pi(Ti,t),Pi(Ai,n)}function Ni(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in t))throw Error(a(108,H(e)||"Unknown",i));return O({},n,r)}function Li(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_i,Fi=Ti.current,Pi(Ti,e),Pi(Ai,Ai.current),!0}function Oi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Ni(e,t,Fi),r.__reactInternalMemoizedMergedChildContext=e,Ci(Ai),Ci(Ti),Pi(Ti,e)):Ci(Ai),Pi(Ai,n)}var zi=null,Vi=!1,Bi=!1;function $i(e){null===zi?zi=[e]:zi.push(e)}function ji(){if(!Bi&&null!==zi){Bi=!0;var e=0,t=bt;try{var n=zi;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}zi=null,Vi=!1}catch(t){throw null!==zi&&(zi=zi.slice(e+1)),We(Je,ji),t}finally{bt=t,Bi=!1}}return null}var Hi=[],Gi=0,qi=null,Ui=0,Wi=[],Ki=0,Yi=null,Qi=1,Xi="";function Zi(e,t){Hi[Gi++]=Ui,Hi[Gi++]=qi,qi=e,Ui=t}function Ji(e,t,n){Wi[Ki++]=Qi,Wi[Ki++]=Xi,Wi[Ki++]=Yi,Yi=e;var r=Qi;e=Xi;var i=32-st(r)-1;r&=~(1<<i),n+=1;var a=32-st(t)+i;if(30<a){var s=i-i%5;a=(r&(1<<s)-1).toString(32),r>>=s,i-=s,Qi=1<<32-st(t)+i|n<<i|r,Xi=a+e}else Qi=1<<a|n<<i|r,Xi=e}function ea(e){null!==e.return&&(Zi(e,1),Ji(e,1,0))}function ta(e){for(;e===qi;)qi=Hi[--Gi],Hi[Gi]=null,Ui=Hi[--Gi],Hi[Gi]=null;for(;e===Yi;)Yi=Wi[--Ki],Wi[Ki]=null,Xi=Wi[--Ki],Wi[Ki]=null,Qi=Wi[--Ki],Wi[Ki]=null}var na=null,ra=null,ia=!1,aa=null;function sa(e,t){var n=Mc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function oa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,na=e,ra=ci(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,na=e,ra=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Yi?{id:Qi,overflow:Xi}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Mc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,na=e,ra=null,!0);default:return!1}}function la(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ca(e){if(ia){var t=ra;if(t){var n=t;if(!oa(e,t)){if(la(e))throw Error(a(418));t=ci(n.nextSibling);var r=na;t&&oa(e,t)?sa(r,n):(e.flags=-4097&e.flags|2,ia=!1,na=e)}}else{if(la(e))throw Error(a(418));e.flags=-4097&e.flags|2,ia=!1,na=e}}}function ua(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;na=e}function ha(e){if(e!==na)return!1;if(!ia)return ua(e),ia=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ni(e.type,e.memoizedProps)),t&&(t=ra)){if(la(e))throw fa(),Error(a(418));for(;t;)sa(e,t),t=ci(t.nextSibling)}if(ua(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ra=ci(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ra=null}}else ra=na?ci(e.stateNode.nextSibling):null;return!0}function fa(){for(var e=ra;e;)e=ci(e.nextSibling)}function pa(){ra=na=null,ia=!1}function da(e){null===aa?aa=[e]:aa.push(e)}var ma=k.ReactCurrentBatchConfig;function ga(e,t){if(e&&e.defaultProps){for(var n in t=O({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ya=Si(null),va=null,ba=null,ka=null;function Ea(){ka=ba=va=null}function xa(e){var t=ya.current;Ci(ya),e._currentValue=t}function wa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Sa(e,t){va=e,ka=ba=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ko=!0),e.firstContext=null)}function Ca(e){var t=e._currentValue;if(ka!==e)if(e={context:e,memoizedValue:t,next:null},null===ba){if(null===va)throw Error(a(308));ba=e,va.dependencies={lanes:0,firstContext:e}}else ba=ba.next=e;return t}var Pa=null;function _a(e){null===Pa?Pa=[e]:Pa.push(e)}function Ta(e,t,n,r){var i=t.interleaved;return null===i?(n.next=n,_a(t)):(n.next=i.next,i.next=n),t.interleaved=n,Aa(e,r)}function Aa(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Fa=!1;function Ma(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Da(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ra(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Tl)){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Aa(e,n)}return null===(i=r.interleaved)?(t.next=t,_a(r)):(t.next=i.next,i.next=t),r.interleaved=t,Aa(e,n)}function Na(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function La(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?i=a=s:a=a.next=s,n=n.next}while(null!==n);null===a?i=a=t:a=a.next=t}else i=a=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Oa(e,t,n,r){var i=e.updateQueue;Fa=!1;var a=i.firstBaseUpdate,s=i.lastBaseUpdate,o=i.shared.pending;if(null!==o){i.shared.pending=null;var l=o,c=l.next;l.next=null,null===s?a=c:s.next=c,s=l;var u=e.alternate;null!==u&&(o=(u=u.updateQueue).lastBaseUpdate)!==s&&(null===o?u.firstBaseUpdate=c:o.next=c,u.lastBaseUpdate=l)}if(null!==a){var h=i.baseState;for(s=0,u=c=l=null,o=a;;){var f=o.lane,p=o.eventTime;if((r&f)===f){null!==u&&(u=u.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var d=e,m=o;switch(f=t,p=n,m.tag){case 1:if("function"==typeof(d=m.payload)){h=d.call(p,h,f);break e}h=d;break e;case 3:d.flags=-65537&d.flags|128;case 0:if(null==(f="function"==typeof(d=m.payload)?d.call(p,h,f):d))break e;h=O({},h,f);break e;case 2:Fa=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(f=i.effects)?i.effects=[o]:f.push(o))}else p={eventTime:p,lane:f,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===u?(c=u=p,l=h):u=u.next=p,s|=f;if(null===(o=o.next)){if(null===(o=i.shared.pending))break;o=(f=o).next,f.next=null,i.lastBaseUpdate=f,i.shared.pending=null}}if(null===u&&(l=h),i.baseState=l,i.firstBaseUpdate=c,i.lastBaseUpdate=u,null!==(t=i.shared.interleaved)){i=t;do{s|=i.lane,i=i.next}while(i!==t)}else null===a&&(i.shared.lanes=0);Ll|=s,e.lanes=s,e.memoizedState=h}}function za(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var Va=(new r.Component).refs;function Ba(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:O({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var $a={isMounted:function(e){return!!(e=e._reactInternals)&&je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ec(),i=tc(e),a=Ia(r,i);a.payload=t,null!=n&&(a.callback=n),null!==(t=Ra(e,a,i))&&(nc(t,e,i,r),Na(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ec(),i=tc(e),a=Ia(r,i);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Ra(e,a,i))&&(nc(t,e,i,r),Na(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ec(),r=tc(e),i=Ia(n,r);i.tag=2,null!=t&&(i.callback=t),null!==(t=Ra(e,i,r))&&(nc(t,e,r,n),Na(t,e,r))}};function ja(e,t,n,r,i,a,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,s):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,a))}function Ha(e,t,n){var r=!1,i=_i,a=t.contextType;return"object"==typeof a&&null!==a?a=Ca(a):(i=Di(t)?Fi:Ti.current,a=(r=null!=(r=t.contextTypes))?Mi(e,i):_i),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=$a,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ga(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&$a.enqueueReplaceState(t,t.state,null)}function qa(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Va,Ma(e);var a=t.contextType;"object"==typeof a&&null!==a?i.context=Ca(a):(a=Di(t)?Fi:Ti.current,i.context=Mi(e,a)),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ba(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&$a.enqueueReplaceState(i,i.state,null),Oa(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function Ua(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=r,s=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===s?t.ref:(t=function(e){var t=i.refs;t===Va&&(t=i.refs={}),null===e?delete t[s]:t[s]=e},t._stringRef=s,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Wa(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ka(e){return(0,e._init)(e._payload)}function Ya(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Ic(e,t)).index=0,e.sibling=null,e}function s(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Oc(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){var a=n.type;return a===w?h(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===D&&Ka(a)===t.type)?((r=i(t,n.props)).ref=Ua(e,t,n),r.return=e,r):((r=Rc(n.type,n.key,n.props,null,e.mode,r)).ref=Ua(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zc(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function h(e,t,n,r,a){return null===t||7!==t.tag?((t=Nc(n,e.mode,r,a)).return=e,t):((t=i(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Oc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Rc(t.type,t.key,t.props,null,e.mode,n)).ref=Ua(e,null,t),n.return=e,n;case x:return(t=zc(t,e.mode,n)).return=e,t;case D:return f(e,(0,t._init)(t._payload),n)}if(te(t)||N(t))return(t=Nc(t,e.mode,n,null)).return=e,t;Wa(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===i?c(e,t,n,r):null;case x:return n.key===i?u(e,t,n,r):null;case D:return p(e,t,(i=n._init)(n._payload),r)}if(te(n)||N(n))return null!==i?null:h(e,t,n,r,null);Wa(e,n)}return null}function d(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case x:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i);case D:return d(e,t,n,(0,r._init)(r._payload),i)}if(te(r)||N(r))return h(t,e=e.get(n)||null,r,i,null);Wa(t,r)}return null}function m(i,a,o,l){for(var c=null,u=null,h=a,m=a=0,g=null;null!==h&&m<o.length;m++){h.index>m?(g=h,h=null):g=h.sibling;var y=p(i,h,o[m],l);if(null===y){null===h&&(h=g);break}e&&h&&null===y.alternate&&t(i,h),a=s(y,a,m),null===u?c=y:u.sibling=y,u=y,h=g}if(m===o.length)return n(i,h),ia&&Zi(i,m),c;if(null===h){for(;m<o.length;m++)null!==(h=f(i,o[m],l))&&(a=s(h,a,m),null===u?c=h:u.sibling=h,u=h);return ia&&Zi(i,m),c}for(h=r(i,h);m<o.length;m++)null!==(g=d(h,i,m,o[m],l))&&(e&&null!==g.alternate&&h.delete(null===g.key?m:g.key),a=s(g,a,m),null===u?c=g:u.sibling=g,u=g);return e&&h.forEach((function(e){return t(i,e)})),ia&&Zi(i,m),c}function g(i,o,l,c){var u=N(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var h=u=null,m=o,g=o=0,y=null,v=l.next();null!==m&&!v.done;g++,v=l.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=p(i,m,v.value,c);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(i,m),o=s(b,o,g),null===h?u=b:h.sibling=b,h=b,m=y}if(v.done)return n(i,m),ia&&Zi(i,g),u;if(null===m){for(;!v.done;g++,v=l.next())null!==(v=f(i,v.value,c))&&(o=s(v,o,g),null===h?u=v:h.sibling=v,h=v);return ia&&Zi(i,g),u}for(m=r(i,m);!v.done;g++,v=l.next())null!==(v=d(m,i,g,v.value,c))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),o=s(v,o,g),null===h?u=v:h.sibling=v,h=v);return e&&m.forEach((function(e){return t(i,e)})),ia&&Zi(i,g),u}return function e(r,a,s,l){if("object"==typeof s&&null!==s&&s.type===w&&null===s.key&&(s=s.props.children),"object"==typeof s&&null!==s){switch(s.$$typeof){case E:e:{for(var c=s.key,u=a;null!==u;){if(u.key===c){if((c=s.type)===w){if(7===u.tag){n(r,u.sibling),(a=i(u,s.props.children)).return=r,r=a;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===D&&Ka(c)===u.type){n(r,u.sibling),(a=i(u,s.props)).ref=Ua(r,u,s),a.return=r,r=a;break e}n(r,u);break}t(r,u),u=u.sibling}s.type===w?((a=Nc(s.props.children,r.mode,l,s.key)).return=r,r=a):((l=Rc(s.type,s.key,s.props,null,r.mode,l)).ref=Ua(r,a,s),l.return=r,r=l)}return o(r);case x:e:{for(u=s.key;null!==a;){if(a.key===u){if(4===a.tag&&a.stateNode.containerInfo===s.containerInfo&&a.stateNode.implementation===s.implementation){n(r,a.sibling),(a=i(a,s.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=zc(s,r.mode,l)).return=r,r=a}return o(r);case D:return e(r,a,(u=s._init)(s._payload),l)}if(te(s))return m(r,a,s,l);if(N(s))return g(r,a,s,l);Wa(r,s)}return"string"==typeof s&&""!==s||"number"==typeof s?(s=""+s,null!==a&&6===a.tag?(n(r,a.sibling),(a=i(a,s)).return=r,r=a):(n(r,a),(a=Oc(s,r.mode,l)).return=r,r=a),o(r)):n(r,a)}}var Qa=Ya(!0),Xa=Ya(!1),Za={},Ja=Si(Za),es=Si(Za),ts=Si(Za);function ns(e){if(e===Za)throw Error(a(174));return e}function rs(e,t){switch(Pi(ts,t),Pi(es,e),Pi(Ja,Za),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ci(Ja),Pi(Ja,t)}function is(){Ci(Ja),Ci(es),Ci(ts)}function as(e){ns(ts.current);var t=ns(Ja.current),n=le(t,e.type);t!==n&&(Pi(es,e),Pi(Ja,n))}function ss(e){es.current===e&&(Ci(Ja),Ci(es))}var os=Si(0);function ls(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var cs=[];function us(){for(var e=0;e<cs.length;e++)cs[e]._workInProgressVersionPrimary=null;cs.length=0}var hs=k.ReactCurrentDispatcher,fs=k.ReactCurrentBatchConfig,ps=0,ds=null,ms=null,gs=null,ys=!1,vs=!1,bs=0,ks=0;function Es(){throw Error(a(321))}function xs(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!or(e[n],t[n]))return!1;return!0}function ws(e,t,n,r,i,s){if(ps=s,ds=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,hs.current=null===e||null===e.memoizedState?so:oo,e=n(r,i),vs){s=0;do{if(vs=!1,bs=0,25<=s)throw Error(a(301));s+=1,gs=ms=null,t.updateQueue=null,hs.current=lo,e=n(r,i)}while(vs)}if(hs.current=ao,t=null!==ms&&null!==ms.next,ps=0,gs=ms=ds=null,ys=!1,t)throw Error(a(300));return e}function Ss(){var e=0!==bs;return bs=0,e}function Cs(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===gs?ds.memoizedState=gs=e:gs=gs.next=e,gs}function Ps(){if(null===ms){var e=ds.alternate;e=null!==e?e.memoizedState:null}else e=ms.next;var t=null===gs?ds.memoizedState:gs.next;if(null!==t)gs=t,ms=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ms=e).memoizedState,baseState:ms.baseState,baseQueue:ms.baseQueue,queue:ms.queue,next:null},null===gs?ds.memoizedState=gs=e:gs=gs.next=e}return gs}function _s(e,t){return"function"==typeof t?t(e):t}function Ts(e){var t=Ps(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ms,i=r.baseQueue,s=n.pending;if(null!==s){if(null!==i){var o=i.next;i.next=s.next,s.next=o}r.baseQueue=i=s,n.pending=null}if(null!==i){s=i.next,r=r.baseState;var l=o=null,c=null,u=s;do{var h=u.lane;if((ps&h)===h)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:h,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=f,o=r):c=c.next=f,ds.lanes|=h,Ll|=h}u=u.next}while(null!==u&&u!==s);null===c?o=r:c.next=l,or(r,t.memoizedState)||(ko=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){i=e;do{s=i.lane,ds.lanes|=s,Ll|=s,i=i.next}while(i!==e)}else null===i&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function As(e){var t=Ps(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,s=t.memoizedState;if(null!==i){n.pending=null;var o=i=i.next;do{s=e(s,o.action),o=o.next}while(o!==i);or(s,t.memoizedState)||(ko=!0),t.memoizedState=s,null===t.baseQueue&&(t.baseState=s),n.lastRenderedState=s}return[s,r]}function Fs(){}function Ms(e,t){var n=ds,r=Ps(),i=t(),s=!or(r.memoizedState,i);if(s&&(r.memoizedState=i,ko=!0),r=r.queue,Hs(Rs.bind(null,n,r,e),[e]),r.getSnapshot!==t||s||null!==gs&&1&gs.memoizedState.tag){if(n.flags|=2048,zs(9,Is.bind(null,n,r,i,t),void 0,null),null===Al)throw Error(a(349));0!=(30&ps)||Ds(n,t,i)}return i}function Ds(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ds.updateQueue)?(t={lastEffect:null,stores:null},ds.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Is(e,t,n,r){t.value=n,t.getSnapshot=r,Ns(t)&&Ls(e)}function Rs(e,t,n){return n((function(){Ns(t)&&Ls(e)}))}function Ns(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!or(e,n)}catch(e){return!0}}function Ls(e){var t=Aa(e,1);null!==t&&nc(t,e,1,-1)}function Os(e){var t=Cs();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_s,lastRenderedState:e},t.queue=e,e=e.dispatch=to.bind(null,ds,e),[t.memoizedState,e]}function zs(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ds.updateQueue)?(t={lastEffect:null,stores:null},ds.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Vs(){return Ps().memoizedState}function Bs(e,t,n,r){var i=Cs();ds.flags|=e,i.memoizedState=zs(1|t,n,void 0,void 0===r?null:r)}function $s(e,t,n,r){var i=Ps();r=void 0===r?null:r;var a=void 0;if(null!==ms){var s=ms.memoizedState;if(a=s.destroy,null!==r&&xs(r,s.deps))return void(i.memoizedState=zs(t,n,a,r))}ds.flags|=e,i.memoizedState=zs(1|t,n,a,r)}function js(e,t){return Bs(8390656,8,e,t)}function Hs(e,t){return $s(2048,8,e,t)}function Gs(e,t){return $s(4,2,e,t)}function qs(e,t){return $s(4,4,e,t)}function Us(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ws(e,t,n){return n=null!=n?n.concat([e]):null,$s(4,4,Us.bind(null,t,e),n)}function Ks(){}function Ys(e,t){var n=Ps();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xs(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Qs(e,t){var n=Ps();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xs(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Xs(e,t,n){return 0==(21&ps)?(e.baseState&&(e.baseState=!1,ko=!0),e.memoizedState=n):(or(n,t)||(n=mt(),ds.lanes|=n,Ll|=n,e.baseState=!0),t)}function Zs(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=fs.transition;fs.transition={};try{e(!1),t()}finally{bt=n,fs.transition=r}}function Js(){return Ps().memoizedState}function eo(e,t,n){var r=tc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},no(e)?ro(t,n):null!==(n=Ta(e,t,n,r))&&(nc(n,e,r,ec()),io(n,t,r))}function to(e,t,n){var r=tc(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(no(e))ro(t,i);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,o=a(s,n);if(i.hasEagerState=!0,i.eagerState=o,or(o,s)){var l=t.interleaved;return null===l?(i.next=i,_a(t)):(i.next=l.next,l.next=i),void(t.interleaved=i)}}catch(e){}null!==(n=Ta(e,t,i,r))&&(nc(n,e,r,i=ec()),io(n,t,r))}}function no(e){var t=e.alternate;return e===ds||null!==t&&t===ds}function ro(e,t){vs=ys=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function io(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var ao={readContext:Ca,useCallback:Es,useContext:Es,useEffect:Es,useImperativeHandle:Es,useInsertionEffect:Es,useLayoutEffect:Es,useMemo:Es,useReducer:Es,useRef:Es,useState:Es,useDebugValue:Es,useDeferredValue:Es,useTransition:Es,useMutableSource:Es,useSyncExternalStore:Es,useId:Es,unstable_isNewReconciler:!1},so={readContext:Ca,useCallback:function(e,t){return Cs().memoizedState=[e,void 0===t?null:t],e},useContext:Ca,useEffect:js,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Bs(4194308,4,Us.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Bs(4194308,4,e,t)},useInsertionEffect:function(e,t){return Bs(4,2,e,t)},useMemo:function(e,t){var n=Cs();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Cs();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=eo.bind(null,ds,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Cs().memoizedState=e},useState:Os,useDebugValue:Ks,useDeferredValue:function(e){return Cs().memoizedState=e},useTransition:function(){var e=Os(!1),t=e[0];return e=Zs.bind(null,e[1]),Cs().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ds,i=Cs();if(ia){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Al)throw Error(a(349));0!=(30&ps)||Ds(r,t,n)}i.memoizedState=n;var s={value:n,getSnapshot:t};return i.queue=s,js(Rs.bind(null,r,s,e),[e]),r.flags|=2048,zs(9,Is.bind(null,r,s,n,t),void 0,null),n},useId:function(){var e=Cs(),t=Al.identifierPrefix;if(ia){var n=Xi;t=":"+t+"R"+(n=(Qi&~(1<<32-st(Qi)-1)).toString(32)+n),0<(n=bs++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ks++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},oo={readContext:Ca,useCallback:Ys,useContext:Ca,useEffect:Hs,useImperativeHandle:Ws,useInsertionEffect:Gs,useLayoutEffect:qs,useMemo:Qs,useReducer:Ts,useRef:Vs,useState:function(){return Ts(_s)},useDebugValue:Ks,useDeferredValue:function(e){return Xs(Ps(),ms.memoizedState,e)},useTransition:function(){return[Ts(_s)[0],Ps().memoizedState]},useMutableSource:Fs,useSyncExternalStore:Ms,useId:Js,unstable_isNewReconciler:!1},lo={readContext:Ca,useCallback:Ys,useContext:Ca,useEffect:Hs,useImperativeHandle:Ws,useInsertionEffect:Gs,useLayoutEffect:qs,useMemo:Qs,useReducer:As,useRef:Vs,useState:function(){return As(_s)},useDebugValue:Ks,useDeferredValue:function(e){var t=Ps();return null===ms?t.memoizedState=e:Xs(t,ms.memoizedState,e)},useTransition:function(){return[As(_s)[0],Ps().memoizedState]},useMutableSource:Fs,useSyncExternalStore:Ms,useId:Js,unstable_isNewReconciler:!1};function co(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i,digest:null}}function uo(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function ho(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fo="function"==typeof WeakMap?WeakMap:Map;function po(e,t,n){(n=Ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Gl||(Gl=!0,ql=r),ho(0,t)},n}function mo(e,t,n){(n=Ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){ho(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){ho(0,t),"function"!=typeof r&&(null===Ul?Ul=new Set([this]):Ul.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function go(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fo;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=Cc.bind(null,e,t,n),t.then(e,e))}function yo(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vo(e,t,n,r,i){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ia(-1,1)).tag=2,Ra(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=i,e)}var bo=k.ReactCurrentOwner,ko=!1;function Eo(e,t,n,r){t.child=null===e?Xa(t,null,n,r):Qa(t,e.child,n,r)}function xo(e,t,n,r,i){n=n.render;var a=t.ref;return Sa(t,i),r=ws(e,t,n,r,a,i),n=Ss(),null===e||ko?(ia&&n&&ea(t),t.flags|=1,Eo(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Go(e,t,i))}function wo(e,t,n,r,i){if(null===e){var a=n.type;return"function"!=typeof a||Dc(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Rc(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,So(e,t,a,r,i))}if(a=e.child,0==(e.lanes&i)){var s=a.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(s,r)&&e.ref===t.ref)return Go(e,t,i)}return t.flags|=1,(e=Ic(a,r)).ref=t.ref,e.return=t,t.child=e}function So(e,t,n,r,i){if(null!==e){var a=e.memoizedProps;if(lr(a,r)&&e.ref===t.ref){if(ko=!1,t.pendingProps=r=a,0==(e.lanes&i))return t.lanes=e.lanes,Go(e,t,i);0!=(131072&e.flags)&&(ko=!0)}}return _o(e,t,n,r,i)}function Co(e,t,n){var r=t.pendingProps,i=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Pi(Il,Dl),Dl|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Pi(Il,Dl),Dl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Pi(Il,Dl),Dl|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Pi(Il,Dl),Dl|=r;return Eo(e,t,i,n),t.child}function Po(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function _o(e,t,n,r,i){var a=Di(n)?Fi:Ti.current;return a=Mi(t,a),Sa(t,i),n=ws(e,t,n,r,a,i),r=Ss(),null===e||ko?(ia&&r&&ea(t),t.flags|=1,Eo(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Go(e,t,i))}function To(e,t,n,r,i){if(Di(n)){var a=!0;Li(t)}else a=!1;if(Sa(t,i),null===t.stateNode)Ho(e,t),Ha(t,n,r),qa(t,n,r,i),r=!0;else if(null===e){var s=t.stateNode,o=t.memoizedProps;s.props=o;var l=s.context,c=n.contextType;c="object"==typeof c&&null!==c?Ca(c):Mi(t,c=Di(n)?Fi:Ti.current);var u=n.getDerivedStateFromProps,h="function"==typeof u||"function"==typeof s.getSnapshotBeforeUpdate;h||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==r||l!==c)&&Ga(t,s,r,c),Fa=!1;var f=t.memoizedState;s.state=f,Oa(t,r,s,i),l=t.memoizedState,o!==r||f!==l||Ai.current||Fa?("function"==typeof u&&(Ba(t,n,u,r),l=t.memoizedState),(o=Fa||ja(t,n,o,r,f,l,c))?(h||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(t.flags|=4194308)):("function"==typeof s.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),s.props=r,s.state=l,s.context=c,r=o):("function"==typeof s.componentDidMount&&(t.flags|=4194308),r=!1)}else{s=t.stateNode,Da(e,t),o=t.memoizedProps,c=t.type===t.elementType?o:ga(t.type,o),s.props=c,h=t.pendingProps,f=s.context,l="object"==typeof(l=n.contextType)&&null!==l?Ca(l):Mi(t,l=Di(n)?Fi:Ti.current);var p=n.getDerivedStateFromProps;(u="function"==typeof p||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==h||f!==l)&&Ga(t,s,r,l),Fa=!1,f=t.memoizedState,s.state=f,Oa(t,r,s,i);var d=t.memoizedState;o!==h||f!==d||Ai.current||Fa?("function"==typeof p&&(Ba(t,n,p,r),d=t.memoizedState),(c=Fa||ja(t,n,c,r,f,d,l)||!1)?(u||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(r,d,l),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(r,d,l)),"function"==typeof s.componentDidUpdate&&(t.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=d),s.props=r,s.state=d,s.context=l,r=c):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Ao(e,t,n,r,a,i)}function Ao(e,t,n,r,i,a){Po(e,t);var s=0!=(128&t.flags);if(!r&&!s)return i&&Oi(t,n,!1),Go(e,t,a);r=t.stateNode,bo.current=t;var o=s&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&s?(t.child=Qa(t,e.child,null,a),t.child=Qa(t,null,o,a)):Eo(e,t,o,a),t.memoizedState=r.state,i&&Oi(t,n,!0),t.child}function Fo(e){var t=e.stateNode;t.pendingContext?Ri(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ri(0,t.context,!1),rs(e,t.containerInfo)}function Mo(e,t,n,r,i){return pa(),da(i),t.flags|=256,Eo(e,t,n,r),t.child}var Do,Io,Ro,No={dehydrated:null,treeContext:null,retryLane:0};function Lo(e){return{baseLanes:e,cachePool:null,transitions:null}}function Oo(e,t,n){var r,i=t.pendingProps,s=os.current,o=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&s)),r?(o=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(s|=1),Pi(os,1&s),null===e)return ca(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=i.children,e=i.fallback,o?(i=t.mode,o=t.child,l={mode:"hidden",children:l},0==(1&i)&&null!==o?(o.childLanes=0,o.pendingProps=l):o=Lc(l,i,0,null),e=Nc(e,i,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Lo(n),t.memoizedState=No,e):zo(t,l));if(null!==(s=e.memoizedState)&&null!==(r=s.dehydrated))return function(e,t,n,r,i,s,o){if(n)return 256&t.flags?(t.flags&=-257,Vo(e,t,o,r=uo(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(s=r.fallback,i=t.mode,r=Lc({mode:"visible",children:r.children},i,0,null),(s=Nc(s,i,o,null)).flags|=2,r.return=t,s.return=t,r.sibling=s,t.child=r,0!=(1&t.mode)&&Qa(t,e.child,null,o),t.child.memoizedState=Lo(o),t.memoizedState=No,s);if(0==(1&t.mode))return Vo(e,t,o,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var l=r.dgst;return r=l,Vo(e,t,o,r=uo(s=Error(a(419)),r,void 0))}if(l=0!=(o&e.childLanes),ko||l){if(null!==(r=Al)){switch(o&-o){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=0!=(i&(r.suspendedLanes|o))?0:i)&&i!==s.retryLane&&(s.retryLane=i,Aa(e,i),nc(r,e,i,-1))}return mc(),Vo(e,t,o,r=uo(Error(a(421))))}return"$?"===i.data?(t.flags|=128,t.child=e.child,t=_c.bind(null,e),i._reactRetry=t,null):(e=s.treeContext,ra=ci(i.nextSibling),na=t,ia=!0,aa=null,null!==e&&(Wi[Ki++]=Qi,Wi[Ki++]=Xi,Wi[Ki++]=Yi,Qi=e.id,Xi=e.overflow,Yi=t),(t=zo(t,r.children)).flags|=4096,t)}(e,t,l,i,r,s,n);if(o){o=i.fallback,l=t.mode,r=(s=e.child).sibling;var c={mode:"hidden",children:i.children};return 0==(1&l)&&t.child!==s?((i=t.child).childLanes=0,i.pendingProps=c,t.deletions=null):(i=Ic(s,c)).subtreeFlags=14680064&s.subtreeFlags,null!==r?o=Ic(r,o):(o=Nc(o,l,n,null)).flags|=2,o.return=t,i.return=t,i.sibling=o,t.child=i,i=o,o=t.child,l=null===(l=e.child.memoizedState)?Lo(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},o.memoizedState=l,o.childLanes=e.childLanes&~n,t.memoizedState=No,i}return e=(o=e.child).sibling,i=Ic(o,{mode:"visible",children:i.children}),0==(1&t.mode)&&(i.lanes=n),i.return=t,i.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=i,t.memoizedState=null,i}function zo(e,t){return(t=Lc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Vo(e,t,n,r){return null!==r&&da(r),Qa(t,e.child,null,n),(e=zo(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Bo(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),wa(e.return,t,n)}function $o(e,t,n,r,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i)}function jo(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail;if(Eo(e,t,r.children,n),0!=(2&(r=os.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bo(e,n,t);else if(19===e.tag)Bo(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Pi(os,r),0==(1&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===ls(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),$o(t,!1,i,n,a);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===ls(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}$o(t,!0,n,null,a);break;case"together":$o(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ho(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Go(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ll|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ic(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ic(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function qo(e,t){if(!ia)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Uo(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Wo(e,t,n){var r=t.pendingProps;switch(ta(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Uo(t),null;case 1:case 17:return Di(t.type)&&Ii(),Uo(t),null;case 3:return r=t.stateNode,is(),Ci(Ai),Ci(Ti),us(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(ha(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==aa&&(sc(aa),aa=null))),Uo(t),null;case 5:ss(t);var i=ns(ts.current);if(n=t.type,null!==e&&null!=t.stateNode)Io(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Uo(t),null}if(e=ns(Ja.current),ha(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[fi]=t,r[pi]=s,e=0!=(1&t.mode),n){case"dialog":Vr("cancel",r),Vr("close",r);break;case"iframe":case"object":case"embed":Vr("load",r);break;case"video":case"audio":for(i=0;i<Nr.length;i++)Vr(Nr[i],r);break;case"source":Vr("error",r);break;case"img":case"image":case"link":Vr("error",r),Vr("load",r);break;case"details":Vr("toggle",r);break;case"input":Q(r,s),Vr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Vr("invalid",r);break;case"textarea":ie(r,s),Vr("invalid",r)}for(var l in ve(n,s),i=null,s)if(s.hasOwnProperty(l)){var c=s[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==s.suppressHydrationWarning&&Zr(r.textContent,c,e),i=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==s.suppressHydrationWarning&&Zr(r.textContent,c,e),i=["children",""+c]):o.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Vr("scroll",r)}switch(n){case"input":U(r),J(r,s,!0);break;case"textarea":U(r),se(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Jr)}r=i,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[fi]=t,e[pi]=r,Do(e,t),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":Vr("cancel",e),Vr("close",e),i=r;break;case"iframe":case"object":case"embed":Vr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Nr.length;i++)Vr(Nr[i],e);i=r;break;case"source":Vr("error",e),i=r;break;case"img":case"image":case"link":Vr("error",e),Vr("load",e),i=r;break;case"details":Vr("toggle",e),i=r;break;case"input":Q(e,r),i=Y(e,r),Vr("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=O({},r,{value:void 0}),Vr("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),Vr("invalid",e)}for(s in ve(n,i),c=i)if(c.hasOwnProperty(s)){var u=c[s];"style"===s?ge(e,u):"dangerouslySetInnerHTML"===s?null!=(u=u?u.__html:void 0)&&he(e,u):"children"===s?"string"==typeof u?("textarea"!==n||""!==u)&&fe(e,u):"number"==typeof u&&fe(e,""+u):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(o.hasOwnProperty(s)?null!=u&&"onScroll"===s&&Vr("scroll",e):null!=u&&b(e,s,u,l))}switch(n){case"input":U(e),J(e,r,!1);break;case"textarea":U(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+G(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ne(e,!!r.multiple,s,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Uo(t),null;case 6:if(e&&null!=t.stateNode)Ro(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ns(ts.current),ns(Ja.current),ha(t)){if(r=t.stateNode,n=t.memoizedProps,r[fi]=t,(s=r.nodeValue!==n)&&null!==(e=na))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}s&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fi]=t,t.stateNode=r}return Uo(t),null;case 13:if(Ci(os),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ia&&null!==ra&&0!=(1&t.mode)&&0==(128&t.flags))fa(),pa(),t.flags|=98560,s=!1;else if(s=ha(t),null!==r&&null!==r.dehydrated){if(null===e){if(!s)throw Error(a(318));if(!(s=null!==(s=t.memoizedState)?s.dehydrated:null))throw Error(a(317));s[fi]=t}else pa(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Uo(t),s=!1}else null!==aa&&(sc(aa),aa=null),s=!0;if(!s)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&os.current)?0===Rl&&(Rl=3):mc())),null!==t.updateQueue&&(t.flags|=4),Uo(t),null);case 4:return is(),null===e&&jr(t.stateNode.containerInfo),Uo(t),null;case 10:return xa(t.type._context),Uo(t),null;case 19:if(Ci(os),null===(s=t.memoizedState))return Uo(t),null;if(r=0!=(128&t.flags),null===(l=s.rendering))if(r)qo(s,!1);else{if(0!==Rl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=ls(e))){for(t.flags|=128,qo(s,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=14680066,null===(l=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=l.childLanes,s.lanes=l.lanes,s.child=l.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=l.memoizedProps,s.memoizedState=l.memoizedState,s.updateQueue=l.updateQueue,s.type=l.type,e=l.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Pi(os,1&os.current|2),t.child}e=e.sibling}null!==s.tail&&Xe()>jl&&(t.flags|=128,r=!0,qo(s,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ls(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),qo(s,!0),null===s.tail&&"hidden"===s.tailMode&&!l.alternate&&!ia)return Uo(t),null}else 2*Xe()-s.renderingStartTime>jl&&1073741824!==n&&(t.flags|=128,r=!0,qo(s,!1),t.lanes=4194304);s.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=s.last)?n.sibling=l:t.child=l,s.last=l)}return null!==s.tail?(t=s.tail,s.rendering=t,s.tail=t.sibling,s.renderingStartTime=Xe(),t.sibling=null,n=os.current,Pi(os,r?1&n|2:1&n),t):(Uo(t),null);case 22:case 23:return hc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Dl)&&(Uo(t),6&t.subtreeFlags&&(t.flags|=8192)):Uo(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Ko(e,t){switch(ta(t),t.tag){case 1:return Di(t.type)&&Ii(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return is(),Ci(Ai),Ci(Ti),us(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ss(t),null;case 13:if(Ci(os),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));pa()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ci(os),null;case 4:return is(),null;case 10:return xa(t.type._context),null;case 22:case 23:return hc(),null;default:return null}}Do=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Io=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,ns(Ja.current);var a,s=null;switch(n){case"input":i=Y(e,i),r=Y(e,r),s=[];break;case"select":i=O({},i,{value:void 0}),r=O({},r,{value:void 0}),s=[];break;case"textarea":i=re(e,i),r=re(e,r),s=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(u in ve(n,r),n=null,i)if(!r.hasOwnProperty(u)&&i.hasOwnProperty(u)&&null!=i[u])if("style"===u){var l=i[u];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(o.hasOwnProperty(u)?s||(s=[]):(s=s||[]).push(u,null));for(u in r){var c=r[u];if(l=null!=i?i[u]:void 0,r.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(a in l)!l.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&l[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(s=s||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(o.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Vr("scroll",e),s||l===c||(s=[])):(s=s||[]).push(u,c))}n&&(s=s||[]).push("style",n);var u=s;(t.updateQueue=u)&&(t.flags|=4)}},Ro=function(e,t,n,r){n!==r&&(t.flags|=4)};var Yo=!1,Qo=!1,Xo="function"==typeof WeakSet?WeakSet:Set,Zo=null;function Jo(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Sc(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){Sc(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var a=i.destroy;i.destroy=void 0,void 0!==a&&el(t,n,a)}i=i.next}while(i!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function al(e){var t=e.alternate;null!==t&&(e.alternate=null,al(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fi],delete t[pi],delete t[mi],delete t[gi],delete t[yi]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function sl(e){return 5===e.tag||3===e.tag||4===e.tag}function ol(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||sl(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function cl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cl(e,t,n),e=e.sibling;null!==e;)cl(e,t,n),e=e.sibling}var ul=null,hl=!1;function fl(e,t,n){for(n=n.child;null!==n;)pl(e,t,n),n=n.sibling}function pl(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:Qo||Jo(n,t);case 6:var r=ul,i=hl;ul=null,fl(e,t,n),hl=i,null!==(ul=r)&&(hl?(e=ul,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ul.removeChild(n.stateNode));break;case 18:null!==ul&&(hl?(e=ul,n=n.stateNode,8===e.nodeType?li(e.parentNode,n):1===e.nodeType&&li(e,n),jt(e)):li(ul,n.stateNode));break;case 4:r=ul,i=hl,ul=n.stateNode.containerInfo,hl=!0,fl(e,t,n),ul=r,hl=i;break;case 0:case 11:case 14:case 15:if(!Qo&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var a=i,s=a.destroy;a=a.tag,void 0!==s&&(0!=(2&a)||0!=(4&a))&&el(n,t,s),i=i.next}while(i!==r)}fl(e,t,n);break;case 1:if(!Qo&&(Jo(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Sc(n,t,e)}fl(e,t,n);break;case 21:fl(e,t,n);break;case 22:1&n.mode?(Qo=(r=Qo)||null!==n.memoizedState,fl(e,t,n),Qo=r):fl(e,t,n);break;default:fl(e,t,n)}}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xo),t.forEach((function(t){var r=Tc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ml(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r];try{var s=e,o=t,l=o;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,hl=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,hl=!0;break e}l=l.return}if(null===ul)throw Error(a(160));pl(s,o,i),ul=null,hl=!1;var c=i.alternate;null!==c&&(c.return=null),i.return=null}catch(e){Sc(i,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gl(t,e),t=t.sibling}function gl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),yl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){Sc(e,e.return,t)}try{nl(5,e,e.return)}catch(t){Sc(e,e.return,t)}}break;case 1:ml(t,e),yl(e),512&r&&null!==n&&Jo(n,n.return);break;case 5:if(ml(t,e),yl(e),512&r&&null!==n&&Jo(n,n.return),32&e.flags){var i=e.stateNode;try{fe(i,"")}catch(t){Sc(e,e.return,t)}}if(4&r&&null!=(i=e.stateNode)){var s=e.memoizedProps,o=null!==n?n.memoizedProps:s,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===s.type&&null!=s.name&&X(i,s),be(l,o);var u=be(l,s);for(o=0;o<c.length;o+=2){var h=c[o],f=c[o+1];"style"===h?ge(i,f):"dangerouslySetInnerHTML"===h?he(i,f):"children"===h?fe(i,f):b(i,h,f,u)}switch(l){case"input":Z(i,s);break;case"textarea":ae(i,s);break;case"select":var p=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!s.multiple;var d=s.value;null!=d?ne(i,!!s.multiple,d,!1):p!==!!s.multiple&&(null!=s.defaultValue?ne(i,!!s.multiple,s.defaultValue,!0):ne(i,!!s.multiple,s.multiple?[]:"",!1))}i[pi]=s}catch(t){Sc(e,e.return,t)}}break;case 6:if(ml(t,e),yl(e),4&r){if(null===e.stateNode)throw Error(a(162));i=e.stateNode,s=e.memoizedProps;try{i.nodeValue=s}catch(t){Sc(e,e.return,t)}}break;case 3:if(ml(t,e),yl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{jt(t.containerInfo)}catch(t){Sc(e,e.return,t)}break;case 4:default:ml(t,e),yl(e);break;case 13:ml(t,e),yl(e),8192&(i=e.child).flags&&(s=null!==i.memoizedState,i.stateNode.isHidden=s,!s||null!==i.alternate&&null!==i.alternate.memoizedState||($l=Xe())),4&r&&dl(e);break;case 22:if(h=null!==n&&null!==n.memoizedState,1&e.mode?(Qo=(u=Qo)||h,ml(t,e),Qo=u):ml(t,e),yl(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!h&&0!=(1&e.mode))for(Zo=e,h=e.child;null!==h;){for(f=Zo=h;null!==Zo;){switch(d=(p=Zo).child,p.tag){case 0:case 11:case 14:case 15:nl(4,p,p.return);break;case 1:Jo(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Sc(r,n,e)}}break;case 5:Jo(p,p.return);break;case 22:if(null!==p.memoizedState){El(f);continue}}null!==d?(d.return=p,Zo=d):El(f)}h=h.sibling}e:for(h=null,f=e;;){if(5===f.tag){if(null===h){h=f;try{i=f.stateNode,u?"function"==typeof(s=i.style).setProperty?s.setProperty("display","none","important"):s.display="none":(l=f.stateNode,o=null!=(c=f.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=me("display",o))}catch(t){Sc(e,e.return,t)}}}else if(6===f.tag){if(null===h)try{f.stateNode.nodeValue=u?"":f.memoizedProps}catch(t){Sc(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;h===f&&(h=null),f=f.return}h===f&&(h=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:ml(t,e),yl(e),4&r&&dl(e);case 21:}}function yl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(sl(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(fe(i,""),r.flags&=-33),cl(e,ol(e),i);break;case 3:case 4:var s=r.stateNode.containerInfo;ll(e,ol(e),s);break;default:throw Error(a(161))}}catch(t){Sc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function vl(e,t,n){Zo=e,bl(e,t,n)}function bl(e,t,n){for(var r=0!=(1&e.mode);null!==Zo;){var i=Zo,a=i.child;if(22===i.tag&&r){var s=null!==i.memoizedState||Yo;if(!s){var o=i.alternate,l=null!==o&&null!==o.memoizedState||Qo;o=Yo;var c=Qo;if(Yo=s,(Qo=l)&&!c)for(Zo=i;null!==Zo;)l=(s=Zo).child,22===s.tag&&null!==s.memoizedState?xl(i):null!==l?(l.return=s,Zo=l):xl(i);for(;null!==a;)Zo=a,bl(a,t,n),a=a.sibling;Zo=i,Yo=o,Qo=c}kl(e)}else 0!=(8772&i.subtreeFlags)&&null!==a?(a.return=i,Zo=a):kl(e)}}function kl(e){for(;null!==Zo;){var t=Zo;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Qo||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Qo)if(null===n)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:ga(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var s=t.updateQueue;null!==s&&za(t,s,r);break;case 3:var o=t.updateQueue;if(null!==o){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}za(t,o,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var h=u.memoizedState;if(null!==h){var f=h.dehydrated;null!==f&&jt(f)}}}break;default:throw Error(a(163))}Qo||512&t.flags&&il(t)}catch(e){Sc(t,t.return,e)}}if(t===e){Zo=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zo=n;break}Zo=t.return}}function El(e){for(;null!==Zo;){var t=Zo;if(t===e){Zo=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zo=n;break}Zo=t.return}}function xl(e){for(;null!==Zo;){var t=Zo;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){Sc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var i=t.return;try{r.componentDidMount()}catch(e){Sc(t,i,e)}}var a=t.return;try{il(t)}catch(e){Sc(t,a,e)}break;case 5:var s=t.return;try{il(t)}catch(e){Sc(t,s,e)}}}catch(e){Sc(t,t.return,e)}if(t===e){Zo=null;break}var o=t.sibling;if(null!==o){o.return=t.return,Zo=o;break}Zo=t.return}}var wl,Sl=Math.ceil,Cl=k.ReactCurrentDispatcher,Pl=k.ReactCurrentOwner,_l=k.ReactCurrentBatchConfig,Tl=0,Al=null,Fl=null,Ml=0,Dl=0,Il=Si(0),Rl=0,Nl=null,Ll=0,Ol=0,zl=0,Vl=null,Bl=null,$l=0,jl=1/0,Hl=null,Gl=!1,ql=null,Ul=null,Wl=!1,Kl=null,Yl=0,Ql=0,Xl=null,Zl=-1,Jl=0;function ec(){return 0!=(6&Tl)?Xe():-1!==Zl?Zl:Zl=Xe()}function tc(e){return 0==(1&e.mode)?1:0!=(2&Tl)&&0!==Ml?Ml&-Ml:null!==ma.transition?(0===Jl&&(Jl=mt()),Jl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function nc(e,t,n,r){if(50<Ql)throw Ql=0,Xl=null,Error(a(185));yt(e,n,r),0!=(2&Tl)&&e===Al||(e===Al&&(0==(2&Tl)&&(Ol|=n),4===Rl&&oc(e,Ml)),rc(e,r),1===n&&0===Tl&&0==(1&t.mode)&&(jl=Xe()+500,Vi&&ji()))}function rc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,a=e.pendingLanes;0<a;){var s=31-st(a),o=1<<s,l=i[s];-1===l?0!=(o&n)&&0==(o&r)||(i[s]=pt(o,t)):l<=t&&(e.expiredLanes|=o),a&=~o}}(e,t);var r=ft(e,e===Al?Ml:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Vi=!0,$i(e)}(lc.bind(null,e)):$i(lc.bind(null,e)),si((function(){0==(6&Tl)&&ji()})),n=null;else{switch(kt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ac(n,ic.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ic(e,t){if(Zl=-1,Jl=0,0!=(6&Tl))throw Error(a(327));var n=e.callbackNode;if(xc()&&e.callbackNode!==n)return null;var r=ft(e,e===Al?Ml:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=gc(e,r);else{t=r;var i=Tl;Tl|=2;var s=dc();for(Al===e&&Ml===t||(Hl=null,jl=Xe()+500,fc(e,t));;)try{vc();break}catch(t){pc(e,t)}Ea(),Cl.current=s,Tl=i,null!==Fl?t=0:(Al=null,Ml=0,t=Rl)}if(0!==t){if(2===t&&0!==(i=dt(e))&&(r=i,t=ac(e,i)),1===t)throw n=Nl,fc(e,0),oc(e,r),rc(e,Xe()),n;if(6===t)oc(e,r);else{if(i=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],a=i.getSnapshot;i=i.value;try{if(!or(a(),i))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(i)&&(2===(t=gc(e,r))&&0!==(s=dt(e))&&(r=s,t=ac(e,s)),1===t))throw n=Nl,fc(e,0),oc(e,r),rc(e,Xe()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Ec(e,Bl,Hl);break;case 3:if(oc(e,r),(130023424&r)===r&&10<(t=$l+500-Xe())){if(0!==ft(e,0))break;if(((i=e.suspendedLanes)&r)!==r){ec(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(Ec.bind(null,e,Bl,Hl),t);break}Ec(e,Bl,Hl);break;case 4:if(oc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,i=-1;0<r;){var o=31-st(r);s=1<<o,(o=t[o])>i&&(i=o),r&=~s}if(r=i,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Sl(r/1960))-r)){e.timeoutHandle=ri(Ec.bind(null,e,Bl,Hl),r);break}Ec(e,Bl,Hl);break;default:throw Error(a(329))}}}return rc(e,Xe()),e.callbackNode===n?ic.bind(null,e):null}function ac(e,t){var n=Vl;return e.current.memoizedState.isDehydrated&&(fc(e,t).flags|=256),2!==(e=gc(e,t))&&(t=Bl,Bl=n,null!==t&&sc(t)),e}function sc(e){null===Bl?Bl=e:Bl.push.apply(Bl,e)}function oc(e,t){for(t&=~zl,t&=~Ol,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-st(t),r=1<<n;e[n]=-1,t&=~r}}function lc(e){if(0!=(6&Tl))throw Error(a(327));xc();var t=ft(e,0);if(0==(1&t))return rc(e,Xe()),null;var n=gc(e,t);if(0!==e.tag&&2===n){var r=dt(e);0!==r&&(t=r,n=ac(e,r))}if(1===n)throw n=Nl,fc(e,0),oc(e,t),rc(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ec(e,Bl,Hl),rc(e,Xe()),null}function cc(e,t){var n=Tl;Tl|=1;try{return e(t)}finally{0===(Tl=n)&&(jl=Xe()+500,Vi&&ji())}}function uc(e){null!==Kl&&0===Kl.tag&&0==(6&Tl)&&xc();var t=Tl;Tl|=1;var n=_l.transition,r=bt;try{if(_l.transition=null,bt=1,e)return e()}finally{bt=r,_l.transition=n,0==(6&(Tl=t))&&ji()}}function hc(){Dl=Il.current,Ci(Il)}function fc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ii(n)),null!==Fl)for(n=Fl.return;null!==n;){var r=n;switch(ta(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ii();break;case 3:is(),Ci(Ai),Ci(Ti),us();break;case 5:ss(r);break;case 4:is();break;case 13:case 19:Ci(os);break;case 10:xa(r.type._context);break;case 22:case 23:hc()}n=n.return}if(Al=e,Fl=e=Ic(e.current,null),Ml=Dl=t,Rl=0,Nl=null,zl=Ol=Ll=0,Bl=Vl=null,null!==Pa){for(t=0;t<Pa.length;t++)if(null!==(r=(n=Pa[t]).interleaved)){n.interleaved=null;var i=r.next,a=n.pending;if(null!==a){var s=a.next;a.next=i,r.next=s}n.pending=r}Pa=null}return e}function pc(e,t){for(;;){var n=Fl;try{if(Ea(),hs.current=ao,ys){for(var r=ds.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}ys=!1}if(ps=0,gs=ms=ds=null,vs=!1,bs=0,Pl.current=null,null===n||null===n.return){Rl=1,Nl=t,Fl=null;break}e:{var s=e,o=n.return,l=n,c=t;if(t=Ml,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,h=l,f=h.tag;if(0==(1&h.mode)&&(0===f||11===f||15===f)){var p=h.alternate;p?(h.updateQueue=p.updateQueue,h.memoizedState=p.memoizedState,h.lanes=p.lanes):(h.updateQueue=null,h.memoizedState=null)}var d=yo(o);if(null!==d){d.flags&=-257,vo(d,o,l,0,t),1&d.mode&&go(s,u,t),c=u;var m=(t=d).updateQueue;if(null===m){var g=new Set;g.add(c),t.updateQueue=g}else m.add(c);break e}if(0==(1&t)){go(s,u,t),mc();break e}c=Error(a(426))}else if(ia&&1&l.mode){var y=yo(o);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),vo(y,o,l,0,t),da(co(c,l));break e}}s=c=co(c,l),4!==Rl&&(Rl=2),null===Vl?Vl=[s]:Vl.push(s),s=o;do{switch(s.tag){case 3:s.flags|=65536,t&=-t,s.lanes|=t,La(s,po(0,c,t));break e;case 1:l=c;var v=s.type,b=s.stateNode;if(0==(128&s.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Ul||!Ul.has(b)))){s.flags|=65536,t&=-t,s.lanes|=t,La(s,mo(s,l,t));break e}}s=s.return}while(null!==s)}kc(n)}catch(e){t=e,Fl===n&&null!==n&&(Fl=n=n.return);continue}break}}function dc(){var e=Cl.current;return Cl.current=ao,null===e?ao:e}function mc(){0!==Rl&&3!==Rl&&2!==Rl||(Rl=4),null===Al||0==(268435455&Ll)&&0==(268435455&Ol)||oc(Al,Ml)}function gc(e,t){var n=Tl;Tl|=2;var r=dc();for(Al===e&&Ml===t||(Hl=null,fc(e,t));;)try{yc();break}catch(t){pc(e,t)}if(Ea(),Tl=n,Cl.current=r,null!==Fl)throw Error(a(261));return Al=null,Ml=0,Rl}function yc(){for(;null!==Fl;)bc(Fl)}function vc(){for(;null!==Fl&&!Ye();)bc(Fl)}function bc(e){var t=wl(e.alternate,e,Dl);e.memoizedProps=e.pendingProps,null===t?kc(e):Fl=t,Pl.current=null}function kc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Wo(n,t,Dl)))return void(Fl=n)}else{if(null!==(n=Ko(n,t)))return n.flags&=32767,void(Fl=n);if(null===e)return Rl=6,void(Fl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Fl=t);Fl=t=e}while(null!==t);0===Rl&&(Rl=5)}function Ec(e,t,n){var r=bt,i=_l.transition;try{_l.transition=null,bt=1,function(e,t,n,r){do{xc()}while(null!==Kl);if(0!=(6&Tl))throw Error(a(327));n=e.finishedWork;var i=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var s=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-st(n),a=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~a}}(e,s),e===Al&&(Fl=Al=null,Ml=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Wl||(Wl=!0,Ac(tt,(function(){return xc(),null}))),s=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||s){s=_l.transition,_l.transition=null;var o=bt;bt=1;var l=Tl;Tl|=4,Pl.current=null,function(e,t){if(ei=Gt,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,s=r.focusNode;r=r.focusOffset;try{n.nodeType,s.nodeType}catch(e){n=null;break e}var o=0,l=-1,c=-1,u=0,h=0,f=e,p=null;t:for(;;){for(var d;f!==n||0!==i&&3!==f.nodeType||(l=o+i),f!==s||0!==r&&3!==f.nodeType||(c=o+r),3===f.nodeType&&(o+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===e)break t;if(p===n&&++u===i&&(l=o),p===s&&++h===r&&(c=o),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}n=-1===l||-1===c?null:{start:l,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(ti={focusedElem:e,selectionRange:n},Gt=!1,Zo=t;null!==Zo;)if(e=(t=Zo).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zo=e;else for(;null!==Zo;){t=Zo;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,y=m.memoizedState,v=t.stateNode,b=v.getSnapshotBeforeUpdate(t.elementType===t.type?g:ga(t.type,g),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var k=t.stateNode.containerInfo;1===k.nodeType?k.textContent="":9===k.nodeType&&k.documentElement&&k.removeChild(k.documentElement);break;default:throw Error(a(163))}}catch(e){Sc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zo=e;break}Zo=t.return}m=tl,tl=!1}(e,n),gl(n,e),dr(ti),Gt=!!ei,ti=ei=null,e.current=n,vl(n,e,i),Qe(),Tl=l,bt=o,_l.transition=s}else e.current=n;if(Wl&&(Wl=!1,Kl=e,Yl=i),0===(s=e.pendingLanes)&&(Ul=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(it,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),rc(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((i=t[n]).value,{componentStack:i.stack,digest:i.digest});if(Gl)throw Gl=!1,e=ql,ql=null,e;0!=(1&Yl)&&0!==e.tag&&xc(),0!=(1&(s=e.pendingLanes))?e===Xl?Ql++:(Ql=0,Xl=e):Ql=0,ji()}(e,t,n,r)}finally{_l.transition=i,bt=r}return null}function xc(){if(null!==Kl){var e=kt(Yl),t=_l.transition,n=bt;try{if(_l.transition=null,bt=16>e?16:e,null===Kl)var r=!1;else{if(e=Kl,Kl=null,Yl=0,0!=(6&Tl))throw Error(a(331));var i=Tl;for(Tl|=4,Zo=e.current;null!==Zo;){var s=Zo,o=s.child;if(0!=(16&Zo.flags)){var l=s.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Zo=u;null!==Zo;){var h=Zo;switch(h.tag){case 0:case 11:case 15:nl(8,h,s)}var f=h.child;if(null!==f)f.return=h,Zo=f;else for(;null!==Zo;){var p=(h=Zo).sibling,d=h.return;if(al(h),h===u){Zo=null;break}if(null!==p){p.return=d,Zo=p;break}Zo=d}}}var m=s.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Zo=s}}if(0!=(2064&s.subtreeFlags)&&null!==o)o.return=s,Zo=o;else e:for(;null!==Zo;){if(0!=(2048&(s=Zo).flags))switch(s.tag){case 0:case 11:case 15:nl(9,s,s.return)}var v=s.sibling;if(null!==v){v.return=s.return,Zo=v;break e}Zo=s.return}}var b=e.current;for(Zo=b;null!==Zo;){var k=(o=Zo).child;if(0!=(2064&o.subtreeFlags)&&null!==k)k.return=o,Zo=k;else e:for(o=b;null!==Zo;){if(0!=(2048&(l=Zo).flags))try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){Sc(l,l.return,e)}if(l===o){Zo=null;break e}var E=l.sibling;if(null!==E){E.return=l.return,Zo=E;break e}Zo=l.return}}if(Tl=i,ji(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{bt=n,_l.transition=t}}return!1}function wc(e,t,n){e=Ra(e,t=po(0,t=co(n,t),1),1),t=ec(),null!==e&&(yt(e,1,t),rc(e,t))}function Sc(e,t,n){if(3===e.tag)wc(e,e,n);else for(;null!==t;){if(3===t.tag){wc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ul||!Ul.has(r))){t=Ra(t,e=mo(t,e=co(n,e),1),1),e=ec(),null!==t&&(yt(t,1,e),rc(t,e));break}}t=t.return}}function Cc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&n,Al===e&&(Ml&n)===n&&(4===Rl||3===Rl&&(130023424&Ml)===Ml&&500>Xe()-$l?fc(e,0):zl|=n),rc(e,t)}function Pc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ut,0==(130023424&(ut<<=1))&&(ut=4194304)));var n=ec();null!==(e=Aa(e,t))&&(yt(e,t,n),rc(e,n))}function _c(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Pc(e,n)}function Tc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Pc(e,n)}function Ac(e,t){return We(e,t)}function Fc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Mc(e,t,n,r){return new Fc(e,t,n,r)}function Dc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ic(e,t){var n=e.alternate;return null===n?((n=Mc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Rc(e,t,n,r,i,s){var o=2;if(r=e,"function"==typeof e)Dc(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case w:return Nc(n.children,i,s,t);case S:o=8,i|=8;break;case C:return(e=Mc(12,n,t,2|i)).elementType=C,e.lanes=s,e;case A:return(e=Mc(13,n,t,i)).elementType=A,e.lanes=s,e;case F:return(e=Mc(19,n,t,i)).elementType=F,e.lanes=s,e;case I:return Lc(n,i,s,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:o=10;break e;case _:o=9;break e;case T:o=11;break e;case M:o=14;break e;case D:o=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Mc(o,n,t,i)).elementType=e,t.type=r,t.lanes=s,t}function Nc(e,t,n,r){return(e=Mc(7,e,r,t)).lanes=n,e}function Lc(e,t,n,r){return(e=Mc(22,e,r,t)).elementType=I,e.lanes=n,e.stateNode={isHidden:!1},e}function Oc(e,t,n){return(e=Mc(6,e,null,t)).lanes=n,e}function zc(e,t,n){return(t=Mc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vc(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Bc(e,t,n,r,i,a,s,o,l){return e=new Vc(e,t,n,o,l),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Mc(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ma(a),e}function $c(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function jc(e){if(!e)return _i;e:{if(je(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Di(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Di(n))return Ni(e,n,t)}return t}function Hc(e,t,n,r,i,a,s,o,l){return(e=Bc(n,r,!0,e,0,a,0,o,l)).context=jc(null),n=e.current,(a=Ia(r=ec(),i=tc(n))).callback=null!=t?t:null,Ra(n,a,i),e.current.lanes=i,yt(e,i,r),rc(e,r),e}function Gc(e,t,n,r){var i=t.current,a=ec(),s=tc(i);return n=jc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ia(a,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ra(i,t,s))&&(nc(e,i,s,a),Na(e,i,s)),s}function qc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Uc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Wc(e,t){Uc(e,t),(e=e.alternate)&&Uc(e,t)}wl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ai.current)ko=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return ko=!1,function(e,t,n){switch(t.tag){case 3:Fo(t),pa();break;case 5:as(t);break;case 1:Di(t.type)&&Li(t);break;case 4:rs(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;Pi(ya,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Pi(os,1&os.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Oo(e,t,n):(Pi(os,1&os.current),null!==(e=Go(e,t,n))?e.sibling:null);Pi(os,1&os.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return jo(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),Pi(os,os.current),r)break;return null;case 22:case 23:return t.lanes=0,Co(e,t,n)}return Go(e,t,n)}(e,t,n);ko=0!=(131072&e.flags)}else ko=!1,ia&&0!=(1048576&t.flags)&&Ji(t,Ui,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ho(e,t),e=t.pendingProps;var i=Mi(t,Ti.current);Sa(t,n),i=ws(null,t,r,e,i,n);var s=Ss();return t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Di(r)?(s=!0,Li(t)):s=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Ma(t),i.updater=$a,t.stateNode=i,i._reactInternals=t,qa(t,r,e,n),t=Ao(null,t,r,!0,s,n)):(t.tag=0,ia&&s&&ea(t),Eo(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ho(e,t),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return Dc(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===M)return 14}return 2}(r),e=ga(r,e),i){case 0:t=_o(null,t,r,e,n);break e;case 1:t=To(null,t,r,e,n);break e;case 11:t=xo(null,t,r,e,n);break e;case 14:t=wo(null,t,r,ga(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,_o(e,t,r,i=t.elementType===r?i:ga(r,i),n);case 1:return r=t.type,i=t.pendingProps,To(e,t,r,i=t.elementType===r?i:ga(r,i),n);case 3:e:{if(Fo(t),null===e)throw Error(a(387));r=t.pendingProps,i=(s=t.memoizedState).element,Da(e,t),Oa(t,r,null,n);var o=t.memoizedState;if(r=o.element,s.isDehydrated){if(s={element:r,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=s,t.memoizedState=s,256&t.flags){t=Mo(e,t,r,n,i=co(Error(a(423)),t));break e}if(r!==i){t=Mo(e,t,r,n,i=co(Error(a(424)),t));break e}for(ra=ci(t.stateNode.containerInfo.firstChild),na=t,ia=!0,aa=null,n=Xa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pa(),r===i){t=Go(e,t,n);break e}Eo(e,t,r,n)}t=t.child}return t;case 5:return as(t),null===e&&ca(t),r=t.type,i=t.pendingProps,s=null!==e?e.memoizedProps:null,o=i.children,ni(r,i)?o=null:null!==s&&ni(r,s)&&(t.flags|=32),Po(e,t),Eo(e,t,o,n),t.child;case 6:return null===e&&ca(t),null;case 13:return Oo(e,t,n);case 4:return rs(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Qa(t,null,r,n):Eo(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,xo(e,t,r,i=t.elementType===r?i:ga(r,i),n);case 7:return Eo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Eo(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,s=t.memoizedProps,o=i.value,Pi(ya,r._currentValue),r._currentValue=o,null!==s)if(or(s.value,o)){if(s.children===i.children&&!Ai.current){t=Go(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var l=s.dependencies;if(null!==l){o=s.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===s.tag){(c=Ia(-1,n&-n)).tag=2;var u=s.updateQueue;if(null!==u){var h=(u=u.shared).pending;null===h?c.next=c:(c.next=h.next,h.next=c),u.pending=c}}s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),wa(s.return,n,t),l.lanes|=n;break}c=c.next}}else if(10===s.tag)o=s.type===t.type?null:s.child;else if(18===s.tag){if(null===(o=s.return))throw Error(a(341));o.lanes|=n,null!==(l=o.alternate)&&(l.lanes|=n),wa(o,n,t),o=s.sibling}else o=s.child;if(null!==o)o.return=s;else for(o=s;null!==o;){if(o===t){o=null;break}if(null!==(s=o.sibling)){s.return=o.return,o=s;break}o=o.return}s=o}Eo(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,Sa(t,n),r=r(i=Ca(i)),t.flags|=1,Eo(e,t,r,n),t.child;case 14:return i=ga(r=t.type,t.pendingProps),wo(e,t,r,i=ga(r.type,i),n);case 15:return So(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:ga(r,i),Ho(e,t),t.tag=1,Di(r)?(e=!0,Li(t)):e=!1,Sa(t,n),Ha(t,r,i),qa(t,r,i,n),Ao(null,t,r,!0,e,n);case 19:return jo(e,t,n);case 22:return Co(e,t,n)}throw Error(a(156,t.tag))};var Kc="function"==typeof reportError?reportError:function(e){console.error(e)};function Yc(e){this._internalRoot=e}function Qc(e){this._internalRoot=e}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Jc(){}function eu(e,t,n,r,i){var a=n._reactRootContainer;if(a){var s=a;if("function"==typeof i){var o=i;i=function(){var e=qc(s);o.call(e)}}Gc(t,s,e,i)}else s=function(e,t,n,r,i){if(i){if("function"==typeof r){var a=r;r=function(){var e=qc(s);a.call(e)}}var s=Hc(t,r,e,0,null,!1,0,"",Jc);return e._reactRootContainer=s,e[di]=s.current,jr(8===e.nodeType?e.parentNode:e),uc(),s}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var o=r;r=function(){var e=qc(l);o.call(e)}}var l=Bc(e,0,!1,null,0,!1,0,"",Jc);return e._reactRootContainer=l,e[di]=l.current,jr(8===e.nodeType?e.parentNode:e),uc((function(){Gc(t,l,n,r)})),l}(n,t,e,i,r);return qc(s)}Qc.prototype.render=Yc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Gc(e,t,null,null)},Qc.prototype.unmount=Yc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;uc((function(){Gc(null,e,null,null)})),t[di]=null}},Qc.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<It.length&&0!==t&&t<It[n].priority;n++);It.splice(n,0,e),0===n&&Ot(e)}},Et=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ht(t.pendingLanes);0!==n&&(vt(t,1|n),rc(t,Xe()),0==(6&Tl)&&(jl=Xe()+500,ji()))}break;case 13:uc((function(){var t=Aa(e,1);if(null!==t){var n=ec();nc(t,e,1,n)}})),Wc(e,1)}},xt=function(e){if(13===e.tag){var t=Aa(e,134217728);null!==t&&nc(t,e,134217728,ec()),Wc(e,134217728)}},wt=function(e){if(13===e.tag){var t=tc(e),n=Aa(e,t);null!==n&&nc(n,e,t,ec()),Wc(e,t)}},St=function(){return bt},Ct=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},xe=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Ei(r);if(!i)throw Error(a(90));W(r),Z(r,i)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Te=cc,Ae=uc;var tu={usingClientEntryPoint:!1,Events:[bi,ki,Ei,Pe,_e,cc]},nu={findFiberByHostInstance:vi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ru={bundleType:nu.bundleType,version:nu.version,rendererPackageName:nu.rendererPackageName,rendererConfig:nu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=qe(e))?null:e.stateNode},findFiberByHostInstance:nu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var iu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!iu.isDisabled&&iu.supportsFiber)try{it=iu.inject(ru),at=iu}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xc(t))throw Error(a(200));return $c(e,t,null,n)},t.createRoot=function(e,t){if(!Xc(e))throw Error(a(299));var n=!1,r="",i=Kc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),t=Bc(e,1,!1,null,0,n,0,r,i),e[di]=t.current,jr(8===e.nodeType?e.parentNode:e),new Yc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=qe(t))?null:e.stateNode},t.flushSync=function(e){return uc(e)},t.hydrate=function(e,t,n){if(!Zc(t))throw Error(a(200));return eu(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xc(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,i=!1,s="",o=Kc;if(null!=n&&(!0===n.unstable_strictMode&&(i=!0),void 0!==n.identifierPrefix&&(s=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),t=Hc(t,null,e,1,null!=n?n:null,i,0,s,o),e[di]=t.current,jr(e),r)for(e=0;e<r.length;e++)i=(i=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Qc(t)},t.render=function(e,t,n){if(!Zc(t))throw Error(a(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zc(e))throw Error(a(40));return!!e._reactRootContainer&&(uc((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[di]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return eu(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:function(e,t,n){"use strict";var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,s=n?Symbol.for("react.strict_mode"):60108,o=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,h=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,d=(n&&Symbol.for("react.suspense_list"),n?Symbol.for("react.memo"):60115),m=n?Symbol.for("react.lazy"):60116;n&&Symbol.for("react.block"),n&&Symbol.for("react.fundamental"),n&&Symbol.for("react.responder"),n&&Symbol.for("react.scope");function g(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case u:case h:case a:case o:case s:case p:return e;default:switch(e=e&&e.$$typeof){case c:case f:case m:case d:case l:return e;default:return t}}case i:return t}}}t.isFragment=function(e){return g(e)===a},t.isMemo=function(e){return g(e)===d}},864:function(e,t,n){"use strict";e.exports=n(921)},408:function(e,t){"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),s=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),h=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,d={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||d}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||d}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var k=b.prototype=new v;k.constructor=b,m(k,y.prototype),k.isPureReactComponent=!0;var E=Array.isArray,x=Object.prototype.hasOwnProperty,w={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var i,a={},s=null,o=null;if(null!=t)for(i in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(s=""+t.key),t)x.call(t,i)&&!S.hasOwnProperty(i)&&(a[i]=t[i]);var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];a.children=c}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===a[i]&&(a[i]=l[i]);return{$$typeof:n,type:e,key:s,ref:o,props:a,_owner:w.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function A(e,t,i,a,s){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var l=!1;if(null===e)l=!0;else switch(o){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return s=s(l=e),e=""===a?"."+T(l,0):a,E(s)?(i="",null!=e&&(i=e.replace(_,"$&/")+"/"),A(s,t,i,"",(function(e){return e}))):null!=s&&(P(s)&&(s=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(s,i+(!s.key||l&&l.key===s.key?"":(""+s.key).replace(_,"$&/")+"/")+e)),t.push(s)),1;if(l=0,a=""===a?".":a+":",E(e))for(var c=0;c<e.length;c++){var u=a+T(o=e[c],c);l+=A(o,t,i,u,s)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(o=e.next()).done;)l+=A(o=o.value,t,i,u=a+T(o,c++),s);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function F(e,t,n){if(null==e)return e;var r=[],i=0;return A(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function M(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var D={current:null},I={transition:null},R={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:I,ReactCurrentOwner:w};t.Children={map:F,forEach:function(e,t,n){F(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return F(e,(function(){t++})),t},toArray:function(e){return F(e,(function(e){return e}))||[]},only:function(e){if(!P(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=i,t.Profiler=s,t.PureComponent=b,t.StrictMode=a,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=m({},e.props),a=e.key,s=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,o=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)x.call(t,c)&&!S.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=r;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];i.children=l}return{$$typeof:n,type:e.type,key:a,ref:s,props:i,_owner:o}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:M}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=I.transition;I.transition={};try{e()}finally{I.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return D.current.useCallback(e,t)},t.useContext=function(e){return D.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return D.current.useDeferredValue(e)},t.useEffect=function(e,t){return D.current.useEffect(e,t)},t.useId=function(){return D.current.useId()},t.useImperativeHandle=function(e,t,n){return D.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return D.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return D.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return D.current.useMemo(e,t)},t.useReducer=function(e,t,n){return D.current.useReducer(e,t,n)},t.useRef=function(e){return D.current.useRef(e)},t.useState=function(e){return D.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return D.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return D.current.useTransition()},t.version="18.2.0"},294:function(e,t,n){"use strict";e.exports=n(408)},53:function(e,t){"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<a(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,s=i>>>1;r<s;){var o=2*(r+1)-1,l=e[o],c=o+1,u=e[c];if(0>a(l,n))c<i&&0>a(u,l)?(e[r]=u,e[c]=n,r=c):(e[r]=l,e[o]=n,r=o);else{if(!(c<i&&0>a(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var s=performance;t.unstable_now=function(){return s.now()}}else{var o=Date,l=o.now();t.unstable_now=function(){return o.now()-l}}var c=[],u=[],h=1,f=null,p=3,d=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function k(e){for(var t=r(u);null!==t;){if(null===t.callback)i(u);else{if(!(t.startTime<=e))break;i(u),t.sortIndex=t.expirationTime,n(c,t)}t=r(u)}}function E(e){if(g=!1,k(e),!m)if(null!==r(c))m=!0,I(x);else{var t=r(u);null!==t&&R(E,t.startTime-e)}}function x(e,n){m=!1,g&&(g=!1,v(P),P=-1),d=!0;var a=p;try{for(k(n),f=r(c);null!==f&&(!(f.expirationTime>n)||e&&!A());){var s=f.callback;if("function"==typeof s){f.callback=null,p=f.priorityLevel;var o=s(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?f.callback=o:f===r(c)&&i(c),k(n)}else i(c);f=r(c)}if(null!==f)var l=!0;else{var h=r(u);null!==h&&R(E,h.startTime-n),l=!1}return l}finally{f=null,p=a,d=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var w,S=!1,C=null,P=-1,_=5,T=-1;function A(){return!(t.unstable_now()-T<_)}function F(){if(null!==C){var e=t.unstable_now();T=e;var n=!0;try{n=C(!0,e)}finally{n?w():(S=!1,C=null)}}else S=!1}if("function"==typeof b)w=function(){b(F)};else if("undefined"!=typeof MessageChannel){var M=new MessageChannel,D=M.port2;M.port1.onmessage=F,w=function(){D.postMessage(null)}}else w=function(){y(F,0)};function I(e){C=e,S||(S=!0,w())}function R(e,n){P=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||d||(m=!0,I(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,i,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:h++,callback:i,priorityLevel:e,startTime:a,expirationTime:o=a+o,sortIndex:-1},a>s?(e.sortIndex=a,n(u,e),null===r(c)&&e===r(u)&&(g?(v(P),P=-1):g=!0,R(E,a-s))):(e.sortIndex=o,n(c,e),m||d||(m=!0,I(x))),e},t.unstable_shouldYield=A,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:function(e,t,n){"use strict";e.exports=n(53)}},__webpack_module_cache__={},leafPrototypes,getProto;function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={id:e,loaded:!1,exports:{}};return __webpack_modules__[e].call(n.exports,n,n.exports,__webpack_require__),n.loaded=!0,n.exports}__webpack_require__.amdO={},__webpack_require__.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(t,{a:t}),t},getProto=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},__webpack_require__.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if("object"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&"function"==typeof e.then)return e}var n=Object.create(null);__webpack_require__.r(n);var r={};leafPrototypes=leafPrototypes||[null,getProto({}),getProto([]),getProto(getProto)];for(var i=2&t&&e;"object"==typeof i&&!~leafPrototypes.indexOf(i);i=getProto(i))Object.getOwnPropertyNames(i).forEach((function(t){r[t]=function(){return e[t]}}));return r.default=function(){return e},__webpack_require__.d(n,r),n},__webpack_require__.d=function(e,t){for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.hmd=function(e){return(e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:function(){throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(672)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,